I0210 21:21:57.519042 28679 caffe.cpp:184] Using GPUs 2
I0210 21:21:58.021817 28679 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 2
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:21:58.023221 28679 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:21:58.024245 28679 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:21:58.024271 28679 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:21:58.024410 28679 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 128
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:21:58.024492 28679 layer_factory.hpp:77] Creating layer mnist
I0210 21:21:58.025290 28679 net.cpp:106] Creating Layer mnist
I0210 21:21:58.025311 28679 net.cpp:411] mnist -> data
I0210 21:21:58.025349 28679 net.cpp:411] mnist -> label
I0210 21:21:58.031558 28683 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:21:58.049986 28679 data_layer.cpp:41] output data size: 128,1,28,28
I0210 21:21:58.053248 28679 net.cpp:150] Setting up mnist
I0210 21:21:58.053331 28679 net.cpp:157] Top shape: 128 1 28 28 (100352)
I0210 21:21:58.053349 28679 net.cpp:157] Top shape: 128 (128)
I0210 21:21:58.053359 28679 net.cpp:165] Memory required for data: 401920
I0210 21:21:58.053395 28679 layer_factory.hpp:77] Creating layer conv1
I0210 21:21:58.053464 28679 net.cpp:106] Creating Layer conv1
I0210 21:21:58.053489 28679 net.cpp:454] conv1 <- data
I0210 21:21:58.053535 28679 net.cpp:411] conv1 -> conv1
I0210 21:21:58.055775 28679 net.cpp:150] Setting up conv1
I0210 21:21:58.055809 28679 net.cpp:157] Top shape: 128 20 24 24 (1474560)
I0210 21:21:58.055819 28679 net.cpp:165] Memory required for data: 6300160
I0210 21:21:58.055855 28679 layer_factory.hpp:77] Creating layer pool1
I0210 21:21:58.055896 28679 net.cpp:106] Creating Layer pool1
I0210 21:21:58.055910 28679 net.cpp:454] pool1 <- conv1
I0210 21:21:58.055927 28679 net.cpp:411] pool1 -> pool1
I0210 21:21:58.056488 28679 net.cpp:150] Setting up pool1
I0210 21:21:58.056515 28679 net.cpp:157] Top shape: 128 20 12 12 (368640)
I0210 21:21:58.056525 28679 net.cpp:165] Memory required for data: 7774720
I0210 21:21:58.056535 28679 layer_factory.hpp:77] Creating layer conv2
I0210 21:21:58.056571 28679 net.cpp:106] Creating Layer conv2
I0210 21:21:58.056586 28679 net.cpp:454] conv2 <- pool1
I0210 21:21:58.056612 28679 net.cpp:411] conv2 -> conv2
I0210 21:21:58.059000 28679 net.cpp:150] Setting up conv2
I0210 21:21:58.059032 28679 net.cpp:157] Top shape: 128 50 8 8 (409600)
I0210 21:21:58.059041 28679 net.cpp:165] Memory required for data: 9413120
I0210 21:21:58.059067 28679 layer_factory.hpp:77] Creating layer pool2
I0210 21:21:58.059090 28679 net.cpp:106] Creating Layer pool2
I0210 21:21:58.059104 28679 net.cpp:454] pool2 <- conv2
I0210 21:21:58.059126 28679 net.cpp:411] pool2 -> pool2
I0210 21:21:58.059450 28679 net.cpp:150] Setting up pool2
I0210 21:21:58.059474 28679 net.cpp:157] Top shape: 128 50 4 4 (102400)
I0210 21:21:58.059484 28679 net.cpp:165] Memory required for data: 9822720
I0210 21:21:58.059494 28679 layer_factory.hpp:77] Creating layer ip1
I0210 21:21:58.059551 28679 net.cpp:106] Creating Layer ip1
I0210 21:21:58.059567 28679 net.cpp:454] ip1 <- pool2
I0210 21:21:58.059586 28679 net.cpp:411] ip1 -> ip1
I0210 21:21:58.066210 28679 net.cpp:150] Setting up ip1
I0210 21:21:58.066226 28679 net.cpp:157] Top shape: 128 500 (64000)
I0210 21:21:58.066231 28679 net.cpp:165] Memory required for data: 10078720
I0210 21:21:58.066242 28679 layer_factory.hpp:77] Creating layer relu1
I0210 21:21:58.066252 28679 net.cpp:106] Creating Layer relu1
I0210 21:21:58.066258 28679 net.cpp:454] relu1 <- ip1
I0210 21:21:58.066268 28679 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:21:58.066282 28679 net.cpp:150] Setting up relu1
I0210 21:21:58.066289 28679 net.cpp:157] Top shape: 128 500 (64000)
I0210 21:21:58.066294 28679 net.cpp:165] Memory required for data: 10334720
I0210 21:21:58.066299 28679 layer_factory.hpp:77] Creating layer ip2
I0210 21:21:58.066309 28679 net.cpp:106] Creating Layer ip2
I0210 21:21:58.066314 28679 net.cpp:454] ip2 <- ip1
I0210 21:21:58.066323 28679 net.cpp:411] ip2 -> ip2
I0210 21:21:58.067268 28679 net.cpp:150] Setting up ip2
I0210 21:21:58.067282 28679 net.cpp:157] Top shape: 128 10 (1280)
I0210 21:21:58.067286 28679 net.cpp:165] Memory required for data: 10339840
I0210 21:21:58.067296 28679 layer_factory.hpp:77] Creating layer loss
I0210 21:21:58.067306 28679 net.cpp:106] Creating Layer loss
I0210 21:21:58.067311 28679 net.cpp:454] loss <- ip2
I0210 21:21:58.067317 28679 net.cpp:454] loss <- label
I0210 21:21:58.067330 28679 net.cpp:411] loss -> loss
I0210 21:21:58.067351 28679 layer_factory.hpp:77] Creating layer loss
I0210 21:21:58.068202 28679 net.cpp:150] Setting up loss
I0210 21:21:58.068215 28679 net.cpp:157] Top shape: (1)
I0210 21:21:58.068219 28679 net.cpp:160]     with loss weight 1
I0210 21:21:58.068258 28679 net.cpp:165] Memory required for data: 10339844
I0210 21:21:58.068267 28679 net.cpp:226] loss needs backward computation.
I0210 21:21:58.068274 28679 net.cpp:226] ip2 needs backward computation.
I0210 21:21:58.068279 28679 net.cpp:226] relu1 needs backward computation.
I0210 21:21:58.068284 28679 net.cpp:226] ip1 needs backward computation.
I0210 21:21:58.068289 28679 net.cpp:226] pool2 needs backward computation.
I0210 21:21:58.068295 28679 net.cpp:226] conv2 needs backward computation.
I0210 21:21:58.068305 28679 net.cpp:226] pool1 needs backward computation.
I0210 21:21:58.068310 28679 net.cpp:226] conv1 needs backward computation.
I0210 21:21:58.068316 28679 net.cpp:228] mnist does not need backward computation.
I0210 21:21:58.068321 28679 net.cpp:270] This network produces output loss
I0210 21:21:58.068341 28679 net.cpp:283] Network initialization done.
I0210 21:21:58.069430 28679 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:21:58.069476 28679 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:21:58.069665 28679 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:21:58.069788 28679 layer_factory.hpp:77] Creating layer mnist
I0210 21:21:58.069936 28679 net.cpp:106] Creating Layer mnist
I0210 21:21:58.069950 28679 net.cpp:411] mnist -> data
I0210 21:21:58.069964 28679 net.cpp:411] mnist -> label
I0210 21:21:58.074697 28685 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:21:58.075142 28679 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:21:58.077090 28679 net.cpp:150] Setting up mnist
I0210 21:21:58.077118 28679 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:21:58.077132 28679 net.cpp:157] Top shape: 100 (100)
I0210 21:21:58.077142 28679 net.cpp:165] Memory required for data: 314000
I0210 21:21:58.077149 28679 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:21:58.077162 28679 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:21:58.077172 28679 net.cpp:454] label_mnist_1_split <- label
I0210 21:21:58.077183 28679 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:21:58.077196 28679 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:21:58.077347 28679 net.cpp:150] Setting up label_mnist_1_split
I0210 21:21:58.077363 28679 net.cpp:157] Top shape: 100 (100)
I0210 21:21:58.077371 28679 net.cpp:157] Top shape: 100 (100)
I0210 21:21:58.077378 28679 net.cpp:165] Memory required for data: 314800
I0210 21:21:58.077383 28679 layer_factory.hpp:77] Creating layer conv1
I0210 21:21:58.077404 28679 net.cpp:106] Creating Layer conv1
I0210 21:21:58.077414 28679 net.cpp:454] conv1 <- data
I0210 21:21:58.077428 28679 net.cpp:411] conv1 -> conv1
I0210 21:21:58.077781 28679 net.cpp:150] Setting up conv1
I0210 21:21:58.077800 28679 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:21:58.077806 28679 net.cpp:165] Memory required for data: 4922800
I0210 21:21:58.077822 28679 layer_factory.hpp:77] Creating layer pool1
I0210 21:21:58.077839 28679 net.cpp:106] Creating Layer pool1
I0210 21:21:58.077870 28679 net.cpp:454] pool1 <- conv1
I0210 21:21:58.077883 28679 net.cpp:411] pool1 -> pool1
I0210 21:21:58.078094 28679 net.cpp:150] Setting up pool1
I0210 21:21:58.078110 28679 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:21:58.078116 28679 net.cpp:165] Memory required for data: 6074800
I0210 21:21:58.078122 28679 layer_factory.hpp:77] Creating layer conv2
I0210 21:21:58.078145 28679 net.cpp:106] Creating Layer conv2
I0210 21:21:58.078152 28679 net.cpp:454] conv2 <- pool1
I0210 21:21:58.078164 28679 net.cpp:411] conv2 -> conv2
I0210 21:21:58.078758 28679 net.cpp:150] Setting up conv2
I0210 21:21:58.078779 28679 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:21:58.078785 28679 net.cpp:165] Memory required for data: 7354800
I0210 21:21:58.078800 28679 layer_factory.hpp:77] Creating layer pool2
I0210 21:21:58.078814 28679 net.cpp:106] Creating Layer pool2
I0210 21:21:58.078822 28679 net.cpp:454] pool2 <- conv2
I0210 21:21:58.078831 28679 net.cpp:411] pool2 -> pool2
I0210 21:21:58.079041 28679 net.cpp:150] Setting up pool2
I0210 21:21:58.079056 28679 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:21:58.079061 28679 net.cpp:165] Memory required for data: 7674800
I0210 21:21:58.079068 28679 layer_factory.hpp:77] Creating layer ip1
I0210 21:21:58.079084 28679 net.cpp:106] Creating Layer ip1
I0210 21:21:58.079092 28679 net.cpp:454] ip1 <- pool2
I0210 21:21:58.079107 28679 net.cpp:411] ip1 -> ip1
I0210 21:21:58.085782 28679 net.cpp:150] Setting up ip1
I0210 21:21:58.085806 28679 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:21:58.085814 28679 net.cpp:165] Memory required for data: 7874800
I0210 21:21:58.085834 28679 layer_factory.hpp:77] Creating layer relu1
I0210 21:21:58.085846 28679 net.cpp:106] Creating Layer relu1
I0210 21:21:58.085855 28679 net.cpp:454] relu1 <- ip1
I0210 21:21:58.085875 28679 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:21:58.085891 28679 net.cpp:150] Setting up relu1
I0210 21:21:58.085903 28679 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:21:58.085911 28679 net.cpp:165] Memory required for data: 8074800
I0210 21:21:58.085919 28679 layer_factory.hpp:77] Creating layer ip2
I0210 21:21:58.085935 28679 net.cpp:106] Creating Layer ip2
I0210 21:21:58.085945 28679 net.cpp:454] ip2 <- ip1
I0210 21:21:58.085964 28679 net.cpp:411] ip2 -> ip2
I0210 21:21:58.086206 28679 net.cpp:150] Setting up ip2
I0210 21:21:58.086225 28679 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:21:58.086235 28679 net.cpp:165] Memory required for data: 8078800
I0210 21:21:58.086248 28679 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:21:58.086262 28679 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:21:58.086272 28679 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:21:58.086284 28679 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:21:58.086303 28679 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:21:58.086370 28679 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:21:58.086385 28679 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:21:58.086397 28679 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:21:58.086405 28679 net.cpp:165] Memory required for data: 8086800
I0210 21:21:58.086416 28679 layer_factory.hpp:77] Creating layer accuracy
I0210 21:21:58.086448 28679 net.cpp:106] Creating Layer accuracy
I0210 21:21:58.086458 28679 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:21:58.086470 28679 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:21:58.086483 28679 net.cpp:411] accuracy -> accuracy
I0210 21:21:58.086506 28679 net.cpp:150] Setting up accuracy
I0210 21:21:58.086524 28679 net.cpp:157] Top shape: (1)
I0210 21:21:58.086532 28679 net.cpp:165] Memory required for data: 8086804
I0210 21:21:58.086540 28679 layer_factory.hpp:77] Creating layer loss
I0210 21:21:58.086552 28679 net.cpp:106] Creating Layer loss
I0210 21:21:58.086562 28679 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:21:58.086573 28679 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:21:58.086585 28679 net.cpp:411] loss -> loss
I0210 21:21:58.086602 28679 layer_factory.hpp:77] Creating layer loss
I0210 21:21:58.086791 28679 net.cpp:150] Setting up loss
I0210 21:21:58.086810 28679 net.cpp:157] Top shape: (1)
I0210 21:21:58.086817 28679 net.cpp:160]     with loss weight 1
I0210 21:21:58.086833 28679 net.cpp:165] Memory required for data: 8086808
I0210 21:21:58.086841 28679 net.cpp:226] loss needs backward computation.
I0210 21:21:58.086851 28679 net.cpp:228] accuracy does not need backward computation.
I0210 21:21:58.086863 28679 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:21:58.086871 28679 net.cpp:226] ip2 needs backward computation.
I0210 21:21:58.086879 28679 net.cpp:226] relu1 needs backward computation.
I0210 21:21:58.086887 28679 net.cpp:226] ip1 needs backward computation.
I0210 21:21:58.086894 28679 net.cpp:226] pool2 needs backward computation.
I0210 21:21:58.086902 28679 net.cpp:226] conv2 needs backward computation.
I0210 21:21:58.086911 28679 net.cpp:226] pool1 needs backward computation.
I0210 21:21:58.086920 28679 net.cpp:226] conv1 needs backward computation.
I0210 21:21:58.086930 28679 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:21:58.086941 28679 net.cpp:228] mnist does not need backward computation.
I0210 21:21:58.086948 28679 net.cpp:270] This network produces output accuracy
I0210 21:21:58.086957 28679 net.cpp:270] This network produces output loss
I0210 21:21:58.086984 28679 net.cpp:283] Network initialization done.
I0210 21:21:58.087050 28679 solver.cpp:60] Solver scaffolding done.
I0210 21:21:58.087507 28679 caffe.cpp:212] Starting Optimization
I0210 21:21:58.087523 28679 solver.cpp:311] Solving LeNet
I0210 21:21:58.087532 28679 solver.cpp:312] Learning Rate Policy: inv
I0210 21:21:58.088559 28679 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:21:59.058868 28679 solver.cpp:432]     Test net output #0: accuracy = 0.0936
I0210 21:21:59.058898 28679 solver.cpp:432]     Test net output #1: loss = 2.39209 (* 1 = 2.39209 loss)
I0210 21:21:59.082020 28679 solver.cpp:250] Iteration 0, loss = 2.3705 Time spent communicating 0.002688
I0210 21:21:59.082044 28679 solver.cpp:267]     Train net output #0: loss = 2.3705 (* 1 = 2.3705 loss)
I0210 21:21:59.090183 28679 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:22:02.029070 28679 solver.cpp:250] Iteration 100, loss = 0.244223 Time spent communicating 0.460223
I0210 21:22:02.029119 28679 solver.cpp:267]     Train net output #0: loss = 0.244223 (* 1 = 0.244223 loss)
I0210 21:22:02.037801 28679 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:22:04.973677 28679 solver.cpp:250] Iteration 200, loss = 0.150489 Time spent communicating 0.418176
I0210 21:22:04.973701 28679 solver.cpp:267]     Train net output #0: loss = 0.150489 (* 1 = 0.150489 loss)
I0210 21:22:04.982612 28679 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:22:07.924237 28679 solver.cpp:250] Iteration 300, loss = 0.11736 Time spent communicating 0.434112
I0210 21:22:07.924262 28679 solver.cpp:267]     Train net output #0: loss = 0.11736 (* 1 = 0.11736 loss)
I0210 21:22:07.933234 28679 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:22:10.878074 28679 solver.cpp:250] Iteration 400, loss = 0.188586 Time spent communicating 0.4232
I0210 21:22:10.878098 28679 solver.cpp:267]     Train net output #0: loss = 0.188586 (* 1 = 0.188586 loss)
I0210 21:22:10.886608 28679 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:22:13.810336 28679 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:22:13.843902 28679 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:22:13.881744 28679 solver.cpp:344] Iteration 500, loss = 0.0555685
I0210 21:22:13.881768 28679 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:22:14.857925 28679 solver.cpp:432]     Test net output #0: accuracy = 0.9709
I0210 21:22:14.857964 28679 solver.cpp:432]     Test net output #1: loss = 0.0852377 (* 1 = 0.0852377 loss)
I0210 21:22:14.857978 28679 solver.cpp:349] Optimization Done.
I0210 21:22:14.858022 28679 caffe.cpp:215] Optimization Done.
