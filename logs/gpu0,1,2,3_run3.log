I0211 09:42:26.784821  4841 caffe.cpp:184] Using GPUs 0, 1, 2, 3
I0211 09:42:31.540149  4841 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "examples/mnist/lenet_train_test.prototxt"
I0211 09:42:31.550237  4841 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0211 09:42:31.551666  4841 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0211 09:42:31.551723  4841 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0211 09:42:31.551993  4841 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 32
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:42:31.552103  4841 layer_factory.hpp:77] Creating layer mnist
I0211 09:42:31.552961  4841 net.cpp:106] Creating Layer mnist
I0211 09:42:31.553004  4841 net.cpp:411] mnist -> data
I0211 09:42:31.553148  4841 net.cpp:411] mnist -> label
I0211 09:42:31.558699  4845 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0211 09:42:31.576745  4841 data_layer.cpp:41] output data size: 32,1,28,28
I0211 09:42:31.578460  4841 net.cpp:150] Setting up mnist
I0211 09:42:31.578485  4841 net.cpp:157] Top shape: 32 1 28 28 (25088)
I0211 09:42:31.578493  4841 net.cpp:157] Top shape: 32 (32)
I0211 09:42:31.578497  4841 net.cpp:165] Memory required for data: 100480
I0211 09:42:31.578511  4841 layer_factory.hpp:77] Creating layer conv1
I0211 09:42:31.578544  4841 net.cpp:106] Creating Layer conv1
I0211 09:42:31.578555  4841 net.cpp:454] conv1 <- data
I0211 09:42:31.578573  4841 net.cpp:411] conv1 -> conv1
I0211 09:42:31.579830  4841 net.cpp:150] Setting up conv1
I0211 09:42:31.579846  4841 net.cpp:157] Top shape: 32 20 24 24 (368640)
I0211 09:42:31.579851  4841 net.cpp:165] Memory required for data: 1575040
I0211 09:42:31.579869  4841 layer_factory.hpp:77] Creating layer pool1
I0211 09:42:31.579886  4841 net.cpp:106] Creating Layer pool1
I0211 09:42:31.579892  4841 net.cpp:454] pool1 <- conv1
I0211 09:42:31.579901  4841 net.cpp:411] pool1 -> pool1
I0211 09:42:31.580121  4841 net.cpp:150] Setting up pool1
I0211 09:42:31.580133  4841 net.cpp:157] Top shape: 32 20 12 12 (92160)
I0211 09:42:31.580139  4841 net.cpp:165] Memory required for data: 1943680
I0211 09:42:31.580145  4841 layer_factory.hpp:77] Creating layer conv2
I0211 09:42:31.580163  4841 net.cpp:106] Creating Layer conv2
I0211 09:42:31.580169  4841 net.cpp:454] conv2 <- pool1
I0211 09:42:31.580179  4841 net.cpp:411] conv2 -> conv2
I0211 09:42:31.580598  4841 net.cpp:150] Setting up conv2
I0211 09:42:31.580611  4841 net.cpp:157] Top shape: 32 50 8 8 (102400)
I0211 09:42:31.580616  4841 net.cpp:165] Memory required for data: 2353280
I0211 09:42:31.580634  4841 layer_factory.hpp:77] Creating layer pool2
I0211 09:42:31.580647  4841 net.cpp:106] Creating Layer pool2
I0211 09:42:31.580652  4841 net.cpp:454] pool2 <- conv2
I0211 09:42:31.580659  4841 net.cpp:411] pool2 -> pool2
I0211 09:42:31.580811  4841 net.cpp:150] Setting up pool2
I0211 09:42:31.580821  4841 net.cpp:157] Top shape: 32 50 4 4 (25600)
I0211 09:42:31.580826  4841 net.cpp:165] Memory required for data: 2455680
I0211 09:42:31.580831  4841 layer_factory.hpp:77] Creating layer ip1
I0211 09:42:31.580848  4841 net.cpp:106] Creating Layer ip1
I0211 09:42:31.580855  4841 net.cpp:454] ip1 <- pool2
I0211 09:42:31.580867  4841 net.cpp:411] ip1 -> ip1
I0211 09:42:31.583212  4846 blocking_queue.cpp:50] Waiting for data
I0211 09:42:31.585400  4841 net.cpp:150] Setting up ip1
I0211 09:42:31.585418  4841 net.cpp:157] Top shape: 32 500 (16000)
I0211 09:42:31.585423  4841 net.cpp:165] Memory required for data: 2519680
I0211 09:42:31.585434  4841 layer_factory.hpp:77] Creating layer relu1
I0211 09:42:31.585446  4841 net.cpp:106] Creating Layer relu1
I0211 09:42:31.585451  4841 net.cpp:454] relu1 <- ip1
I0211 09:42:31.585458  4841 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:42:31.585471  4841 net.cpp:150] Setting up relu1
I0211 09:42:31.585479  4841 net.cpp:157] Top shape: 32 500 (16000)
I0211 09:42:31.585484  4841 net.cpp:165] Memory required for data: 2583680
I0211 09:42:31.585489  4841 layer_factory.hpp:77] Creating layer ip2
I0211 09:42:31.585501  4841 net.cpp:106] Creating Layer ip2
I0211 09:42:31.585507  4841 net.cpp:454] ip2 <- ip1
I0211 09:42:31.585516  4841 net.cpp:411] ip2 -> ip2
I0211 09:42:31.586392  4841 net.cpp:150] Setting up ip2
I0211 09:42:31.586405  4841 net.cpp:157] Top shape: 32 10 (320)
I0211 09:42:31.586410  4841 net.cpp:165] Memory required for data: 2584960
I0211 09:42:31.586418  4841 layer_factory.hpp:77] Creating layer loss
I0211 09:42:31.586428  4841 net.cpp:106] Creating Layer loss
I0211 09:42:31.586434  4841 net.cpp:454] loss <- ip2
I0211 09:42:31.586441  4841 net.cpp:454] loss <- label
I0211 09:42:31.586452  4841 net.cpp:411] loss -> loss
I0211 09:42:31.586470  4841 layer_factory.hpp:77] Creating layer loss
I0211 09:42:31.586567  4841 net.cpp:150] Setting up loss
I0211 09:42:31.586578  4841 net.cpp:157] Top shape: (1)
I0211 09:42:31.586583  4841 net.cpp:160]     with loss weight 1
I0211 09:42:31.586613  4841 net.cpp:165] Memory required for data: 2584964
I0211 09:42:31.586626  4841 net.cpp:226] loss needs backward computation.
I0211 09:42:31.586632  4841 net.cpp:226] ip2 needs backward computation.
I0211 09:42:31.586638  4841 net.cpp:226] relu1 needs backward computation.
I0211 09:42:31.586642  4841 net.cpp:226] ip1 needs backward computation.
I0211 09:42:31.586648  4841 net.cpp:226] pool2 needs backward computation.
I0211 09:42:31.586652  4841 net.cpp:226] conv2 needs backward computation.
I0211 09:42:31.586661  4841 net.cpp:226] pool1 needs backward computation.
I0211 09:42:31.586668  4841 net.cpp:226] conv1 needs backward computation.
I0211 09:42:31.586673  4841 net.cpp:228] mnist does not need backward computation.
I0211 09:42:31.586678  4841 net.cpp:270] This network produces output loss
I0211 09:42:31.586694  4841 net.cpp:283] Network initialization done.
I0211 09:42:31.587932  4841 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0211 09:42:31.587976  4841 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0211 09:42:31.588155  4841 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:42:31.588253  4841 layer_factory.hpp:77] Creating layer mnist
I0211 09:42:31.588397  4841 net.cpp:106] Creating Layer mnist
I0211 09:42:31.588413  4841 net.cpp:411] mnist -> data
I0211 09:42:31.588424  4841 net.cpp:411] mnist -> label
I0211 09:42:31.593832  4847 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0211 09:42:31.594360  4841 data_layer.cpp:41] output data size: 100,1,28,28
I0211 09:42:31.596499  4841 net.cpp:150] Setting up mnist
I0211 09:42:31.596528  4841 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0211 09:42:31.596539  4841 net.cpp:157] Top shape: 100 (100)
I0211 09:42:31.596550  4841 net.cpp:165] Memory required for data: 314000
I0211 09:42:31.596560  4841 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0211 09:42:31.596577  4841 net.cpp:106] Creating Layer label_mnist_1_split
I0211 09:42:31.596585  4841 net.cpp:454] label_mnist_1_split <- label
I0211 09:42:31.596598  4841 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0211 09:42:31.596624  4841 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0211 09:42:31.596735  4841 net.cpp:150] Setting up label_mnist_1_split
I0211 09:42:31.596753  4841 net.cpp:157] Top shape: 100 (100)
I0211 09:42:31.596765  4841 net.cpp:157] Top shape: 100 (100)
I0211 09:42:31.596776  4841 net.cpp:165] Memory required for data: 314800
I0211 09:42:31.596786  4841 layer_factory.hpp:77] Creating layer conv1
I0211 09:42:31.596812  4841 net.cpp:106] Creating Layer conv1
I0211 09:42:31.596824  4841 net.cpp:454] conv1 <- data
I0211 09:42:31.596844  4841 net.cpp:411] conv1 -> conv1
I0211 09:42:31.597270  4841 net.cpp:150] Setting up conv1
I0211 09:42:31.597293  4841 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0211 09:42:31.597303  4841 net.cpp:165] Memory required for data: 4922800
I0211 09:42:31.597323  4841 layer_factory.hpp:77] Creating layer pool1
I0211 09:42:31.597368  4841 net.cpp:106] Creating Layer pool1
I0211 09:42:31.597383  4841 net.cpp:454] pool1 <- conv1
I0211 09:42:31.597395  4841 net.cpp:411] pool1 -> pool1
I0211 09:42:31.597668  4841 net.cpp:150] Setting up pool1
I0211 09:42:31.597688  4841 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0211 09:42:31.597699  4841 net.cpp:165] Memory required for data: 6074800
I0211 09:42:31.597708  4841 layer_factory.hpp:77] Creating layer conv2
I0211 09:42:31.597738  4841 net.cpp:106] Creating Layer conv2
I0211 09:42:31.597749  4841 net.cpp:454] conv2 <- pool1
I0211 09:42:31.597764  4841 net.cpp:411] conv2 -> conv2
I0211 09:42:31.598505  4841 net.cpp:150] Setting up conv2
I0211 09:42:31.598529  4841 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0211 09:42:31.598539  4841 net.cpp:165] Memory required for data: 7354800
I0211 09:42:31.598557  4841 layer_factory.hpp:77] Creating layer pool2
I0211 09:42:31.598573  4841 net.cpp:106] Creating Layer pool2
I0211 09:42:31.598583  4841 net.cpp:454] pool2 <- conv2
I0211 09:42:31.598598  4841 net.cpp:411] pool2 -> pool2
I0211 09:42:31.598862  4841 net.cpp:150] Setting up pool2
I0211 09:42:31.598881  4841 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0211 09:42:31.598891  4841 net.cpp:165] Memory required for data: 7674800
I0211 09:42:31.598901  4841 layer_factory.hpp:77] Creating layer ip1
I0211 09:42:31.598917  4841 net.cpp:106] Creating Layer ip1
I0211 09:42:31.598927  4841 net.cpp:454] ip1 <- pool2
I0211 09:42:31.598951  4841 net.cpp:411] ip1 -> ip1
I0211 09:42:31.606487  4841 net.cpp:150] Setting up ip1
I0211 09:42:31.606511  4841 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:42:31.606519  4841 net.cpp:165] Memory required for data: 7874800
I0211 09:42:31.606540  4841 layer_factory.hpp:77] Creating layer relu1
I0211 09:42:31.606556  4841 net.cpp:106] Creating Layer relu1
I0211 09:42:31.606565  4841 net.cpp:454] relu1 <- ip1
I0211 09:42:31.606583  4841 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:42:31.606600  4841 net.cpp:150] Setting up relu1
I0211 09:42:31.606611  4841 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:42:31.606629  4841 net.cpp:165] Memory required for data: 8074800
I0211 09:42:31.606640  4841 layer_factory.hpp:77] Creating layer ip2
I0211 09:42:31.606657  4841 net.cpp:106] Creating Layer ip2
I0211 09:42:31.606673  4841 net.cpp:454] ip2 <- ip1
I0211 09:42:31.606685  4841 net.cpp:411] ip2 -> ip2
I0211 09:42:31.606945  4841 net.cpp:150] Setting up ip2
I0211 09:42:31.606963  4841 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:42:31.606971  4841 net.cpp:165] Memory required for data: 8078800
I0211 09:42:31.606984  4841 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0211 09:42:31.606998  4841 net.cpp:106] Creating Layer ip2_ip2_0_split
I0211 09:42:31.607008  4841 net.cpp:454] ip2_ip2_0_split <- ip2
I0211 09:42:31.607025  4841 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0211 09:42:31.607043  4841 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0211 09:42:31.607108  4841 net.cpp:150] Setting up ip2_ip2_0_split
I0211 09:42:31.607125  4841 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:42:31.607137  4841 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:42:31.607146  4841 net.cpp:165] Memory required for data: 8086800
I0211 09:42:31.607156  4841 layer_factory.hpp:77] Creating layer accuracy
I0211 09:42:31.607180  4841 net.cpp:106] Creating Layer accuracy
I0211 09:42:31.607192  4841 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0211 09:42:31.607204  4841 net.cpp:454] accuracy <- label_mnist_1_split_0
I0211 09:42:31.607218  4841 net.cpp:411] accuracy -> accuracy
I0211 09:42:31.607245  4841 net.cpp:150] Setting up accuracy
I0211 09:42:31.607259  4841 net.cpp:157] Top shape: (1)
I0211 09:42:31.607269  4841 net.cpp:165] Memory required for data: 8086804
I0211 09:42:31.607278  4841 layer_factory.hpp:77] Creating layer loss
I0211 09:42:31.607291  4841 net.cpp:106] Creating Layer loss
I0211 09:42:31.607301  4841 net.cpp:454] loss <- ip2_ip2_0_split_1
I0211 09:42:31.607313  4841 net.cpp:454] loss <- label_mnist_1_split_1
I0211 09:42:31.607326  4841 net.cpp:411] loss -> loss
I0211 09:42:31.607374  4841 layer_factory.hpp:77] Creating layer loss
I0211 09:42:31.607534  4841 net.cpp:150] Setting up loss
I0211 09:42:31.607553  4841 net.cpp:157] Top shape: (1)
I0211 09:42:31.607561  4841 net.cpp:160]     with loss weight 1
I0211 09:42:31.607578  4841 net.cpp:165] Memory required for data: 8086808
I0211 09:42:31.607589  4841 net.cpp:226] loss needs backward computation.
I0211 09:42:31.607599  4841 net.cpp:228] accuracy does not need backward computation.
I0211 09:42:31.607610  4841 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0211 09:42:31.607627  4841 net.cpp:226] ip2 needs backward computation.
I0211 09:42:31.607637  4841 net.cpp:226] relu1 needs backward computation.
I0211 09:42:31.607647  4841 net.cpp:226] ip1 needs backward computation.
I0211 09:42:31.607656  4841 net.cpp:226] pool2 needs backward computation.
I0211 09:42:31.607666  4841 net.cpp:226] conv2 needs backward computation.
I0211 09:42:31.607676  4841 net.cpp:226] pool1 needs backward computation.
I0211 09:42:31.607686  4841 net.cpp:226] conv1 needs backward computation.
I0211 09:42:31.607697  4841 net.cpp:228] label_mnist_1_split does not need backward computation.
I0211 09:42:31.607708  4841 net.cpp:228] mnist does not need backward computation.
I0211 09:42:31.607717  4841 net.cpp:270] This network produces output accuracy
I0211 09:42:31.607725  4841 net.cpp:270] This network produces output loss
I0211 09:42:31.607756  4841 net.cpp:283] Network initialization done.
I0211 09:42:31.607825  4841 solver.cpp:60] Solver scaffolding done.
I0211 09:42:31.631983  4841 parallel.cpp:405] GPUs pairs 0:1, 2:3, 0:2
I0211 09:42:31.849726  4841 data_layer.cpp:41] output data size: 32,1,28,28
I0211 09:42:32.221374  4841 data_layer.cpp:41] output data size: 32,1,28,28
I0211 09:42:32.627018  4841 data_layer.cpp:41] output data size: 32,1,28,28
I0211 09:42:32.785776  4841 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0211 09:42:32.786006  4841 solver.cpp:311] Solving LeNet
I0211 09:42:32.786020  4841 solver.cpp:312] Learning Rate Policy: inv
I0211 09:42:32.786286  4841 solver.cpp:364] Iteration 0, Testing net (#0)
I0211 09:42:33.810645  4841 solver.cpp:432]     Test net output #0: accuracy = 0.1138
I0211 09:42:33.810686  4841 solver.cpp:432]     Test net output #1: loss = 2.37266 (* 1 = 2.37266 loss)
I0211 09:42:33.826289  4841 solver.cpp:250] Iteration 0, loss = 2.42599 Time spent communicating 0.368416
I0211 09:42:33.826323  4841 solver.cpp:267]     Train net output #0: loss = 2.42599 (* 1 = 2.42599 loss)
I0211 09:42:33.831897  4841 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0211 09:42:34.881209  4841 solver.cpp:250] Iteration 100, loss = 0.365468 Time spent communicating 162.968
I0211 09:42:34.881243  4841 solver.cpp:267]     Train net output #0: loss = 0.365468 (* 1 = 0.365468 loss)
I0211 09:42:34.882525  4841 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0211 09:42:35.921541  4841 solver.cpp:250] Iteration 200, loss = 0.20445 Time spent communicating 159.417
I0211 09:42:35.921566  4841 solver.cpp:267]     Train net output #0: loss = 0.20445 (* 1 = 0.20445 loss)
I0211 09:42:35.923172  4841 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0211 09:42:36.941422  4841 solver.cpp:250] Iteration 300, loss = 0.154924 Time spent communicating 142.134
I0211 09:42:36.941452  4841 solver.cpp:267]     Train net output #0: loss = 0.154924 (* 1 = 0.154924 loss)
I0211 09:42:36.942807  4841 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0211 09:42:37.942208  4841 solver.cpp:250] Iteration 400, loss = 0.345731 Time spent communicating 123.448
I0211 09:42:37.942236  4841 solver.cpp:267]     Train net output #0: loss = 0.345732 (* 1 = 0.345732 loss)
I0211 09:42:37.943296  4841 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0211 09:42:38.946439  4841 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0211 09:42:38.981494  4841 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0211 09:42:39.009994  4841 solver.cpp:344] Iteration 500, loss = 0.112157
I0211 09:42:39.010069  4841 solver.cpp:364] Iteration 500, Testing net (#0)
I0211 09:42:39.954576  4841 solver.cpp:432]     Test net output #0: accuracy = 0.976
I0211 09:42:39.954601  4841 solver.cpp:432]     Test net output #1: loss = 0.0743208 (* 1 = 0.0743208 loss)
I0211 09:42:39.954607  4841 solver.cpp:349] Optimization Done.
I0211 09:42:39.954651  4841 parallel.cpp:256] IN DESTRUCTOR AND I'M 1
I0211 09:42:39.971868  4841 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0211 09:42:39.987423  4841 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0211 09:42:40.003473  4841 parallel.cpp:256] IN DESTRUCTOR AND I'M 0
I0211 09:42:40.003921  4841 caffe.cpp:215] Optimization Done.
