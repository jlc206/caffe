I0210 21:22:48.595862 28693 caffe.cpp:184] Using GPUs 2, 3
I0210 21:22:49.111546 28693 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 2
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:22:49.112957 28693 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:22:49.114145 28693 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:22:49.114171 28693 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:22:49.114392 28693 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:22:49.114531 28693 layer_factory.hpp:77] Creating layer mnist
I0210 21:22:49.115715 28693 net.cpp:106] Creating Layer mnist
I0210 21:22:49.115733 28693 net.cpp:411] mnist -> data
I0210 21:22:49.115792 28693 net.cpp:411] mnist -> label
I0210 21:22:49.121532 28697 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:22:49.141857 28693 data_layer.cpp:41] output data size: 64,1,28,28
I0210 21:22:49.143438 28693 net.cpp:150] Setting up mnist
I0210 21:22:49.143462 28693 net.cpp:157] Top shape: 64 1 28 28 (50176)
I0210 21:22:49.143471 28693 net.cpp:157] Top shape: 64 (64)
I0210 21:22:49.143476 28693 net.cpp:165] Memory required for data: 200960
I0210 21:22:49.143489 28693 layer_factory.hpp:77] Creating layer conv1
I0210 21:22:49.143527 28693 net.cpp:106] Creating Layer conv1
I0210 21:22:49.143538 28693 net.cpp:454] conv1 <- data
I0210 21:22:49.143560 28693 net.cpp:411] conv1 -> conv1
I0210 21:22:49.144927 28693 net.cpp:150] Setting up conv1
I0210 21:22:49.144942 28693 net.cpp:157] Top shape: 64 20 24 24 (737280)
I0210 21:22:49.144947 28693 net.cpp:165] Memory required for data: 3150080
I0210 21:22:49.144964 28693 layer_factory.hpp:77] Creating layer pool1
I0210 21:22:49.144983 28693 net.cpp:106] Creating Layer pool1
I0210 21:22:49.144989 28693 net.cpp:454] pool1 <- conv1
I0210 21:22:49.144997 28693 net.cpp:411] pool1 -> pool1
I0210 21:22:49.145200 28693 net.cpp:150] Setting up pool1
I0210 21:22:49.145215 28693 net.cpp:157] Top shape: 64 20 12 12 (184320)
I0210 21:22:49.145220 28693 net.cpp:165] Memory required for data: 3887360
I0210 21:22:49.145227 28693 layer_factory.hpp:77] Creating layer conv2
I0210 21:22:49.145241 28693 net.cpp:106] Creating Layer conv2
I0210 21:22:49.145246 28693 net.cpp:454] conv2 <- pool1
I0210 21:22:49.145258 28693 net.cpp:411] conv2 -> conv2
I0210 21:22:49.145714 28693 net.cpp:150] Setting up conv2
I0210 21:22:49.145727 28693 net.cpp:157] Top shape: 64 50 8 8 (204800)
I0210 21:22:49.145732 28693 net.cpp:165] Memory required for data: 4706560
I0210 21:22:49.145745 28693 layer_factory.hpp:77] Creating layer pool2
I0210 21:22:49.145758 28693 net.cpp:106] Creating Layer pool2
I0210 21:22:49.145764 28693 net.cpp:454] pool2 <- conv2
I0210 21:22:49.145772 28693 net.cpp:411] pool2 -> pool2
I0210 21:22:49.145930 28693 net.cpp:150] Setting up pool2
I0210 21:22:49.145943 28693 net.cpp:157] Top shape: 64 50 4 4 (51200)
I0210 21:22:49.145949 28693 net.cpp:165] Memory required for data: 4911360
I0210 21:22:49.145954 28693 layer_factory.hpp:77] Creating layer ip1
I0210 21:22:49.145970 28693 net.cpp:106] Creating Layer ip1
I0210 21:22:49.145977 28693 net.cpp:454] ip1 <- pool2
I0210 21:22:49.145987 28693 net.cpp:411] ip1 -> ip1
I0210 21:22:49.148350 28698 blocking_queue.cpp:50] Waiting for data
I0210 21:22:49.150612 28693 net.cpp:150] Setting up ip1
I0210 21:22:49.150629 28693 net.cpp:157] Top shape: 64 500 (32000)
I0210 21:22:49.150634 28693 net.cpp:165] Memory required for data: 5039360
I0210 21:22:49.150645 28693 layer_factory.hpp:77] Creating layer relu1
I0210 21:22:49.150657 28693 net.cpp:106] Creating Layer relu1
I0210 21:22:49.150663 28693 net.cpp:454] relu1 <- ip1
I0210 21:22:49.150671 28693 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:22:49.150683 28693 net.cpp:150] Setting up relu1
I0210 21:22:49.150691 28693 net.cpp:157] Top shape: 64 500 (32000)
I0210 21:22:49.150696 28693 net.cpp:165] Memory required for data: 5167360
I0210 21:22:49.150701 28693 layer_factory.hpp:77] Creating layer ip2
I0210 21:22:49.150712 28693 net.cpp:106] Creating Layer ip2
I0210 21:22:49.150717 28693 net.cpp:454] ip2 <- ip1
I0210 21:22:49.150728 28693 net.cpp:411] ip2 -> ip2
I0210 21:22:49.151618 28693 net.cpp:150] Setting up ip2
I0210 21:22:49.151630 28693 net.cpp:157] Top shape: 64 10 (640)
I0210 21:22:49.151636 28693 net.cpp:165] Memory required for data: 5169920
I0210 21:22:49.151645 28693 layer_factory.hpp:77] Creating layer loss
I0210 21:22:49.151657 28693 net.cpp:106] Creating Layer loss
I0210 21:22:49.151664 28693 net.cpp:454] loss <- ip2
I0210 21:22:49.151670 28693 net.cpp:454] loss <- label
I0210 21:22:49.151679 28693 net.cpp:411] loss -> loss
I0210 21:22:49.151703 28693 layer_factory.hpp:77] Creating layer loss
I0210 21:22:49.151803 28693 net.cpp:150] Setting up loss
I0210 21:22:49.151813 28693 net.cpp:157] Top shape: (1)
I0210 21:22:49.151818 28693 net.cpp:160]     with loss weight 1
I0210 21:22:49.151847 28693 net.cpp:165] Memory required for data: 5169924
I0210 21:22:49.151856 28693 net.cpp:226] loss needs backward computation.
I0210 21:22:49.151864 28693 net.cpp:226] ip2 needs backward computation.
I0210 21:22:49.151870 28693 net.cpp:226] relu1 needs backward computation.
I0210 21:22:49.151875 28693 net.cpp:226] ip1 needs backward computation.
I0210 21:22:49.151878 28693 net.cpp:226] pool2 needs backward computation.
I0210 21:22:49.151883 28693 net.cpp:226] conv2 needs backward computation.
I0210 21:22:49.151900 28693 net.cpp:226] pool1 needs backward computation.
I0210 21:22:49.151911 28693 net.cpp:226] conv1 needs backward computation.
I0210 21:22:49.151922 28693 net.cpp:228] mnist does not need backward computation.
I0210 21:22:49.151932 28693 net.cpp:270] This network produces output loss
I0210 21:22:49.151960 28693 net.cpp:283] Network initialization done.
I0210 21:22:49.153111 28693 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:22:49.153168 28693 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:22:49.153337 28693 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:22:49.153439 28693 layer_factory.hpp:77] Creating layer mnist
I0210 21:22:49.153575 28693 net.cpp:106] Creating Layer mnist
I0210 21:22:49.153591 28693 net.cpp:411] mnist -> data
I0210 21:22:49.153604 28693 net.cpp:411] mnist -> label
I0210 21:22:49.158859 28699 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:22:49.159235 28693 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:22:49.160828 28693 net.cpp:150] Setting up mnist
I0210 21:22:49.160845 28693 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:22:49.160853 28693 net.cpp:157] Top shape: 100 (100)
I0210 21:22:49.160858 28693 net.cpp:165] Memory required for data: 314000
I0210 21:22:49.160866 28693 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:22:49.160903 28693 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:22:49.160912 28693 net.cpp:454] label_mnist_1_split <- label
I0210 21:22:49.160923 28693 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:22:49.160935 28693 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:22:49.161062 28693 net.cpp:150] Setting up label_mnist_1_split
I0210 21:22:49.161072 28693 net.cpp:157] Top shape: 100 (100)
I0210 21:22:49.161079 28693 net.cpp:157] Top shape: 100 (100)
I0210 21:22:49.161085 28693 net.cpp:165] Memory required for data: 314800
I0210 21:22:49.161090 28693 layer_factory.hpp:77] Creating layer conv1
I0210 21:22:49.161111 28693 net.cpp:106] Creating Layer conv1
I0210 21:22:49.161118 28693 net.cpp:454] conv1 <- data
I0210 21:22:49.161129 28693 net.cpp:411] conv1 -> conv1
I0210 21:22:49.161494 28693 net.cpp:150] Setting up conv1
I0210 21:22:49.161507 28693 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:22:49.161514 28693 net.cpp:165] Memory required for data: 4922800
I0210 21:22:49.161526 28693 layer_factory.hpp:77] Creating layer pool1
I0210 21:22:49.161563 28693 net.cpp:106] Creating Layer pool1
I0210 21:22:49.161571 28693 net.cpp:454] pool1 <- conv1
I0210 21:22:49.161581 28693 net.cpp:411] pool1 -> pool1
I0210 21:22:49.161742 28693 net.cpp:150] Setting up pool1
I0210 21:22:49.161752 28693 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:22:49.161758 28693 net.cpp:165] Memory required for data: 6074800
I0210 21:22:49.161763 28693 layer_factory.hpp:77] Creating layer conv2
I0210 21:22:49.161779 28693 net.cpp:106] Creating Layer conv2
I0210 21:22:49.161787 28693 net.cpp:454] conv2 <- pool1
I0210 21:22:49.161798 28693 net.cpp:411] conv2 -> conv2
I0210 21:22:49.162262 28693 net.cpp:150] Setting up conv2
I0210 21:22:49.162276 28693 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:22:49.162281 28693 net.cpp:165] Memory required for data: 7354800
I0210 21:22:49.162292 28693 layer_factory.hpp:77] Creating layer pool2
I0210 21:22:49.162307 28693 net.cpp:106] Creating Layer pool2
I0210 21:22:49.162314 28693 net.cpp:454] pool2 <- conv2
I0210 21:22:49.162322 28693 net.cpp:411] pool2 -> pool2
I0210 21:22:49.162472 28693 net.cpp:150] Setting up pool2
I0210 21:22:49.162482 28693 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:22:49.162487 28693 net.cpp:165] Memory required for data: 7674800
I0210 21:22:49.162493 28693 layer_factory.hpp:77] Creating layer ip1
I0210 21:22:49.162508 28693 net.cpp:106] Creating Layer ip1
I0210 21:22:49.162513 28693 net.cpp:454] ip1 <- pool2
I0210 21:22:49.162523 28693 net.cpp:411] ip1 -> ip1
I0210 21:22:49.171346 28693 net.cpp:150] Setting up ip1
I0210 21:22:49.171380 28693 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:22:49.171389 28693 net.cpp:165] Memory required for data: 7874800
I0210 21:22:49.171416 28693 layer_factory.hpp:77] Creating layer relu1
I0210 21:22:49.171427 28693 net.cpp:106] Creating Layer relu1
I0210 21:22:49.171434 28693 net.cpp:454] relu1 <- ip1
I0210 21:22:49.171442 28693 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:22:49.171452 28693 net.cpp:150] Setting up relu1
I0210 21:22:49.171459 28693 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:22:49.171463 28693 net.cpp:165] Memory required for data: 8074800
I0210 21:22:49.171468 28693 layer_factory.hpp:77] Creating layer ip2
I0210 21:22:49.171479 28693 net.cpp:106] Creating Layer ip2
I0210 21:22:49.171486 28693 net.cpp:454] ip2 <- ip1
I0210 21:22:49.171494 28693 net.cpp:411] ip2 -> ip2
I0210 21:22:49.171649 28693 net.cpp:150] Setting up ip2
I0210 21:22:49.171660 28693 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:22:49.171664 28693 net.cpp:165] Memory required for data: 8078800
I0210 21:22:49.171674 28693 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:22:49.171684 28693 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:22:49.171690 28693 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:22:49.171699 28693 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:22:49.171707 28693 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:22:49.171747 28693 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:22:49.171756 28693 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:22:49.171763 28693 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:22:49.171768 28693 net.cpp:165] Memory required for data: 8086800
I0210 21:22:49.171774 28693 layer_factory.hpp:77] Creating layer accuracy
I0210 21:22:49.171792 28693 net.cpp:106] Creating Layer accuracy
I0210 21:22:49.171797 28693 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:22:49.171804 28693 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:22:49.171813 28693 net.cpp:411] accuracy -> accuracy
I0210 21:22:49.171826 28693 net.cpp:150] Setting up accuracy
I0210 21:22:49.171834 28693 net.cpp:157] Top shape: (1)
I0210 21:22:49.171839 28693 net.cpp:165] Memory required for data: 8086804
I0210 21:22:49.171844 28693 layer_factory.hpp:77] Creating layer loss
I0210 21:22:49.171854 28693 net.cpp:106] Creating Layer loss
I0210 21:22:49.171859 28693 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:22:49.171865 28693 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:22:49.171875 28693 net.cpp:411] loss -> loss
I0210 21:22:49.171908 28693 layer_factory.hpp:77] Creating layer loss
I0210 21:22:49.172041 28693 net.cpp:150] Setting up loss
I0210 21:22:49.172057 28693 net.cpp:157] Top shape: (1)
I0210 21:22:49.172063 28693 net.cpp:160]     with loss weight 1
I0210 21:22:49.172076 28693 net.cpp:165] Memory required for data: 8086808
I0210 21:22:49.172083 28693 net.cpp:226] loss needs backward computation.
I0210 21:22:49.172089 28693 net.cpp:228] accuracy does not need backward computation.
I0210 21:22:49.172096 28693 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:22:49.172101 28693 net.cpp:226] ip2 needs backward computation.
I0210 21:22:49.172106 28693 net.cpp:226] relu1 needs backward computation.
I0210 21:22:49.172112 28693 net.cpp:226] ip1 needs backward computation.
I0210 21:22:49.172122 28693 net.cpp:226] pool2 needs backward computation.
I0210 21:22:49.172129 28693 net.cpp:226] conv2 needs backward computation.
I0210 21:22:49.172134 28693 net.cpp:226] pool1 needs backward computation.
I0210 21:22:49.172140 28693 net.cpp:226] conv1 needs backward computation.
I0210 21:22:49.172147 28693 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:22:49.172152 28693 net.cpp:228] mnist does not need backward computation.
I0210 21:22:49.172158 28693 net.cpp:270] This network produces output accuracy
I0210 21:22:49.172163 28693 net.cpp:270] This network produces output loss
I0210 21:22:49.172178 28693 net.cpp:283] Network initialization done.
I0210 21:22:49.172235 28693 solver.cpp:60] Solver scaffolding done.
I0210 21:22:49.175720 28693 parallel.cpp:405] GPUs pairs 2:3
I0210 21:22:49.411860 28693 data_layer.cpp:41] output data size: 64,1,28,28
I0210 21:22:49.489369 28693 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:22:49.489487 28693 solver.cpp:311] Solving LeNet
I0210 21:22:49.489505 28693 solver.cpp:312] Learning Rate Policy: inv
I0210 21:22:49.489753 28693 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:22:50.537714 28693 solver.cpp:432]     Test net output #0: accuracy = 0.1417
I0210 21:22:50.537761 28693 solver.cpp:432]     Test net output #1: loss = 2.29053 (* 1 = 2.29053 loss)
I0210 21:22:50.554038 28693 solver.cpp:250] Iteration 0, loss = 2.17943 Time spent communicating 0.17536
I0210 21:22:50.554061 28693 solver.cpp:267]     Train net output #0: loss = 2.17943 (* 1 = 2.17943 loss)
I0210 21:22:50.562618 28693 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:22:52.232878 28693 solver.cpp:250] Iteration 100, loss = 0.291966 Time spent communicating 50.5559
I0210 21:22:52.232924 28693 solver.cpp:267]     Train net output #0: loss = 0.291966 (* 1 = 0.291966 loss)
I0210 21:22:52.236368 28693 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:22:53.868401 28693 solver.cpp:250] Iteration 200, loss = 0.230826 Time spent communicating 28.8612
I0210 21:22:53.868438 28693 solver.cpp:267]     Train net output #0: loss = 0.230826 (* 1 = 0.230826 loss)
I0210 21:22:53.873237 28693 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:22:55.568066 28693 solver.cpp:250] Iteration 300, loss = 0.182594 Time spent communicating 24.1262
I0210 21:22:55.568111 28693 solver.cpp:267]     Train net output #0: loss = 0.182595 (* 1 = 0.182595 loss)
I0210 21:22:55.573117 28693 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:22:57.325459 28693 solver.cpp:250] Iteration 400, loss = 0.36185 Time spent communicating 24.4956
I0210 21:22:57.325489 28693 solver.cpp:267]     Train net output #0: loss = 0.36185 (* 1 = 0.36185 loss)
I0210 21:22:57.330240 28693 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:22:59.078276 28693 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:22:59.114094 28693 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:22:59.145174 28693 solver.cpp:344] Iteration 500, loss = 0.138108
I0210 21:22:59.145208 28693 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:23:00.109216 28693 solver.cpp:432]     Test net output #0: accuracy = 0.9742
I0210 21:23:00.109313 28693 solver.cpp:432]     Test net output #1: loss = 0.0790853 (* 1 = 0.0790853 loss)
I0210 21:23:00.109325 28693 solver.cpp:349] Optimization Done.
I0210 21:23:00.109379 28693 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0210 21:23:00.123934 28693 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0210 21:23:00.124449 28693 caffe.cpp:215] Optimization Done.
