I0211 09:43:43.641670  4889 caffe.cpp:184] Using GPUs 0, 1, 2
I0211 09:43:48.461155  4889 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "examples/mnist/lenet_train_test.prototxt"
I0211 09:43:48.470544  4889 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0211 09:43:48.472043  4889 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0211 09:43:48.472070  4889 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0211 09:43:48.472225  4889 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 43
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:43:48.472323  4889 layer_factory.hpp:77] Creating layer mnist
I0211 09:43:48.473565  4889 net.cpp:106] Creating Layer mnist
I0211 09:43:48.473587  4889 net.cpp:411] mnist -> data
I0211 09:43:48.473625  4889 net.cpp:411] mnist -> label
I0211 09:43:48.479027  4893 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0211 09:43:48.497808  4889 data_layer.cpp:41] output data size: 43,1,28,28
I0211 09:43:48.499073  4889 net.cpp:150] Setting up mnist
I0211 09:43:48.499096  4889 net.cpp:157] Top shape: 43 1 28 28 (33712)
I0211 09:43:48.499104  4889 net.cpp:157] Top shape: 43 (43)
I0211 09:43:48.499109  4889 net.cpp:165] Memory required for data: 135020
I0211 09:43:48.499122  4889 layer_factory.hpp:77] Creating layer conv1
I0211 09:43:48.499157  4889 net.cpp:106] Creating Layer conv1
I0211 09:43:48.499169  4889 net.cpp:454] conv1 <- data
I0211 09:43:48.499187  4889 net.cpp:411] conv1 -> conv1
I0211 09:43:48.500455  4889 net.cpp:150] Setting up conv1
I0211 09:43:48.500470  4889 net.cpp:157] Top shape: 43 20 24 24 (495360)
I0211 09:43:48.500475  4889 net.cpp:165] Memory required for data: 2116460
I0211 09:43:48.500491  4889 layer_factory.hpp:77] Creating layer pool1
I0211 09:43:48.500511  4889 net.cpp:106] Creating Layer pool1
I0211 09:43:48.500519  4889 net.cpp:454] pool1 <- conv1
I0211 09:43:48.500530  4889 net.cpp:411] pool1 -> pool1
I0211 09:43:48.500743  4889 net.cpp:150] Setting up pool1
I0211 09:43:48.500756  4889 net.cpp:157] Top shape: 43 20 12 12 (123840)
I0211 09:43:48.500761  4889 net.cpp:165] Memory required for data: 2611820
I0211 09:43:48.500766  4889 layer_factory.hpp:77] Creating layer conv2
I0211 09:43:48.500778  4889 net.cpp:106] Creating Layer conv2
I0211 09:43:48.500785  4889 net.cpp:454] conv2 <- pool1
I0211 09:43:48.500797  4889 net.cpp:411] conv2 -> conv2
I0211 09:43:48.501220  4889 net.cpp:150] Setting up conv2
I0211 09:43:48.501233  4889 net.cpp:157] Top shape: 43 50 8 8 (137600)
I0211 09:43:48.501237  4889 net.cpp:165] Memory required for data: 3162220
I0211 09:43:48.501248  4889 layer_factory.hpp:77] Creating layer pool2
I0211 09:43:48.501261  4889 net.cpp:106] Creating Layer pool2
I0211 09:43:48.501267  4889 net.cpp:454] pool2 <- conv2
I0211 09:43:48.501278  4889 net.cpp:411] pool2 -> pool2
I0211 09:43:48.501426  4889 net.cpp:150] Setting up pool2
I0211 09:43:48.501436  4889 net.cpp:157] Top shape: 43 50 4 4 (34400)
I0211 09:43:48.501442  4889 net.cpp:165] Memory required for data: 3299820
I0211 09:43:48.501447  4889 layer_factory.hpp:77] Creating layer ip1
I0211 09:43:48.501462  4889 net.cpp:106] Creating Layer ip1
I0211 09:43:48.501469  4889 net.cpp:454] ip1 <- pool2
I0211 09:43:48.501483  4889 net.cpp:411] ip1 -> ip1
I0211 09:43:48.503824  4894 blocking_queue.cpp:50] Waiting for data
I0211 09:43:48.505990  4889 net.cpp:150] Setting up ip1
I0211 09:43:48.506006  4889 net.cpp:157] Top shape: 43 500 (21500)
I0211 09:43:48.506011  4889 net.cpp:165] Memory required for data: 3385820
I0211 09:43:48.506022  4889 layer_factory.hpp:77] Creating layer relu1
I0211 09:43:48.506031  4889 net.cpp:106] Creating Layer relu1
I0211 09:43:48.506036  4889 net.cpp:454] relu1 <- ip1
I0211 09:43:48.506043  4889 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:43:48.506057  4889 net.cpp:150] Setting up relu1
I0211 09:43:48.506063  4889 net.cpp:157] Top shape: 43 500 (21500)
I0211 09:43:48.506068  4889 net.cpp:165] Memory required for data: 3471820
I0211 09:43:48.506073  4889 layer_factory.hpp:77] Creating layer ip2
I0211 09:43:48.506086  4889 net.cpp:106] Creating Layer ip2
I0211 09:43:48.506093  4889 net.cpp:454] ip2 <- ip1
I0211 09:43:48.506100  4889 net.cpp:411] ip2 -> ip2
I0211 09:43:48.506981  4889 net.cpp:150] Setting up ip2
I0211 09:43:48.506995  4889 net.cpp:157] Top shape: 43 10 (430)
I0211 09:43:48.507000  4889 net.cpp:165] Memory required for data: 3473540
I0211 09:43:48.507009  4889 layer_factory.hpp:77] Creating layer loss
I0211 09:43:48.507019  4889 net.cpp:106] Creating Layer loss
I0211 09:43:48.507025  4889 net.cpp:454] loss <- ip2
I0211 09:43:48.507031  4889 net.cpp:454] loss <- label
I0211 09:43:48.507042  4889 net.cpp:411] loss -> loss
I0211 09:43:48.507062  4889 layer_factory.hpp:77] Creating layer loss
I0211 09:43:48.507165  4889 net.cpp:150] Setting up loss
I0211 09:43:48.507176  4889 net.cpp:157] Top shape: (1)
I0211 09:43:48.507181  4889 net.cpp:160]     with loss weight 1
I0211 09:43:48.507212  4889 net.cpp:165] Memory required for data: 3473544
I0211 09:43:48.507220  4889 net.cpp:226] loss needs backward computation.
I0211 09:43:48.507226  4889 net.cpp:226] ip2 needs backward computation.
I0211 09:43:48.507232  4889 net.cpp:226] relu1 needs backward computation.
I0211 09:43:48.507236  4889 net.cpp:226] ip1 needs backward computation.
I0211 09:43:48.507241  4889 net.cpp:226] pool2 needs backward computation.
I0211 09:43:48.507246  4889 net.cpp:226] conv2 needs backward computation.
I0211 09:43:48.507254  4889 net.cpp:226] pool1 needs backward computation.
I0211 09:43:48.507261  4889 net.cpp:226] conv1 needs backward computation.
I0211 09:43:48.507266  4889 net.cpp:228] mnist does not need backward computation.
I0211 09:43:48.507272  4889 net.cpp:270] This network produces output loss
I0211 09:43:48.507287  4889 net.cpp:283] Network initialization done.
I0211 09:43:48.508558  4889 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0211 09:43:48.508604  4889 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0211 09:43:48.508796  4889 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:43:48.508899  4889 layer_factory.hpp:77] Creating layer mnist
I0211 09:43:48.509037  4889 net.cpp:106] Creating Layer mnist
I0211 09:43:48.509050  4889 net.cpp:411] mnist -> data
I0211 09:43:48.509063  4889 net.cpp:411] mnist -> label
I0211 09:43:48.514236  4895 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0211 09:43:48.514739  4889 data_layer.cpp:41] output data size: 100,1,28,28
I0211 09:43:48.516777  4889 net.cpp:150] Setting up mnist
I0211 09:43:48.516803  4889 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0211 09:43:48.516813  4889 net.cpp:157] Top shape: 100 (100)
I0211 09:43:48.516820  4889 net.cpp:165] Memory required for data: 314000
I0211 09:43:48.516829  4889 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0211 09:43:48.516849  4889 net.cpp:106] Creating Layer label_mnist_1_split
I0211 09:43:48.516860  4889 net.cpp:454] label_mnist_1_split <- label
I0211 09:43:48.516873  4889 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0211 09:43:48.516891  4889 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0211 09:43:48.517098  4889 net.cpp:150] Setting up label_mnist_1_split
I0211 09:43:48.517117  4889 net.cpp:157] Top shape: 100 (100)
I0211 09:43:48.517128  4889 net.cpp:157] Top shape: 100 (100)
I0211 09:43:48.517137  4889 net.cpp:165] Memory required for data: 314800
I0211 09:43:48.517146  4889 layer_factory.hpp:77] Creating layer conv1
I0211 09:43:48.517171  4889 net.cpp:106] Creating Layer conv1
I0211 09:43:48.517182  4889 net.cpp:454] conv1 <- data
I0211 09:43:48.517200  4889 net.cpp:411] conv1 -> conv1
I0211 09:43:48.517597  4889 net.cpp:150] Setting up conv1
I0211 09:43:48.517624  4889 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0211 09:43:48.517634  4889 net.cpp:165] Memory required for data: 4922800
I0211 09:43:48.517657  4889 layer_factory.hpp:77] Creating layer pool1
I0211 09:43:48.517701  4889 net.cpp:106] Creating Layer pool1
I0211 09:43:48.517712  4889 net.cpp:454] pool1 <- conv1
I0211 09:43:48.517729  4889 net.cpp:411] pool1 -> pool1
I0211 09:43:48.517984  4889 net.cpp:150] Setting up pool1
I0211 09:43:48.518002  4889 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0211 09:43:48.518012  4889 net.cpp:165] Memory required for data: 6074800
I0211 09:43:48.518019  4889 layer_factory.hpp:77] Creating layer conv2
I0211 09:43:48.518041  4889 net.cpp:106] Creating Layer conv2
I0211 09:43:48.518049  4889 net.cpp:454] conv2 <- pool1
I0211 09:43:48.518062  4889 net.cpp:411] conv2 -> conv2
I0211 09:43:48.518772  4889 net.cpp:150] Setting up conv2
I0211 09:43:48.518792  4889 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0211 09:43:48.518800  4889 net.cpp:165] Memory required for data: 7354800
I0211 09:43:48.518817  4889 layer_factory.hpp:77] Creating layer pool2
I0211 09:43:48.518836  4889 net.cpp:106] Creating Layer pool2
I0211 09:43:48.518846  4889 net.cpp:454] pool2 <- conv2
I0211 09:43:48.518863  4889 net.cpp:411] pool2 -> pool2
I0211 09:43:48.519104  4889 net.cpp:150] Setting up pool2
I0211 09:43:48.519121  4889 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0211 09:43:48.519130  4889 net.cpp:165] Memory required for data: 7674800
I0211 09:43:48.519139  4889 layer_factory.hpp:77] Creating layer ip1
I0211 09:43:48.519152  4889 net.cpp:106] Creating Layer ip1
I0211 09:43:48.519162  4889 net.cpp:454] ip1 <- pool2
I0211 09:43:48.519179  4889 net.cpp:411] ip1 -> ip1
I0211 09:43:48.526515  4889 net.cpp:150] Setting up ip1
I0211 09:43:48.526540  4889 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:43:48.526548  4889 net.cpp:165] Memory required for data: 7874800
I0211 09:43:48.526569  4889 layer_factory.hpp:77] Creating layer relu1
I0211 09:43:48.526592  4889 net.cpp:106] Creating Layer relu1
I0211 09:43:48.526602  4889 net.cpp:454] relu1 <- ip1
I0211 09:43:48.526613  4889 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:43:48.526635  4889 net.cpp:150] Setting up relu1
I0211 09:43:48.526648  4889 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:43:48.526654  4889 net.cpp:165] Memory required for data: 8074800
I0211 09:43:48.526664  4889 layer_factory.hpp:77] Creating layer ip2
I0211 09:43:48.526679  4889 net.cpp:106] Creating Layer ip2
I0211 09:43:48.526690  4889 net.cpp:454] ip2 <- ip1
I0211 09:43:48.526706  4889 net.cpp:411] ip2 -> ip2
I0211 09:43:48.526968  4889 net.cpp:150] Setting up ip2
I0211 09:43:48.526988  4889 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:43:48.526996  4889 net.cpp:165] Memory required for data: 8078800
I0211 09:43:48.527012  4889 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0211 09:43:48.527025  4889 net.cpp:106] Creating Layer ip2_ip2_0_split
I0211 09:43:48.527035  4889 net.cpp:454] ip2_ip2_0_split <- ip2
I0211 09:43:48.527050  4889 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0211 09:43:48.527065  4889 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0211 09:43:48.527138  4889 net.cpp:150] Setting up ip2_ip2_0_split
I0211 09:43:48.527155  4889 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:43:48.527166  4889 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:43:48.527175  4889 net.cpp:165] Memory required for data: 8086800
I0211 09:43:48.527185  4889 layer_factory.hpp:77] Creating layer accuracy
I0211 09:43:48.527209  4889 net.cpp:106] Creating Layer accuracy
I0211 09:43:48.527218  4889 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0211 09:43:48.527231  4889 net.cpp:454] accuracy <- label_mnist_1_split_0
I0211 09:43:48.527245  4889 net.cpp:411] accuracy -> accuracy
I0211 09:43:48.527269  4889 net.cpp:150] Setting up accuracy
I0211 09:43:48.527282  4889 net.cpp:157] Top shape: (1)
I0211 09:43:48.527292  4889 net.cpp:165] Memory required for data: 8086804
I0211 09:43:48.527302  4889 layer_factory.hpp:77] Creating layer loss
I0211 09:43:48.527318  4889 net.cpp:106] Creating Layer loss
I0211 09:43:48.527329  4889 net.cpp:454] loss <- ip2_ip2_0_split_1
I0211 09:43:48.527341  4889 net.cpp:454] loss <- label_mnist_1_split_1
I0211 09:43:48.527354  4889 net.cpp:411] loss -> loss
I0211 09:43:48.527401  4889 layer_factory.hpp:77] Creating layer loss
I0211 09:43:48.527559  4889 net.cpp:150] Setting up loss
I0211 09:43:48.527576  4889 net.cpp:157] Top shape: (1)
I0211 09:43:48.527585  4889 net.cpp:160]     with loss weight 1
I0211 09:43:48.527601  4889 net.cpp:165] Memory required for data: 8086808
I0211 09:43:48.527611  4889 net.cpp:226] loss needs backward computation.
I0211 09:43:48.527637  4889 net.cpp:228] accuracy does not need backward computation.
I0211 09:43:48.527649  4889 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0211 09:43:48.527657  4889 net.cpp:226] ip2 needs backward computation.
I0211 09:43:48.527665  4889 net.cpp:226] relu1 needs backward computation.
I0211 09:43:48.527673  4889 net.cpp:226] ip1 needs backward computation.
I0211 09:43:48.527680  4889 net.cpp:226] pool2 needs backward computation.
I0211 09:43:48.527688  4889 net.cpp:226] conv2 needs backward computation.
I0211 09:43:48.527695  4889 net.cpp:226] pool1 needs backward computation.
I0211 09:43:48.527703  4889 net.cpp:226] conv1 needs backward computation.
I0211 09:43:48.527711  4889 net.cpp:228] label_mnist_1_split does not need backward computation.
I0211 09:43:48.527720  4889 net.cpp:228] mnist does not need backward computation.
I0211 09:43:48.527735  4889 net.cpp:270] This network produces output accuracy
I0211 09:43:48.527743  4889 net.cpp:270] This network produces output loss
I0211 09:43:48.527766  4889 net.cpp:283] Network initialization done.
I0211 09:43:48.527835  4889 solver.cpp:60] Solver scaffolding done.
I0211 09:43:48.540940  4889 parallel.cpp:405] GPUs pairs 0:1, 0:2
I0211 09:43:48.750113  4889 data_layer.cpp:41] output data size: 43,1,28,28
I0211 09:43:49.097237  4889 data_layer.cpp:41] output data size: 43,1,28,28
I0211 09:43:49.240084  4889 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0211 09:43:49.241453  4889 solver.cpp:311] Solving LeNet
I0211 09:43:49.241479  4889 solver.cpp:312] Learning Rate Policy: inv
I0211 09:43:49.242080  4889 solver.cpp:364] Iteration 0, Testing net (#0)
I0211 09:43:50.322448  4889 solver.cpp:432]     Test net output #0: accuracy = 0.0806
I0211 09:43:50.322504  4889 solver.cpp:432]     Test net output #1: loss = 2.3513 (* 1 = 2.3513 loss)
I0211 09:43:50.335832  4889 solver.cpp:250] Iteration 0, loss = 2.38207 Time spent communicating 0.371904
I0211 09:43:50.335865  4889 solver.cpp:267]     Train net output #0: loss = 2.38207 (* 1 = 2.38207 loss)
I0211 09:43:50.342367  4889 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0211 09:43:51.542948  4889 solver.cpp:250] Iteration 100, loss = 0.578695 Time spent communicating 69.7958
I0211 09:43:51.542982  4889 solver.cpp:267]     Train net output #0: loss = 0.578695 (* 1 = 0.578695 loss)
I0211 09:43:51.545727  4889 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0211 09:43:52.739213  4889 solver.cpp:250] Iteration 200, loss = 0.263184 Time spent communicating 55.7161
I0211 09:43:52.739253  4889 solver.cpp:267]     Train net output #0: loss = 0.263184 (* 1 = 0.263184 loss)
I0211 09:43:52.742012  4889 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0211 09:43:53.933204  4889 solver.cpp:250] Iteration 300, loss = 0.245491 Time spent communicating 53.0676
I0211 09:43:53.933240  4889 solver.cpp:267]     Train net output #0: loss = 0.245491 (* 1 = 0.245491 loss)
I0211 09:43:53.935801  4889 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0211 09:43:55.109531  4889 solver.cpp:250] Iteration 400, loss = 0.0439912 Time spent communicating 62.2988
I0211 09:43:55.109570  4889 solver.cpp:267]     Train net output #0: loss = 0.0439912 (* 1 = 0.0439912 loss)
I0211 09:43:55.112133  4889 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0211 09:43:56.268158  4889 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0211 09:43:56.303835  4889 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0211 09:43:56.335114  4889 solver.cpp:344] Iteration 500, loss = 0.0178277
I0211 09:43:56.335140  4889 solver.cpp:364] Iteration 500, Testing net (#0)
I0211 09:43:57.288611  4889 solver.cpp:432]     Test net output #0: accuracy = 0.979
I0211 09:43:57.288641  4889 solver.cpp:432]     Test net output #1: loss = 0.0682661 (* 1 = 0.0682661 loss)
I0211 09:43:57.288650  4889 solver.cpp:349] Optimization Done.
I0211 09:43:57.288694  4889 parallel.cpp:256] IN DESTRUCTOR AND I'M 1
I0211 09:43:57.304060  4889 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0211 09:43:57.317978  4889 parallel.cpp:256] IN DESTRUCTOR AND I'M 0
I0211 09:43:57.318421  4889 caffe.cpp:215] Optimization Done.
