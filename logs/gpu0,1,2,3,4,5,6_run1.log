I0211 09:37:09.734323  4486 caffe.cpp:184] Using GPUs 0, 1, 2, 3, 4, 5, 6
I0211 09:37:14.447834  4486 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "examples/mnist/lenet_train_test.prototxt"
I0211 09:37:14.459692  4486 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0211 09:37:14.461633  4486 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0211 09:37:14.461659  4486 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0211 09:37:14.461787  4486 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 18
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:37:14.461870  4486 layer_factory.hpp:77] Creating layer mnist
I0211 09:37:14.463065  4486 net.cpp:106] Creating Layer mnist
I0211 09:37:14.463102  4486 net.cpp:411] mnist -> data
I0211 09:37:14.463232  4486 net.cpp:411] mnist -> label
I0211 09:37:14.469712  4490 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0211 09:37:14.490305  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:14.491384  4486 net.cpp:150] Setting up mnist
I0211 09:37:14.491405  4486 net.cpp:157] Top shape: 18 1 28 28 (14112)
I0211 09:37:14.491417  4486 net.cpp:157] Top shape: 18 (18)
I0211 09:37:14.491422  4486 net.cpp:165] Memory required for data: 56520
I0211 09:37:14.491436  4486 layer_factory.hpp:77] Creating layer conv1
I0211 09:37:14.491466  4486 net.cpp:106] Creating Layer conv1
I0211 09:37:14.491477  4486 net.cpp:454] conv1 <- data
I0211 09:37:14.491498  4486 net.cpp:411] conv1 -> conv1
I0211 09:37:14.492766  4486 net.cpp:150] Setting up conv1
I0211 09:37:14.492781  4486 net.cpp:157] Top shape: 18 20 24 24 (207360)
I0211 09:37:14.492786  4486 net.cpp:165] Memory required for data: 885960
I0211 09:37:14.492802  4486 layer_factory.hpp:77] Creating layer pool1
I0211 09:37:14.492817  4486 net.cpp:106] Creating Layer pool1
I0211 09:37:14.492825  4486 net.cpp:454] pool1 <- conv1
I0211 09:37:14.492833  4486 net.cpp:411] pool1 -> pool1
I0211 09:37:14.493047  4486 net.cpp:150] Setting up pool1
I0211 09:37:14.493060  4486 net.cpp:157] Top shape: 18 20 12 12 (51840)
I0211 09:37:14.493067  4486 net.cpp:165] Memory required for data: 1093320
I0211 09:37:14.493072  4486 layer_factory.hpp:77] Creating layer conv2
I0211 09:37:14.493087  4486 net.cpp:106] Creating Layer conv2
I0211 09:37:14.493093  4486 net.cpp:454] conv2 <- pool1
I0211 09:37:14.493103  4486 net.cpp:411] conv2 -> conv2
I0211 09:37:14.494480  4486 net.cpp:150] Setting up conv2
I0211 09:37:14.494495  4486 net.cpp:157] Top shape: 18 50 8 8 (57600)
I0211 09:37:14.494500  4486 net.cpp:165] Memory required for data: 1323720
I0211 09:37:14.494510  4486 layer_factory.hpp:77] Creating layer pool2
I0211 09:37:14.494520  4486 net.cpp:106] Creating Layer pool2
I0211 09:37:14.494526  4486 net.cpp:454] pool2 <- conv2
I0211 09:37:14.494536  4486 net.cpp:411] pool2 -> pool2
I0211 09:37:14.494688  4486 net.cpp:150] Setting up pool2
I0211 09:37:14.494699  4486 net.cpp:157] Top shape: 18 50 4 4 (14400)
I0211 09:37:14.494702  4486 net.cpp:165] Memory required for data: 1381320
I0211 09:37:14.494707  4486 layer_factory.hpp:77] Creating layer ip1
I0211 09:37:14.494724  4486 net.cpp:106] Creating Layer ip1
I0211 09:37:14.494730  4486 net.cpp:454] ip1 <- pool2
I0211 09:37:14.494738  4486 net.cpp:411] ip1 -> ip1
I0211 09:37:14.496080  4491 blocking_queue.cpp:50] Waiting for data
I0211 09:37:14.499248  4486 net.cpp:150] Setting up ip1
I0211 09:37:14.499264  4486 net.cpp:157] Top shape: 18 500 (9000)
I0211 09:37:14.499269  4486 net.cpp:165] Memory required for data: 1417320
I0211 09:37:14.499280  4486 layer_factory.hpp:77] Creating layer relu1
I0211 09:37:14.499289  4486 net.cpp:106] Creating Layer relu1
I0211 09:37:14.499294  4486 net.cpp:454] relu1 <- ip1
I0211 09:37:14.499305  4486 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:37:14.499317  4486 net.cpp:150] Setting up relu1
I0211 09:37:14.499325  4486 net.cpp:157] Top shape: 18 500 (9000)
I0211 09:37:14.499330  4486 net.cpp:165] Memory required for data: 1453320
I0211 09:37:14.499336  4486 layer_factory.hpp:77] Creating layer ip2
I0211 09:37:14.499346  4486 net.cpp:106] Creating Layer ip2
I0211 09:37:14.499351  4486 net.cpp:454] ip2 <- ip1
I0211 09:37:14.499361  4486 net.cpp:411] ip2 -> ip2
I0211 09:37:14.499512  4486 net.cpp:150] Setting up ip2
I0211 09:37:14.499523  4486 net.cpp:157] Top shape: 18 10 (180)
I0211 09:37:14.499528  4486 net.cpp:165] Memory required for data: 1454040
I0211 09:37:14.499538  4486 layer_factory.hpp:77] Creating layer loss
I0211 09:37:14.499552  4486 net.cpp:106] Creating Layer loss
I0211 09:37:14.499557  4486 net.cpp:454] loss <- ip2
I0211 09:37:14.499564  4486 net.cpp:454] loss <- label
I0211 09:37:14.499575  4486 net.cpp:411] loss -> loss
I0211 09:37:14.499593  4486 layer_factory.hpp:77] Creating layer loss
I0211 09:37:14.499688  4486 net.cpp:150] Setting up loss
I0211 09:37:14.499698  4486 net.cpp:157] Top shape: (1)
I0211 09:37:14.499704  4486 net.cpp:160]     with loss weight 1
I0211 09:37:14.499732  4486 net.cpp:165] Memory required for data: 1454044
I0211 09:37:14.499739  4486 net.cpp:226] loss needs backward computation.
I0211 09:37:14.499747  4486 net.cpp:226] ip2 needs backward computation.
I0211 09:37:14.499752  4486 net.cpp:226] relu1 needs backward computation.
I0211 09:37:14.499757  4486 net.cpp:226] ip1 needs backward computation.
I0211 09:37:14.499761  4486 net.cpp:226] pool2 needs backward computation.
I0211 09:37:14.499766  4486 net.cpp:226] conv2 needs backward computation.
I0211 09:37:14.499775  4486 net.cpp:226] pool1 needs backward computation.
I0211 09:37:14.499781  4486 net.cpp:226] conv1 needs backward computation.
I0211 09:37:14.499788  4486 net.cpp:228] mnist does not need backward computation.
I0211 09:37:14.499793  4486 net.cpp:270] This network produces output loss
I0211 09:37:14.499806  4486 net.cpp:283] Network initialization done.
I0211 09:37:14.501044  4486 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0211 09:37:14.501098  4486 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0211 09:37:14.501267  4486 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:37:14.501365  4486 layer_factory.hpp:77] Creating layer mnist
I0211 09:37:14.501502  4486 net.cpp:106] Creating Layer mnist
I0211 09:37:14.501518  4486 net.cpp:411] mnist -> data
I0211 09:37:14.501530  4486 net.cpp:411] mnist -> label
I0211 09:37:14.507448  4492 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0211 09:37:14.507814  4486 data_layer.cpp:41] output data size: 100,1,28,28
I0211 09:37:14.509920  4486 net.cpp:150] Setting up mnist
I0211 09:37:14.509943  4486 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0211 09:37:14.509951  4486 net.cpp:157] Top shape: 100 (100)
I0211 09:37:14.509958  4486 net.cpp:165] Memory required for data: 314000
I0211 09:37:14.509964  4486 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0211 09:37:14.509975  4486 net.cpp:106] Creating Layer label_mnist_1_split
I0211 09:37:14.509981  4486 net.cpp:454] label_mnist_1_split <- label
I0211 09:37:14.509991  4486 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0211 09:37:14.510007  4486 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0211 09:37:14.510071  4486 net.cpp:150] Setting up label_mnist_1_split
I0211 09:37:14.510083  4486 net.cpp:157] Top shape: 100 (100)
I0211 09:37:14.510092  4486 net.cpp:157] Top shape: 100 (100)
I0211 09:37:14.510097  4486 net.cpp:165] Memory required for data: 314800
I0211 09:37:14.510104  4486 layer_factory.hpp:77] Creating layer conv1
I0211 09:37:14.510123  4486 net.cpp:106] Creating Layer conv1
I0211 09:37:14.510130  4486 net.cpp:454] conv1 <- data
I0211 09:37:14.510144  4486 net.cpp:411] conv1 -> conv1
I0211 09:37:14.510655  4486 net.cpp:150] Setting up conv1
I0211 09:37:14.510670  4486 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0211 09:37:14.510678  4486 net.cpp:165] Memory required for data: 4922800
I0211 09:37:14.510692  4486 layer_factory.hpp:77] Creating layer pool1
I0211 09:37:14.510710  4486 net.cpp:106] Creating Layer pool1
I0211 09:37:14.510735  4486 net.cpp:454] pool1 <- conv1
I0211 09:37:14.510746  4486 net.cpp:411] pool1 -> pool1
I0211 09:37:14.510937  4486 net.cpp:150] Setting up pool1
I0211 09:37:14.510951  4486 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0211 09:37:14.510958  4486 net.cpp:165] Memory required for data: 6074800
I0211 09:37:14.510967  4486 layer_factory.hpp:77] Creating layer conv2
I0211 09:37:14.510987  4486 net.cpp:106] Creating Layer conv2
I0211 09:37:14.510993  4486 net.cpp:454] conv2 <- pool1
I0211 09:37:14.511003  4486 net.cpp:411] conv2 -> conv2
I0211 09:37:14.511450  4486 net.cpp:150] Setting up conv2
I0211 09:37:14.511466  4486 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0211 09:37:14.511471  4486 net.cpp:165] Memory required for data: 7354800
I0211 09:37:14.511482  4486 layer_factory.hpp:77] Creating layer pool2
I0211 09:37:14.511492  4486 net.cpp:106] Creating Layer pool2
I0211 09:37:14.511497  4486 net.cpp:454] pool2 <- conv2
I0211 09:37:14.511505  4486 net.cpp:411] pool2 -> pool2
I0211 09:37:14.511654  4486 net.cpp:150] Setting up pool2
I0211 09:37:14.511665  4486 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0211 09:37:14.511670  4486 net.cpp:165] Memory required for data: 7674800
I0211 09:37:14.511677  4486 layer_factory.hpp:77] Creating layer ip1
I0211 09:37:14.511688  4486 net.cpp:106] Creating Layer ip1
I0211 09:37:14.511695  4486 net.cpp:454] ip1 <- pool2
I0211 09:37:14.511706  4486 net.cpp:411] ip1 -> ip1
I0211 09:37:14.518992  4486 net.cpp:150] Setting up ip1
I0211 09:37:14.519019  4486 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:37:14.519027  4486 net.cpp:165] Memory required for data: 7874800
I0211 09:37:14.519048  4486 layer_factory.hpp:77] Creating layer relu1
I0211 09:37:14.519067  4486 net.cpp:106] Creating Layer relu1
I0211 09:37:14.519078  4486 net.cpp:454] relu1 <- ip1
I0211 09:37:14.519098  4486 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:37:14.519116  4486 net.cpp:150] Setting up relu1
I0211 09:37:14.519129  4486 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:37:14.519140  4486 net.cpp:165] Memory required for data: 8074800
I0211 09:37:14.519150  4486 layer_factory.hpp:77] Creating layer ip2
I0211 09:37:14.519168  4486 net.cpp:106] Creating Layer ip2
I0211 09:37:14.519179  4486 net.cpp:454] ip2 <- ip1
I0211 09:37:14.519198  4486 net.cpp:411] ip2 -> ip2
I0211 09:37:14.519480  4486 net.cpp:150] Setting up ip2
I0211 09:37:14.519501  4486 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:37:14.519511  4486 net.cpp:165] Memory required for data: 8078800
I0211 09:37:14.519528  4486 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0211 09:37:14.519543  4486 net.cpp:106] Creating Layer ip2_ip2_0_split
I0211 09:37:14.519553  4486 net.cpp:454] ip2_ip2_0_split <- ip2
I0211 09:37:14.519567  4486 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0211 09:37:14.519585  4486 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0211 09:37:14.519661  4486 net.cpp:150] Setting up ip2_ip2_0_split
I0211 09:37:14.519671  4486 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:37:14.519678  4486 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:37:14.519683  4486 net.cpp:165] Memory required for data: 8086800
I0211 09:37:14.519688  4486 layer_factory.hpp:77] Creating layer accuracy
I0211 09:37:14.519703  4486 net.cpp:106] Creating Layer accuracy
I0211 09:37:14.519711  4486 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0211 09:37:14.519716  4486 net.cpp:454] accuracy <- label_mnist_1_split_0
I0211 09:37:14.519723  4486 net.cpp:411] accuracy -> accuracy
I0211 09:37:14.519736  4486 net.cpp:150] Setting up accuracy
I0211 09:37:14.519743  4486 net.cpp:157] Top shape: (1)
I0211 09:37:14.519749  4486 net.cpp:165] Memory required for data: 8086804
I0211 09:37:14.519755  4486 layer_factory.hpp:77] Creating layer loss
I0211 09:37:14.519765  4486 net.cpp:106] Creating Layer loss
I0211 09:37:14.519772  4486 net.cpp:454] loss <- ip2_ip2_0_split_1
I0211 09:37:14.519778  4486 net.cpp:454] loss <- label_mnist_1_split_1
I0211 09:37:14.519784  4486 net.cpp:411] loss -> loss
I0211 09:37:14.519810  4486 layer_factory.hpp:77] Creating layer loss
I0211 09:37:14.519963  4486 net.cpp:150] Setting up loss
I0211 09:37:14.519984  4486 net.cpp:157] Top shape: (1)
I0211 09:37:14.519994  4486 net.cpp:160]     with loss weight 1
I0211 09:37:14.520009  4486 net.cpp:165] Memory required for data: 8086808
I0211 09:37:14.520021  4486 net.cpp:226] loss needs backward computation.
I0211 09:37:14.520033  4486 net.cpp:228] accuracy does not need backward computation.
I0211 09:37:14.520045  4486 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0211 09:37:14.520054  4486 net.cpp:226] ip2 needs backward computation.
I0211 09:37:14.520062  4486 net.cpp:226] relu1 needs backward computation.
I0211 09:37:14.520071  4486 net.cpp:226] ip1 needs backward computation.
I0211 09:37:14.520078  4486 net.cpp:226] pool2 needs backward computation.
I0211 09:37:14.520087  4486 net.cpp:226] conv2 needs backward computation.
I0211 09:37:14.520095  4486 net.cpp:226] pool1 needs backward computation.
I0211 09:37:14.520103  4486 net.cpp:226] conv1 needs backward computation.
I0211 09:37:14.520112  4486 net.cpp:228] label_mnist_1_split does not need backward computation.
I0211 09:37:14.520123  4486 net.cpp:228] mnist does not need backward computation.
I0211 09:37:14.520130  4486 net.cpp:270] This network produces output accuracy
I0211 09:37:14.520139  4486 net.cpp:270] This network produces output loss
I0211 09:37:14.520170  4486 net.cpp:283] Network initialization done.
I0211 09:37:14.520244  4486 solver.cpp:60] Solver scaffolding done.
I0211 09:37:14.636904  4486 parallel.cpp:405] GPUs pairs 0:1, 2:3, 4:5, 0:2, 4:6, 0:4
I0211 09:37:14.853489  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:15.194800  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:15.594735  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:15.861292  4486 parallel.cpp:234] GPU 4 does not have p2p access to GPU 0
I0211 09:37:16.124655  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:16.586987  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:17.115164  4486 data_layer.cpp:41] output data size: 18,1,28,28
I0211 09:37:17.393517  4486 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0211 09:37:17.395356  4486 solver.cpp:311] Solving LeNet
I0211 09:37:17.395370  4486 solver.cpp:312] Learning Rate Policy: inv
I0211 09:37:17.395638  4486 solver.cpp:364] Iteration 0, Testing net (#0)
I0211 09:37:18.430698  4486 solver.cpp:432]     Test net output #0: accuracy = 0.0476
I0211 09:37:18.430753  4486 solver.cpp:432]     Test net output #1: loss = 2.4017 (* 1 = 2.4017 loss)
I0211 09:37:18.446908  4486 solver.cpp:250] Iteration 0, loss = 2.36102 Time spent communicating 0.63952
I0211 09:37:18.446938  4486 solver.cpp:267]     Train net output #0: loss = 2.36102 (* 1 = 2.36102 loss)
I0211 09:37:18.455116  4486 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0211 09:37:19.459712  4486 solver.cpp:250] Iteration 100, loss = 0.389938 Time spent communicating 155.927
I0211 09:37:19.459753  4486 solver.cpp:267]     Train net output #0: loss = 0.389938 (* 1 = 0.389938 loss)
I0211 09:37:19.460603  4486 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0211 09:37:20.452288  4486 solver.cpp:250] Iteration 200, loss = 0.0565616 Time spent communicating 147.835
I0211 09:37:20.452327  4486 solver.cpp:267]     Train net output #0: loss = 0.0565616 (* 1 = 0.0565616 loss)
I0211 09:37:20.454308  4486 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0211 09:37:21.457010  4486 solver.cpp:250] Iteration 300, loss = 0.0773899 Time spent communicating 151.273
I0211 09:37:21.457062  4486 solver.cpp:267]     Train net output #0: loss = 0.0773898 (* 1 = 0.0773898 loss)
I0211 09:37:21.457741  4486 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0211 09:37:22.459797  4486 solver.cpp:250] Iteration 400, loss = 0.217102 Time spent communicating 159.912
I0211 09:37:22.459833  4486 solver.cpp:267]     Train net output #0: loss = 0.217102 (* 1 = 0.217102 loss)
I0211 09:37:22.461822  4486 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0211 09:37:23.450120  4486 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0211 09:37:23.485610  4486 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0211 09:37:23.512053  4486 solver.cpp:344] Iteration 500, loss = 0.0443709
I0211 09:37:23.512079  4486 solver.cpp:364] Iteration 500, Testing net (#0)
I0211 09:37:24.465227  4486 solver.cpp:432]     Test net output #0: accuracy = 0.9772
I0211 09:37:24.465258  4486 solver.cpp:432]     Test net output #1: loss = 0.0762427 (* 1 = 0.0762427 loss)
I0211 09:37:24.465265  4486 solver.cpp:349] Optimization Done.
I0211 09:37:24.465378  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 1
I0211 09:37:24.490355  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0211 09:37:24.512820  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0211 09:37:24.535192  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0211 09:37:24.557945  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0211 09:37:24.579649  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0211 09:37:24.599684  4486 parallel.cpp:256] IN DESTRUCTOR AND I'M 0
I0211 09:37:24.600136  4486 caffe.cpp:215] Optimization Done.
