I0211 09:45:37.562757  4949 caffe.cpp:184] Using GPUs 0, 1
I0211 09:45:42.304421  4949 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "examples/mnist/lenet_train_test.prototxt"
I0211 09:45:42.316445  4949 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0211 09:45:42.317551  4949 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0211 09:45:42.317605  4949 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0211 09:45:42.317885  4949 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:45:42.318055  4949 layer_factory.hpp:77] Creating layer mnist
I0211 09:45:42.319535  4949 net.cpp:106] Creating Layer mnist
I0211 09:45:42.319571  4949 net.cpp:411] mnist -> data
I0211 09:45:42.319703  4949 net.cpp:411] mnist -> label
I0211 09:45:42.325091  4954 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0211 09:45:42.348050  4949 data_layer.cpp:41] output data size: 64,1,28,28
I0211 09:45:42.349324  4949 net.cpp:150] Setting up mnist
I0211 09:45:42.349346  4949 net.cpp:157] Top shape: 64 1 28 28 (50176)
I0211 09:45:42.349354  4949 net.cpp:157] Top shape: 64 (64)
I0211 09:45:42.349359  4949 net.cpp:165] Memory required for data: 200960
I0211 09:45:42.349370  4949 layer_factory.hpp:77] Creating layer conv1
I0211 09:45:42.349402  4949 net.cpp:106] Creating Layer conv1
I0211 09:45:42.349414  4949 net.cpp:454] conv1 <- data
I0211 09:45:42.349434  4949 net.cpp:411] conv1 -> conv1
I0211 09:45:42.350689  4949 net.cpp:150] Setting up conv1
I0211 09:45:42.350705  4949 net.cpp:157] Top shape: 64 20 24 24 (737280)
I0211 09:45:42.350710  4949 net.cpp:165] Memory required for data: 3150080
I0211 09:45:42.350728  4949 layer_factory.hpp:77] Creating layer pool1
I0211 09:45:42.350745  4949 net.cpp:106] Creating Layer pool1
I0211 09:45:42.350752  4949 net.cpp:454] pool1 <- conv1
I0211 09:45:42.350761  4949 net.cpp:411] pool1 -> pool1
I0211 09:45:42.350965  4949 net.cpp:150] Setting up pool1
I0211 09:45:42.350980  4949 net.cpp:157] Top shape: 64 20 12 12 (184320)
I0211 09:45:42.350986  4949 net.cpp:165] Memory required for data: 3887360
I0211 09:45:42.350991  4949 layer_factory.hpp:77] Creating layer conv2
I0211 09:45:42.351004  4949 net.cpp:106] Creating Layer conv2
I0211 09:45:42.351011  4949 net.cpp:454] conv2 <- pool1
I0211 09:45:42.351022  4949 net.cpp:411] conv2 -> conv2
I0211 09:45:42.351439  4949 net.cpp:150] Setting up conv2
I0211 09:45:42.351451  4949 net.cpp:157] Top shape: 64 50 8 8 (204800)
I0211 09:45:42.351457  4949 net.cpp:165] Memory required for data: 4706560
I0211 09:45:42.351469  4949 layer_factory.hpp:77] Creating layer pool2
I0211 09:45:42.351482  4949 net.cpp:106] Creating Layer pool2
I0211 09:45:42.351490  4949 net.cpp:454] pool2 <- conv2
I0211 09:45:42.351497  4949 net.cpp:411] pool2 -> pool2
I0211 09:45:42.351652  4949 net.cpp:150] Setting up pool2
I0211 09:45:42.351666  4949 net.cpp:157] Top shape: 64 50 4 4 (51200)
I0211 09:45:42.351672  4949 net.cpp:165] Memory required for data: 4911360
I0211 09:45:42.351677  4949 layer_factory.hpp:77] Creating layer ip1
I0211 09:45:42.351692  4949 net.cpp:106] Creating Layer ip1
I0211 09:45:42.351697  4949 net.cpp:454] ip1 <- pool2
I0211 09:45:42.351706  4949 net.cpp:411] ip1 -> ip1
I0211 09:45:42.354058  4955 blocking_queue.cpp:50] Waiting for data
I0211 09:45:42.356214  4949 net.cpp:150] Setting up ip1
I0211 09:45:42.356230  4949 net.cpp:157] Top shape: 64 500 (32000)
I0211 09:45:42.356235  4949 net.cpp:165] Memory required for data: 5039360
I0211 09:45:42.356246  4949 layer_factory.hpp:77] Creating layer relu1
I0211 09:45:42.356258  4949 net.cpp:106] Creating Layer relu1
I0211 09:45:42.356263  4949 net.cpp:454] relu1 <- ip1
I0211 09:45:42.356271  4949 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:45:42.356283  4949 net.cpp:150] Setting up relu1
I0211 09:45:42.356290  4949 net.cpp:157] Top shape: 64 500 (32000)
I0211 09:45:42.356295  4949 net.cpp:165] Memory required for data: 5167360
I0211 09:45:42.356300  4949 layer_factory.hpp:77] Creating layer ip2
I0211 09:45:42.356310  4949 net.cpp:106] Creating Layer ip2
I0211 09:45:42.356317  4949 net.cpp:454] ip2 <- ip1
I0211 09:45:42.356326  4949 net.cpp:411] ip2 -> ip2
I0211 09:45:42.357203  4949 net.cpp:150] Setting up ip2
I0211 09:45:42.357216  4949 net.cpp:157] Top shape: 64 10 (640)
I0211 09:45:42.357221  4949 net.cpp:165] Memory required for data: 5169920
I0211 09:45:42.357229  4949 layer_factory.hpp:77] Creating layer loss
I0211 09:45:42.357239  4949 net.cpp:106] Creating Layer loss
I0211 09:45:42.357245  4949 net.cpp:454] loss <- ip2
I0211 09:45:42.357252  4949 net.cpp:454] loss <- label
I0211 09:45:42.357260  4949 net.cpp:411] loss -> loss
I0211 09:45:42.357282  4949 layer_factory.hpp:77] Creating layer loss
I0211 09:45:42.357381  4949 net.cpp:150] Setting up loss
I0211 09:45:42.357393  4949 net.cpp:157] Top shape: (1)
I0211 09:45:42.357398  4949 net.cpp:160]     with loss weight 1
I0211 09:45:42.357426  4949 net.cpp:165] Memory required for data: 5169924
I0211 09:45:42.357434  4949 net.cpp:226] loss needs backward computation.
I0211 09:45:42.357440  4949 net.cpp:226] ip2 needs backward computation.
I0211 09:45:42.357445  4949 net.cpp:226] relu1 needs backward computation.
I0211 09:45:42.357450  4949 net.cpp:226] ip1 needs backward computation.
I0211 09:45:42.357455  4949 net.cpp:226] pool2 needs backward computation.
I0211 09:45:42.357460  4949 net.cpp:226] conv2 needs backward computation.
I0211 09:45:42.357468  4949 net.cpp:226] pool1 needs backward computation.
I0211 09:45:42.357475  4949 net.cpp:226] conv1 needs backward computation.
I0211 09:45:42.357481  4949 net.cpp:228] mnist does not need backward computation.
I0211 09:45:42.357486  4949 net.cpp:270] This network produces output loss
I0211 09:45:42.357503  4949 net.cpp:283] Network initialization done.
I0211 09:45:42.358670  4949 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0211 09:45:42.358714  4949 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0211 09:45:42.358885  4949 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0211 09:45:42.358985  4949 layer_factory.hpp:77] Creating layer mnist
I0211 09:45:42.359609  4949 net.cpp:106] Creating Layer mnist
I0211 09:45:42.359630  4949 net.cpp:411] mnist -> data
I0211 09:45:42.359643  4949 net.cpp:411] mnist -> label
I0211 09:45:42.364737  4956 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0211 09:45:42.365151  4949 data_layer.cpp:41] output data size: 100,1,28,28
I0211 09:45:42.367014  4949 net.cpp:150] Setting up mnist
I0211 09:45:42.367040  4949 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0211 09:45:42.367053  4949 net.cpp:157] Top shape: 100 (100)
I0211 09:45:42.367059  4949 net.cpp:165] Memory required for data: 314000
I0211 09:45:42.367068  4949 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0211 09:45:42.367085  4949 net.cpp:106] Creating Layer label_mnist_1_split
I0211 09:45:42.367094  4949 net.cpp:454] label_mnist_1_split <- label
I0211 09:45:42.367103  4949 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0211 09:45:42.367121  4949 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0211 09:45:42.367261  4949 net.cpp:150] Setting up label_mnist_1_split
I0211 09:45:42.367279  4949 net.cpp:157] Top shape: 100 (100)
I0211 09:45:42.367290  4949 net.cpp:157] Top shape: 100 (100)
I0211 09:45:42.367296  4949 net.cpp:165] Memory required for data: 314800
I0211 09:45:42.367305  4949 layer_factory.hpp:77] Creating layer conv1
I0211 09:45:42.367329  4949 net.cpp:106] Creating Layer conv1
I0211 09:45:42.367339  4949 net.cpp:454] conv1 <- data
I0211 09:45:42.367357  4949 net.cpp:411] conv1 -> conv1
I0211 09:45:42.367715  4949 net.cpp:150] Setting up conv1
I0211 09:45:42.367734  4949 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0211 09:45:42.367741  4949 net.cpp:165] Memory required for data: 4922800
I0211 09:45:42.367760  4949 layer_factory.hpp:77] Creating layer pool1
I0211 09:45:42.367796  4949 net.cpp:106] Creating Layer pool1
I0211 09:45:42.367806  4949 net.cpp:454] pool1 <- conv1
I0211 09:45:42.367820  4949 net.cpp:411] pool1 -> pool1
I0211 09:45:42.368037  4949 net.cpp:150] Setting up pool1
I0211 09:45:42.368054  4949 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0211 09:45:42.368062  4949 net.cpp:165] Memory required for data: 6074800
I0211 09:45:42.368070  4949 layer_factory.hpp:77] Creating layer conv2
I0211 09:45:42.368093  4949 net.cpp:106] Creating Layer conv2
I0211 09:45:42.368101  4949 net.cpp:454] conv2 <- pool1
I0211 09:45:42.368118  4949 net.cpp:411] conv2 -> conv2
I0211 09:45:42.368749  4949 net.cpp:150] Setting up conv2
I0211 09:45:42.368767  4949 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0211 09:45:42.368777  4949 net.cpp:165] Memory required for data: 7354800
I0211 09:45:42.368791  4949 layer_factory.hpp:77] Creating layer pool2
I0211 09:45:42.368803  4949 net.cpp:106] Creating Layer pool2
I0211 09:45:42.368810  4949 net.cpp:454] pool2 <- conv2
I0211 09:45:42.368824  4949 net.cpp:411] pool2 -> pool2
I0211 09:45:42.369032  4949 net.cpp:150] Setting up pool2
I0211 09:45:42.369048  4949 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0211 09:45:42.369055  4949 net.cpp:165] Memory required for data: 7674800
I0211 09:45:42.369061  4949 layer_factory.hpp:77] Creating layer ip1
I0211 09:45:42.369078  4949 net.cpp:106] Creating Layer ip1
I0211 09:45:42.369087  4949 net.cpp:454] ip1 <- pool2
I0211 09:45:42.369101  4949 net.cpp:411] ip1 -> ip1
I0211 09:45:42.375814  4949 net.cpp:150] Setting up ip1
I0211 09:45:42.375838  4949 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:45:42.375845  4949 net.cpp:165] Memory required for data: 7874800
I0211 09:45:42.375865  4949 layer_factory.hpp:77] Creating layer relu1
I0211 09:45:42.375885  4949 net.cpp:106] Creating Layer relu1
I0211 09:45:42.375895  4949 net.cpp:454] relu1 <- ip1
I0211 09:45:42.375908  4949 net.cpp:397] relu1 -> ip1 (in-place)
I0211 09:45:42.375924  4949 net.cpp:150] Setting up relu1
I0211 09:45:42.375936  4949 net.cpp:157] Top shape: 100 500 (50000)
I0211 09:45:42.375944  4949 net.cpp:165] Memory required for data: 8074800
I0211 09:45:42.375953  4949 layer_factory.hpp:77] Creating layer ip2
I0211 09:45:42.375974  4949 net.cpp:106] Creating Layer ip2
I0211 09:45:42.375984  4949 net.cpp:454] ip2 <- ip1
I0211 09:45:42.375998  4949 net.cpp:411] ip2 -> ip2
I0211 09:45:42.376245  4949 net.cpp:150] Setting up ip2
I0211 09:45:42.376265  4949 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:45:42.376273  4949 net.cpp:165] Memory required for data: 8078800
I0211 09:45:42.376287  4949 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0211 09:45:42.376304  4949 net.cpp:106] Creating Layer ip2_ip2_0_split
I0211 09:45:42.376314  4949 net.cpp:454] ip2_ip2_0_split <- ip2
I0211 09:45:42.376327  4949 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0211 09:45:42.376343  4949 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0211 09:45:42.376407  4949 net.cpp:150] Setting up ip2_ip2_0_split
I0211 09:45:42.376423  4949 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:45:42.376435  4949 net.cpp:157] Top shape: 100 10 (1000)
I0211 09:45:42.376443  4949 net.cpp:165] Memory required for data: 8086800
I0211 09:45:42.376453  4949 layer_factory.hpp:77] Creating layer accuracy
I0211 09:45:42.376477  4949 net.cpp:106] Creating Layer accuracy
I0211 09:45:42.376487  4949 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0211 09:45:42.376498  4949 net.cpp:454] accuracy <- label_mnist_1_split_0
I0211 09:45:42.376512  4949 net.cpp:411] accuracy -> accuracy
I0211 09:45:42.376533  4949 net.cpp:150] Setting up accuracy
I0211 09:45:42.376546  4949 net.cpp:157] Top shape: (1)
I0211 09:45:42.376554  4949 net.cpp:165] Memory required for data: 8086804
I0211 09:45:42.376562  4949 layer_factory.hpp:77] Creating layer loss
I0211 09:45:42.376574  4949 net.cpp:106] Creating Layer loss
I0211 09:45:42.376582  4949 net.cpp:454] loss <- ip2_ip2_0_split_1
I0211 09:45:42.376595  4949 net.cpp:454] loss <- label_mnist_1_split_1
I0211 09:45:42.376610  4949 net.cpp:411] loss -> loss
I0211 09:45:42.376662  4949 layer_factory.hpp:77] Creating layer loss
I0211 09:45:42.376817  4949 net.cpp:150] Setting up loss
I0211 09:45:42.376835  4949 net.cpp:157] Top shape: (1)
I0211 09:45:42.376842  4949 net.cpp:160]     with loss weight 1
I0211 09:45:42.376857  4949 net.cpp:165] Memory required for data: 8086808
I0211 09:45:42.376866  4949 net.cpp:226] loss needs backward computation.
I0211 09:45:42.376878  4949 net.cpp:228] accuracy does not need backward computation.
I0211 09:45:42.376888  4949 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0211 09:45:42.376896  4949 net.cpp:226] ip2 needs backward computation.
I0211 09:45:42.376905  4949 net.cpp:226] relu1 needs backward computation.
I0211 09:45:42.376914  4949 net.cpp:226] ip1 needs backward computation.
I0211 09:45:42.376924  4949 net.cpp:226] pool2 needs backward computation.
I0211 09:45:42.376932  4949 net.cpp:226] conv2 needs backward computation.
I0211 09:45:42.376950  4949 net.cpp:226] pool1 needs backward computation.
I0211 09:45:42.376960  4949 net.cpp:226] conv1 needs backward computation.
I0211 09:45:42.376968  4949 net.cpp:228] label_mnist_1_split does not need backward computation.
I0211 09:45:42.376977  4949 net.cpp:228] mnist does not need backward computation.
I0211 09:45:42.376986  4949 net.cpp:270] This network produces output accuracy
I0211 09:45:42.376994  4949 net.cpp:270] This network produces output loss
I0211 09:45:42.377020  4949 net.cpp:283] Network initialization done.
I0211 09:45:42.377086  4949 solver.cpp:60] Solver scaffolding done.
I0211 09:45:42.380683  4949 parallel.cpp:405] GPUs pairs 0:1
I0211 09:45:42.596070  4949 data_layer.cpp:41] output data size: 64,1,28,28
I0211 09:45:42.685041  4949 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0211 09:45:42.685135  4949 solver.cpp:311] Solving LeNet
I0211 09:45:42.685148  4949 solver.cpp:312] Learning Rate Policy: inv
I0211 09:45:42.685336  4949 solver.cpp:364] Iteration 0, Testing net (#0)
I0211 09:45:43.784605  4949 solver.cpp:432]     Test net output #0: accuracy = 0.1072
I0211 09:45:43.784646  4949 solver.cpp:432]     Test net output #1: loss = 2.30985 (* 1 = 2.30985 loss)
I0211 09:45:43.799716  4949 solver.cpp:250] Iteration 0, loss = 2.24777 Time spent communicating 0.17056
I0211 09:45:43.799744  4949 solver.cpp:267]     Train net output #0: loss = 2.24777 (* 1 = 2.24777 loss)
I0211 09:45:43.808805  4949 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0211 09:45:45.475937  4949 solver.cpp:250] Iteration 100, loss = 0.355241 Time spent communicating 44.7905
I0211 09:45:45.475971  4949 solver.cpp:267]     Train net output #0: loss = 0.355241 (* 1 = 0.355241 loss)
I0211 09:45:45.480630  4949 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0211 09:45:47.138037  4949 solver.cpp:250] Iteration 200, loss = 0.226063 Time spent communicating 36.8858
I0211 09:45:47.138069  4949 solver.cpp:267]     Train net output #0: loss = 0.226063 (* 1 = 0.226063 loss)
I0211 09:45:47.142446  4949 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0211 09:45:48.797260  4949 solver.cpp:250] Iteration 300, loss = 0.173351 Time spent communicating 34.6527
I0211 09:45:48.797294  4949 solver.cpp:267]     Train net output #0: loss = 0.173351 (* 1 = 0.173351 loss)
I0211 09:45:48.801746  4949 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0211 09:45:50.464835  4949 solver.cpp:250] Iteration 400, loss = 0.311143 Time spent communicating 33.604
I0211 09:45:50.464869  4949 solver.cpp:267]     Train net output #0: loss = 0.311143 (* 1 = 0.311143 loss)
I0211 09:45:50.468276  4949 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0211 09:45:52.116391  4949 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0211 09:45:52.150001  4949 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0211 09:45:52.180454  4949 solver.cpp:344] Iteration 500, loss = 0.110295
I0211 09:45:52.180480  4949 solver.cpp:364] Iteration 500, Testing net (#0)
I0211 09:45:53.133517  4949 solver.cpp:432]     Test net output #0: accuracy = 0.976
I0211 09:45:53.133585  4949 solver.cpp:432]     Test net output #1: loss = 0.0742345 (* 1 = 0.0742345 loss)
I0211 09:45:53.133594  4949 solver.cpp:349] Optimization Done.
I0211 09:45:53.133633  4949 parallel.cpp:256] IN DESTRUCTOR AND I'M 1
I0211 09:45:53.146950  4949 parallel.cpp:256] IN DESTRUCTOR AND I'M 0
I0211 09:45:53.147410  4949 caffe.cpp:215] Optimization Done.
