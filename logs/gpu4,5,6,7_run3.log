I0210 21:25:56.953703 28860 caffe.cpp:184] Using GPUs 4, 5, 6, 7
I0210 21:25:57.408043 28860 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 4
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:25:57.409624 28860 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:25:57.410640 28860 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:25:57.410665 28860 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:25:57.410797 28860 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 32
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:25:57.410883 28860 layer_factory.hpp:77] Creating layer mnist
I0210 21:25:57.411579 28860 net.cpp:106] Creating Layer mnist
I0210 21:25:57.411598 28860 net.cpp:411] mnist -> data
I0210 21:25:57.411648 28860 net.cpp:411] mnist -> label
I0210 21:25:57.415637 28864 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:25:57.430858 28860 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:57.432359 28860 net.cpp:150] Setting up mnist
I0210 21:25:57.432389 28860 net.cpp:157] Top shape: 32 1 28 28 (25088)
I0210 21:25:57.432401 28860 net.cpp:157] Top shape: 32 (32)
I0210 21:25:57.432421 28860 net.cpp:165] Memory required for data: 100480
I0210 21:25:57.432440 28860 layer_factory.hpp:77] Creating layer conv1
I0210 21:25:57.432477 28860 net.cpp:106] Creating Layer conv1
I0210 21:25:57.432488 28860 net.cpp:454] conv1 <- data
I0210 21:25:57.432512 28860 net.cpp:411] conv1 -> conv1
I0210 21:25:57.434001 28860 net.cpp:150] Setting up conv1
I0210 21:25:57.434017 28860 net.cpp:157] Top shape: 32 20 24 24 (368640)
I0210 21:25:57.434023 28860 net.cpp:165] Memory required for data: 1575040
I0210 21:25:57.434041 28860 layer_factory.hpp:77] Creating layer pool1
I0210 21:25:57.434056 28860 net.cpp:106] Creating Layer pool1
I0210 21:25:57.434063 28860 net.cpp:454] pool1 <- conv1
I0210 21:25:57.434074 28860 net.cpp:411] pool1 -> pool1
I0210 21:25:57.434273 28860 net.cpp:150] Setting up pool1
I0210 21:25:57.434285 28860 net.cpp:157] Top shape: 32 20 12 12 (92160)
I0210 21:25:57.434291 28860 net.cpp:165] Memory required for data: 1943680
I0210 21:25:57.434298 28860 layer_factory.hpp:77] Creating layer conv2
I0210 21:25:57.434314 28860 net.cpp:106] Creating Layer conv2
I0210 21:25:57.434319 28860 net.cpp:454] conv2 <- pool1
I0210 21:25:57.434329 28860 net.cpp:411] conv2 -> conv2
I0210 21:25:57.434833 28865 blocking_queue.cpp:50] Waiting for data
I0210 21:25:57.434856 28860 net.cpp:150] Setting up conv2
I0210 21:25:57.434870 28860 net.cpp:157] Top shape: 32 50 8 8 (102400)
I0210 21:25:57.434875 28860 net.cpp:165] Memory required for data: 2353280
I0210 21:25:57.434892 28860 layer_factory.hpp:77] Creating layer pool2
I0210 21:25:57.434905 28860 net.cpp:106] Creating Layer pool2
I0210 21:25:57.434911 28860 net.cpp:454] pool2 <- conv2
I0210 21:25:57.434921 28860 net.cpp:411] pool2 -> pool2
I0210 21:25:57.435073 28860 net.cpp:150] Setting up pool2
I0210 21:25:57.435084 28860 net.cpp:157] Top shape: 32 50 4 4 (25600)
I0210 21:25:57.435091 28860 net.cpp:165] Memory required for data: 2455680
I0210 21:25:57.435096 28860 layer_factory.hpp:77] Creating layer ip1
I0210 21:25:57.435116 28860 net.cpp:106] Creating Layer ip1
I0210 21:25:57.435122 28860 net.cpp:454] ip1 <- pool2
I0210 21:25:57.435132 28860 net.cpp:411] ip1 -> ip1
I0210 21:25:57.439582 28860 net.cpp:150] Setting up ip1
I0210 21:25:57.439597 28860 net.cpp:157] Top shape: 32 500 (16000)
I0210 21:25:57.439602 28860 net.cpp:165] Memory required for data: 2519680
I0210 21:25:57.439615 28860 layer_factory.hpp:77] Creating layer relu1
I0210 21:25:57.439625 28860 net.cpp:106] Creating Layer relu1
I0210 21:25:57.439631 28860 net.cpp:454] relu1 <- ip1
I0210 21:25:57.439642 28860 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:25:57.439654 28860 net.cpp:150] Setting up relu1
I0210 21:25:57.439662 28860 net.cpp:157] Top shape: 32 500 (16000)
I0210 21:25:57.439666 28860 net.cpp:165] Memory required for data: 2583680
I0210 21:25:57.439671 28860 layer_factory.hpp:77] Creating layer ip2
I0210 21:25:57.439679 28860 net.cpp:106] Creating Layer ip2
I0210 21:25:57.439684 28860 net.cpp:454] ip2 <- ip1
I0210 21:25:57.439692 28860 net.cpp:411] ip2 -> ip2
I0210 21:25:57.440551 28860 net.cpp:150] Setting up ip2
I0210 21:25:57.440564 28860 net.cpp:157] Top shape: 32 10 (320)
I0210 21:25:57.440569 28860 net.cpp:165] Memory required for data: 2584960
I0210 21:25:57.440578 28860 layer_factory.hpp:77] Creating layer loss
I0210 21:25:57.440594 28860 net.cpp:106] Creating Layer loss
I0210 21:25:57.440600 28860 net.cpp:454] loss <- ip2
I0210 21:25:57.440608 28860 net.cpp:454] loss <- label
I0210 21:25:57.440618 28860 net.cpp:411] loss -> loss
I0210 21:25:57.440636 28860 layer_factory.hpp:77] Creating layer loss
I0210 21:25:57.440732 28860 net.cpp:150] Setting up loss
I0210 21:25:57.440743 28860 net.cpp:157] Top shape: (1)
I0210 21:25:57.440748 28860 net.cpp:160]     with loss weight 1
I0210 21:25:57.440779 28860 net.cpp:165] Memory required for data: 2584964
I0210 21:25:57.440788 28860 net.cpp:226] loss needs backward computation.
I0210 21:25:57.440795 28860 net.cpp:226] ip2 needs backward computation.
I0210 21:25:57.440801 28860 net.cpp:226] relu1 needs backward computation.
I0210 21:25:57.440806 28860 net.cpp:226] ip1 needs backward computation.
I0210 21:25:57.440811 28860 net.cpp:226] pool2 needs backward computation.
I0210 21:25:57.440816 28860 net.cpp:226] conv2 needs backward computation.
I0210 21:25:57.440825 28860 net.cpp:226] pool1 needs backward computation.
I0210 21:25:57.440831 28860 net.cpp:226] conv1 needs backward computation.
I0210 21:25:57.440837 28860 net.cpp:228] mnist does not need backward computation.
I0210 21:25:57.440842 28860 net.cpp:270] This network produces output loss
I0210 21:25:57.440857 28860 net.cpp:283] Network initialization done.
I0210 21:25:57.441985 28860 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:25:57.442030 28860 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:25:57.442211 28860 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:25:57.442313 28860 layer_factory.hpp:77] Creating layer mnist
I0210 21:25:57.442456 28860 net.cpp:106] Creating Layer mnist
I0210 21:25:57.442468 28860 net.cpp:411] mnist -> data
I0210 21:25:57.442481 28860 net.cpp:411] mnist -> label
I0210 21:25:57.446212 28866 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:25:57.446569 28860 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:25:57.448138 28860 net.cpp:150] Setting up mnist
I0210 21:25:57.448154 28860 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:25:57.448161 28860 net.cpp:157] Top shape: 100 (100)
I0210 21:25:57.448168 28860 net.cpp:165] Memory required for data: 314000
I0210 21:25:57.448176 28860 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:25:57.448187 28860 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:25:57.448194 28860 net.cpp:454] label_mnist_1_split <- label
I0210 21:25:57.448202 28860 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:25:57.448216 28860 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:25:57.448369 28860 net.cpp:150] Setting up label_mnist_1_split
I0210 21:25:57.448379 28860 net.cpp:157] Top shape: 100 (100)
I0210 21:25:57.448385 28860 net.cpp:157] Top shape: 100 (100)
I0210 21:25:57.448390 28860 net.cpp:165] Memory required for data: 314800
I0210 21:25:57.448395 28860 layer_factory.hpp:77] Creating layer conv1
I0210 21:25:57.448412 28860 net.cpp:106] Creating Layer conv1
I0210 21:25:57.448420 28860 net.cpp:454] conv1 <- data
I0210 21:25:57.448428 28860 net.cpp:411] conv1 -> conv1
I0210 21:25:57.448784 28860 net.cpp:150] Setting up conv1
I0210 21:25:57.448801 28860 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:25:57.448807 28860 net.cpp:165] Memory required for data: 4922800
I0210 21:25:57.448822 28860 layer_factory.hpp:77] Creating layer pool1
I0210 21:25:57.448863 28860 net.cpp:106] Creating Layer pool1
I0210 21:25:57.448868 28860 net.cpp:454] pool1 <- conv1
I0210 21:25:57.448881 28860 net.cpp:411] pool1 -> pool1
I0210 21:25:57.449064 28860 net.cpp:150] Setting up pool1
I0210 21:25:57.449080 28860 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:25:57.449085 28860 net.cpp:165] Memory required for data: 6074800
I0210 21:25:57.449090 28860 layer_factory.hpp:77] Creating layer conv2
I0210 21:25:57.449106 28860 net.cpp:106] Creating Layer conv2
I0210 21:25:57.449113 28860 net.cpp:454] conv2 <- pool1
I0210 21:25:57.449122 28860 net.cpp:411] conv2 -> conv2
I0210 21:25:57.449556 28860 net.cpp:150] Setting up conv2
I0210 21:25:57.449568 28860 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:25:57.449573 28860 net.cpp:165] Memory required for data: 7354800
I0210 21:25:57.449600 28860 layer_factory.hpp:77] Creating layer pool2
I0210 21:25:57.449611 28860 net.cpp:106] Creating Layer pool2
I0210 21:25:57.449617 28860 net.cpp:454] pool2 <- conv2
I0210 21:25:57.449632 28860 net.cpp:411] pool2 -> pool2
I0210 21:25:57.449795 28860 net.cpp:150] Setting up pool2
I0210 21:25:57.449805 28860 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:25:57.449811 28860 net.cpp:165] Memory required for data: 7674800
I0210 21:25:57.449816 28860 layer_factory.hpp:77] Creating layer ip1
I0210 21:25:57.449828 28860 net.cpp:106] Creating Layer ip1
I0210 21:25:57.449836 28860 net.cpp:454] ip1 <- pool2
I0210 21:25:57.449843 28860 net.cpp:411] ip1 -> ip1
I0210 21:25:57.454829 28860 net.cpp:150] Setting up ip1
I0210 21:25:57.454849 28860 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:25:57.454855 28860 net.cpp:165] Memory required for data: 7874800
I0210 21:25:57.454870 28860 layer_factory.hpp:77] Creating layer relu1
I0210 21:25:57.454900 28860 net.cpp:106] Creating Layer relu1
I0210 21:25:57.454907 28860 net.cpp:454] relu1 <- ip1
I0210 21:25:57.454915 28860 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:25:57.454924 28860 net.cpp:150] Setting up relu1
I0210 21:25:57.454931 28860 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:25:57.454934 28860 net.cpp:165] Memory required for data: 8074800
I0210 21:25:57.454938 28860 layer_factory.hpp:77] Creating layer ip2
I0210 21:25:57.454951 28860 net.cpp:106] Creating Layer ip2
I0210 21:25:57.454957 28860 net.cpp:454] ip2 <- ip1
I0210 21:25:57.454965 28860 net.cpp:411] ip2 -> ip2
I0210 21:25:57.455121 28860 net.cpp:150] Setting up ip2
I0210 21:25:57.455133 28860 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:57.455138 28860 net.cpp:165] Memory required for data: 8078800
I0210 21:25:57.455148 28860 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:25:57.455157 28860 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:25:57.455163 28860 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:25:57.455173 28860 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:25:57.455183 28860 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:25:57.455225 28860 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:25:57.455235 28860 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:57.455242 28860 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:57.455247 28860 net.cpp:165] Memory required for data: 8086800
I0210 21:25:57.455252 28860 layer_factory.hpp:77] Creating layer accuracy
I0210 21:25:57.455267 28860 net.cpp:106] Creating Layer accuracy
I0210 21:25:57.455273 28860 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:25:57.455281 28860 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:25:57.455292 28860 net.cpp:411] accuracy -> accuracy
I0210 21:25:57.455307 28860 net.cpp:150] Setting up accuracy
I0210 21:25:57.455315 28860 net.cpp:157] Top shape: (1)
I0210 21:25:57.455322 28860 net.cpp:165] Memory required for data: 8086804
I0210 21:25:57.455327 28860 layer_factory.hpp:77] Creating layer loss
I0210 21:25:57.455337 28860 net.cpp:106] Creating Layer loss
I0210 21:25:57.455343 28860 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:25:57.455350 28860 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:25:57.455358 28860 net.cpp:411] loss -> loss
I0210 21:25:57.455385 28860 layer_factory.hpp:77] Creating layer loss
I0210 21:25:57.455478 28860 net.cpp:150] Setting up loss
I0210 21:25:57.455490 28860 net.cpp:157] Top shape: (1)
I0210 21:25:57.455495 28860 net.cpp:160]     with loss weight 1
I0210 21:25:57.455507 28860 net.cpp:165] Memory required for data: 8086808
I0210 21:25:57.455513 28860 net.cpp:226] loss needs backward computation.
I0210 21:25:57.455520 28860 net.cpp:228] accuracy does not need backward computation.
I0210 21:25:57.455528 28860 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:25:57.455534 28860 net.cpp:226] ip2 needs backward computation.
I0210 21:25:57.455540 28860 net.cpp:226] relu1 needs backward computation.
I0210 21:25:57.455546 28860 net.cpp:226] ip1 needs backward computation.
I0210 21:25:57.455551 28860 net.cpp:226] pool2 needs backward computation.
I0210 21:25:57.455557 28860 net.cpp:226] conv2 needs backward computation.
I0210 21:25:57.455562 28860 net.cpp:226] pool1 needs backward computation.
I0210 21:25:57.455567 28860 net.cpp:226] conv1 needs backward computation.
I0210 21:25:57.455572 28860 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:25:57.455579 28860 net.cpp:228] mnist does not need backward computation.
I0210 21:25:57.455584 28860 net.cpp:270] This network produces output accuracy
I0210 21:25:57.455588 28860 net.cpp:270] This network produces output loss
I0210 21:25:57.455606 28860 net.cpp:283] Network initialization done.
I0210 21:25:57.455651 28860 solver.cpp:60] Solver scaffolding done.
I0210 21:25:57.481520 28860 parallel.cpp:405] GPUs pairs 4:5, 6:7, 4:6
I0210 21:25:57.722654 28860 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:58.146881 28860 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:58.548547 28860 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:58.655189 28860 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:25:58.904460 28860 solver.cpp:311] Solving LeNet
I0210 21:25:58.904497 28860 solver.cpp:312] Learning Rate Policy: inv
I0210 21:25:58.904918 28860 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:25:59.910172 28860 solver.cpp:432]     Test net output #0: accuracy = 0.1129
I0210 21:25:59.910223 28860 solver.cpp:432]     Test net output #1: loss = 2.32697 (* 1 = 2.32697 loss)
I0210 21:25:59.925895 28860 solver.cpp:250] Iteration 0, loss = 2.33035 Time spent communicating 0.388832
I0210 21:25:59.925945 28860 solver.cpp:267]     Train net output #0: loss = 2.33035 (* 1 = 2.33035 loss)
I0210 21:25:59.932708 28860 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:26:00.940850 28860 solver.cpp:250] Iteration 100, loss = 0.431045 Time spent communicating 125.771
I0210 21:26:00.940907 28860 solver.cpp:267]     Train net output #0: loss = 0.431045 (* 1 = 0.431045 loss)
I0210 21:26:00.941757 28860 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:26:01.949811 28860 solver.cpp:250] Iteration 200, loss = 0.303215 Time spent communicating 126.461
I0210 21:26:01.949862 28860 solver.cpp:267]     Train net output #0: loss = 0.303215 (* 1 = 0.303215 loss)
I0210 21:26:01.950886 28860 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:26:02.951676 28860 solver.cpp:250] Iteration 300, loss = 0.166369 Time spent communicating 123.6
I0210 21:26:02.951716 28860 solver.cpp:267]     Train net output #0: loss = 0.166369 (* 1 = 0.166369 loss)
I0210 21:26:02.952425 28860 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:26:03.973938 28860 solver.cpp:250] Iteration 400, loss = 0.36815 Time spent communicating 131.759
I0210 21:26:03.973976 28860 solver.cpp:267]     Train net output #0: loss = 0.36815 (* 1 = 0.36815 loss)
I0210 21:26:03.974843 28860 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:26:04.975185 28860 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:26:05.007691 28860 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:26:05.035312 28860 solver.cpp:344] Iteration 500, loss = 0.150177
I0210 21:26:05.035387 28860 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:26:06.029536 28860 solver.cpp:432]     Test net output #0: accuracy = 0.9753
I0210 21:26:06.029585 28860 solver.cpp:432]     Test net output #1: loss = 0.079737 (* 1 = 0.079737 loss)
I0210 21:26:06.029592 28860 solver.cpp:349] Optimization Done.
I0210 21:26:06.029651 28860 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:26:06.048542 28860 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:26:06.064571 28860 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:26:06.081877 28860 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0210 21:26:06.082375 28860 caffe.cpp:215] Optimization Done.
