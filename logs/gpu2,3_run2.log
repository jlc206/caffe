I0210 21:23:00.527072 28707 caffe.cpp:184] Using GPUs 2, 3
I0210 21:23:01.009738 28707 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 2
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:23:01.011291 28707 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:23:01.012851 28707 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:23:01.012887 28707 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:23:01.013146 28707 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:23:01.013332 28707 layer_factory.hpp:77] Creating layer mnist
I0210 21:23:01.014727 28707 net.cpp:106] Creating Layer mnist
I0210 21:23:01.014750 28707 net.cpp:411] mnist -> data
I0210 21:23:01.014853 28707 net.cpp:411] mnist -> label
I0210 21:23:01.020524 28711 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:23:01.038197 28707 data_layer.cpp:41] output data size: 64,1,28,28
I0210 21:23:01.039721 28707 net.cpp:150] Setting up mnist
I0210 21:23:01.039748 28707 net.cpp:157] Top shape: 64 1 28 28 (50176)
I0210 21:23:01.039758 28707 net.cpp:157] Top shape: 64 (64)
I0210 21:23:01.039763 28707 net.cpp:165] Memory required for data: 200960
I0210 21:23:01.039783 28707 layer_factory.hpp:77] Creating layer conv1
I0210 21:23:01.039811 28707 net.cpp:106] Creating Layer conv1
I0210 21:23:01.039824 28707 net.cpp:454] conv1 <- data
I0210 21:23:01.039844 28707 net.cpp:411] conv1 -> conv1
I0210 21:23:01.041353 28707 net.cpp:150] Setting up conv1
I0210 21:23:01.041369 28707 net.cpp:157] Top shape: 64 20 24 24 (737280)
I0210 21:23:01.041374 28707 net.cpp:165] Memory required for data: 3150080
I0210 21:23:01.041391 28707 layer_factory.hpp:77] Creating layer pool1
I0210 21:23:01.041409 28707 net.cpp:106] Creating Layer pool1
I0210 21:23:01.041415 28707 net.cpp:454] pool1 <- conv1
I0210 21:23:01.041426 28707 net.cpp:411] pool1 -> pool1
I0210 21:23:01.041664 28707 net.cpp:150] Setting up pool1
I0210 21:23:01.041678 28707 net.cpp:157] Top shape: 64 20 12 12 (184320)
I0210 21:23:01.041683 28707 net.cpp:165] Memory required for data: 3887360
I0210 21:23:01.041690 28707 layer_factory.hpp:77] Creating layer conv2
I0210 21:23:01.041709 28707 net.cpp:106] Creating Layer conv2
I0210 21:23:01.041720 28707 net.cpp:454] conv2 <- pool1
I0210 21:23:01.041733 28707 net.cpp:411] conv2 -> conv2
I0210 21:23:01.042171 28707 net.cpp:150] Setting up conv2
I0210 21:23:01.042184 28707 net.cpp:157] Top shape: 64 50 8 8 (204800)
I0210 21:23:01.042189 28707 net.cpp:165] Memory required for data: 4706560
I0210 21:23:01.042201 28707 layer_factory.hpp:77] Creating layer pool2
I0210 21:23:01.042217 28707 net.cpp:106] Creating Layer pool2
I0210 21:23:01.042223 28707 net.cpp:454] pool2 <- conv2
I0210 21:23:01.042232 28707 net.cpp:411] pool2 -> pool2
I0210 21:23:01.042390 28707 net.cpp:150] Setting up pool2
I0210 21:23:01.042402 28707 net.cpp:157] Top shape: 64 50 4 4 (51200)
I0210 21:23:01.042407 28707 net.cpp:165] Memory required for data: 4911360
I0210 21:23:01.042413 28707 layer_factory.hpp:77] Creating layer ip1
I0210 21:23:01.042429 28707 net.cpp:106] Creating Layer ip1
I0210 21:23:01.042436 28707 net.cpp:454] ip1 <- pool2
I0210 21:23:01.042448 28707 net.cpp:411] ip1 -> ip1
I0210 21:23:01.044819 28712 blocking_queue.cpp:50] Waiting for data
I0210 21:23:01.048030 28707 net.cpp:150] Setting up ip1
I0210 21:23:01.048048 28707 net.cpp:157] Top shape: 64 500 (32000)
I0210 21:23:01.048053 28707 net.cpp:165] Memory required for data: 5039360
I0210 21:23:01.048068 28707 layer_factory.hpp:77] Creating layer relu1
I0210 21:23:01.048077 28707 net.cpp:106] Creating Layer relu1
I0210 21:23:01.048084 28707 net.cpp:454] relu1 <- ip1
I0210 21:23:01.048091 28707 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:23:01.048104 28707 net.cpp:150] Setting up relu1
I0210 21:23:01.048110 28707 net.cpp:157] Top shape: 64 500 (32000)
I0210 21:23:01.048116 28707 net.cpp:165] Memory required for data: 5167360
I0210 21:23:01.048120 28707 layer_factory.hpp:77] Creating layer ip2
I0210 21:23:01.048131 28707 net.cpp:106] Creating Layer ip2
I0210 21:23:01.048137 28707 net.cpp:454] ip2 <- ip1
I0210 21:23:01.048149 28707 net.cpp:411] ip2 -> ip2
I0210 21:23:01.049233 28707 net.cpp:150] Setting up ip2
I0210 21:23:01.049247 28707 net.cpp:157] Top shape: 64 10 (640)
I0210 21:23:01.049252 28707 net.cpp:165] Memory required for data: 5169920
I0210 21:23:01.049263 28707 layer_factory.hpp:77] Creating layer loss
I0210 21:23:01.049281 28707 net.cpp:106] Creating Layer loss
I0210 21:23:01.049293 28707 net.cpp:454] loss <- ip2
I0210 21:23:01.049304 28707 net.cpp:454] loss <- label
I0210 21:23:01.049326 28707 net.cpp:411] loss -> loss
I0210 21:23:01.049357 28707 layer_factory.hpp:77] Creating layer loss
I0210 21:23:01.049516 28707 net.cpp:150] Setting up loss
I0210 21:23:01.049532 28707 net.cpp:157] Top shape: (1)
I0210 21:23:01.049538 28707 net.cpp:160]     with loss weight 1
I0210 21:23:01.049568 28707 net.cpp:165] Memory required for data: 5169924
I0210 21:23:01.049577 28707 net.cpp:226] loss needs backward computation.
I0210 21:23:01.049584 28707 net.cpp:226] ip2 needs backward computation.
I0210 21:23:01.049589 28707 net.cpp:226] relu1 needs backward computation.
I0210 21:23:01.049595 28707 net.cpp:226] ip1 needs backward computation.
I0210 21:23:01.049599 28707 net.cpp:226] pool2 needs backward computation.
I0210 21:23:01.049604 28707 net.cpp:226] conv2 needs backward computation.
I0210 21:23:01.049614 28707 net.cpp:226] pool1 needs backward computation.
I0210 21:23:01.049619 28707 net.cpp:226] conv1 needs backward computation.
I0210 21:23:01.049629 28707 net.cpp:228] mnist does not need backward computation.
I0210 21:23:01.049635 28707 net.cpp:270] This network produces output loss
I0210 21:23:01.049651 28707 net.cpp:283] Network initialization done.
I0210 21:23:01.050730 28707 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:23:01.050770 28707 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:23:01.050947 28707 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:23:01.051049 28707 layer_factory.hpp:77] Creating layer mnist
I0210 21:23:01.051184 28707 net.cpp:106] Creating Layer mnist
I0210 21:23:01.051200 28707 net.cpp:411] mnist -> data
I0210 21:23:01.051213 28707 net.cpp:411] mnist -> label
I0210 21:23:01.055028 28713 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:23:01.055369 28707 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:23:01.057241 28707 net.cpp:150] Setting up mnist
I0210 21:23:01.057261 28707 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:23:01.057270 28707 net.cpp:157] Top shape: 100 (100)
I0210 21:23:01.057274 28707 net.cpp:165] Memory required for data: 314000
I0210 21:23:01.057281 28707 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:23:01.057317 28707 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:23:01.057328 28707 net.cpp:454] label_mnist_1_split <- label
I0210 21:23:01.057340 28707 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:23:01.057353 28707 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:23:01.057420 28707 net.cpp:150] Setting up label_mnist_1_split
I0210 21:23:01.057433 28707 net.cpp:157] Top shape: 100 (100)
I0210 21:23:01.057441 28707 net.cpp:157] Top shape: 100 (100)
I0210 21:23:01.057447 28707 net.cpp:165] Memory required for data: 314800
I0210 21:23:01.057454 28707 layer_factory.hpp:77] Creating layer conv1
I0210 21:23:01.057474 28707 net.cpp:106] Creating Layer conv1
I0210 21:23:01.057482 28707 net.cpp:454] conv1 <- data
I0210 21:23:01.057495 28707 net.cpp:411] conv1 -> conv1
I0210 21:23:01.057979 28707 net.cpp:150] Setting up conv1
I0210 21:23:01.057996 28707 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:23:01.058003 28707 net.cpp:165] Memory required for data: 4922800
I0210 21:23:01.058028 28707 layer_factory.hpp:77] Creating layer pool1
I0210 21:23:01.058074 28707 net.cpp:106] Creating Layer pool1
I0210 21:23:01.058090 28707 net.cpp:454] pool1 <- conv1
I0210 21:23:01.058115 28707 net.cpp:411] pool1 -> pool1
I0210 21:23:01.058367 28707 net.cpp:150] Setting up pool1
I0210 21:23:01.058384 28707 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:23:01.058389 28707 net.cpp:165] Memory required for data: 6074800
I0210 21:23:01.058395 28707 layer_factory.hpp:77] Creating layer conv2
I0210 21:23:01.058413 28707 net.cpp:106] Creating Layer conv2
I0210 21:23:01.058419 28707 net.cpp:454] conv2 <- pool1
I0210 21:23:01.058434 28707 net.cpp:411] conv2 -> conv2
I0210 21:23:01.058964 28707 net.cpp:150] Setting up conv2
I0210 21:23:01.058979 28707 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:23:01.058984 28707 net.cpp:165] Memory required for data: 7354800
I0210 21:23:01.058997 28707 layer_factory.hpp:77] Creating layer pool2
I0210 21:23:01.059026 28707 net.cpp:106] Creating Layer pool2
I0210 21:23:01.059037 28707 net.cpp:454] pool2 <- conv2
I0210 21:23:01.059054 28707 net.cpp:411] pool2 -> pool2
I0210 21:23:01.059299 28707 net.cpp:150] Setting up pool2
I0210 21:23:01.059315 28707 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:23:01.059322 28707 net.cpp:165] Memory required for data: 7674800
I0210 21:23:01.059329 28707 layer_factory.hpp:77] Creating layer ip1
I0210 21:23:01.059345 28707 net.cpp:106] Creating Layer ip1
I0210 21:23:01.059351 28707 net.cpp:454] ip1 <- pool2
I0210 21:23:01.059361 28707 net.cpp:411] ip1 -> ip1
I0210 21:23:01.065951 28707 net.cpp:150] Setting up ip1
I0210 21:23:01.065973 28707 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:23:01.065979 28707 net.cpp:165] Memory required for data: 7874800
I0210 21:23:01.066004 28707 layer_factory.hpp:77] Creating layer relu1
I0210 21:23:01.066017 28707 net.cpp:106] Creating Layer relu1
I0210 21:23:01.066025 28707 net.cpp:454] relu1 <- ip1
I0210 21:23:01.066040 28707 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:23:01.066054 28707 net.cpp:150] Setting up relu1
I0210 21:23:01.066064 28707 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:23:01.066071 28707 net.cpp:165] Memory required for data: 8074800
I0210 21:23:01.066077 28707 layer_factory.hpp:77] Creating layer ip2
I0210 21:23:01.066092 28707 net.cpp:106] Creating Layer ip2
I0210 21:23:01.066099 28707 net.cpp:454] ip2 <- ip1
I0210 21:23:01.066123 28707 net.cpp:411] ip2 -> ip2
I0210 21:23:01.066339 28707 net.cpp:150] Setting up ip2
I0210 21:23:01.066354 28707 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:23:01.066360 28707 net.cpp:165] Memory required for data: 8078800
I0210 21:23:01.066373 28707 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:23:01.066388 28707 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:23:01.066396 28707 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:23:01.066407 28707 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:23:01.066419 28707 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:23:01.066479 28707 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:23:01.066493 28707 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:23:01.066503 28707 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:23:01.066509 28707 net.cpp:165] Memory required for data: 8086800
I0210 21:23:01.066517 28707 layer_factory.hpp:77] Creating layer accuracy
I0210 21:23:01.066539 28707 net.cpp:106] Creating Layer accuracy
I0210 21:23:01.066546 28707 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:23:01.066556 28707 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:23:01.066565 28707 net.cpp:411] accuracy -> accuracy
I0210 21:23:01.066582 28707 net.cpp:150] Setting up accuracy
I0210 21:23:01.066593 28707 net.cpp:157] Top shape: (1)
I0210 21:23:01.066601 28707 net.cpp:165] Memory required for data: 8086804
I0210 21:23:01.066607 28707 layer_factory.hpp:77] Creating layer loss
I0210 21:23:01.066617 28707 net.cpp:106] Creating Layer loss
I0210 21:23:01.066625 28707 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:23:01.066634 28707 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:23:01.066648 28707 net.cpp:411] loss -> loss
I0210 21:23:01.066686 28707 layer_factory.hpp:77] Creating layer loss
I0210 21:23:01.066813 28707 net.cpp:150] Setting up loss
I0210 21:23:01.066828 28707 net.cpp:157] Top shape: (1)
I0210 21:23:01.066835 28707 net.cpp:160]     with loss weight 1
I0210 21:23:01.066848 28707 net.cpp:165] Memory required for data: 8086808
I0210 21:23:01.066855 28707 net.cpp:226] loss needs backward computation.
I0210 21:23:01.066865 28707 net.cpp:228] accuracy does not need backward computation.
I0210 21:23:01.066880 28707 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:23:01.066903 28707 net.cpp:226] ip2 needs backward computation.
I0210 21:23:01.066920 28707 net.cpp:226] relu1 needs backward computation.
I0210 21:23:01.066931 28707 net.cpp:226] ip1 needs backward computation.
I0210 21:23:01.066944 28707 net.cpp:226] pool2 needs backward computation.
I0210 21:23:01.066958 28707 net.cpp:226] conv2 needs backward computation.
I0210 21:23:01.066973 28707 net.cpp:226] pool1 needs backward computation.
I0210 21:23:01.066997 28707 net.cpp:226] conv1 needs backward computation.
I0210 21:23:01.067013 28707 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:23:01.067029 28707 net.cpp:228] mnist does not need backward computation.
I0210 21:23:01.067044 28707 net.cpp:270] This network produces output accuracy
I0210 21:23:01.067059 28707 net.cpp:270] This network produces output loss
I0210 21:23:01.067097 28707 net.cpp:283] Network initialization done.
I0210 21:23:01.067185 28707 solver.cpp:60] Solver scaffolding done.
I0210 21:23:01.070828 28707 parallel.cpp:405] GPUs pairs 2:3
I0210 21:23:01.302008 28707 data_layer.cpp:41] output data size: 64,1,28,28
I0210 21:23:01.379513 28707 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:23:01.379622 28707 solver.cpp:311] Solving LeNet
I0210 21:23:01.379636 28707 solver.cpp:312] Learning Rate Policy: inv
I0210 21:23:01.379837 28707 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:23:02.417574 28707 solver.cpp:432]     Test net output #0: accuracy = 0.0794
I0210 21:23:02.417620 28707 solver.cpp:432]     Test net output #1: loss = 2.34406 (* 1 = 2.34406 loss)
I0210 21:23:02.434491 28707 solver.cpp:250] Iteration 0, loss = 2.2859 Time spent communicating 0.175296
I0210 21:23:02.434515 28707 solver.cpp:267]     Train net output #0: loss = 2.2859 (* 1 = 2.2859 loss)
I0210 21:23:02.439278 28707 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:23:04.135771 28707 solver.cpp:250] Iteration 100, loss = 0.337389 Time spent communicating 33.1751
I0210 21:23:04.135807 28707 solver.cpp:267]     Train net output #0: loss = 0.337389 (* 1 = 0.337389 loss)
I0210 21:23:04.141537 28707 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:23:05.802045 28707 solver.cpp:250] Iteration 200, loss = 0.263011 Time spent communicating 29.5167
I0210 21:23:05.802081 28707 solver.cpp:267]     Train net output #0: loss = 0.263012 (* 1 = 0.263012 loss)
I0210 21:23:05.806630 28707 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:23:07.364792 28707 solver.cpp:250] Iteration 300, loss = 0.149449 Time spent communicating 40.7998
I0210 21:23:07.364837 28707 solver.cpp:267]     Train net output #0: loss = 0.149449 (* 1 = 0.149449 loss)
I0210 21:23:07.369338 28707 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:23:08.928421 28707 solver.cpp:250] Iteration 400, loss = 0.339619 Time spent communicating 38.0516
I0210 21:23:08.928462 28707 solver.cpp:267]     Train net output #0: loss = 0.339619 (* 1 = 0.339619 loss)
I0210 21:23:08.932909 28707 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:23:10.480370 28707 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:23:10.514382 28707 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:23:10.549830 28707 solver.cpp:344] Iteration 500, loss = 0.144399
I0210 21:23:10.549883 28707 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:23:11.508025 28707 solver.cpp:432]     Test net output #0: accuracy = 0.9723
I0210 21:23:11.508090 28707 solver.cpp:432]     Test net output #1: loss = 0.0840241 (* 1 = 0.0840241 loss)
I0210 21:23:11.508106 28707 solver.cpp:349] Optimization Done.
I0210 21:23:11.508152 28707 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0210 21:23:11.522581 28707 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0210 21:23:11.523092 28707 caffe.cpp:215] Optimization Done.
