I0210 21:27:53.126627 29057 caffe.cpp:184] Using GPUs 2, 3, 4, 5, 6, 7
I0210 21:27:53.619607 29057 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 2
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:27:53.631132 29057 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:27:53.632560 29057 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:27:53.632614 29057 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:27:53.632879 29057 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 21
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:27:53.633024 29057 layer_factory.hpp:77] Creating layer mnist
I0210 21:27:53.633967 29057 net.cpp:106] Creating Layer mnist
I0210 21:27:53.634008 29057 net.cpp:411] mnist -> data
I0210 21:27:53.634182 29057 net.cpp:411] mnist -> label
I0210 21:27:53.639575 29061 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:27:53.660640 29057 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:53.661952 29057 net.cpp:150] Setting up mnist
I0210 21:27:53.661978 29057 net.cpp:157] Top shape: 21 1 28 28 (16464)
I0210 21:27:53.661988 29057 net.cpp:157] Top shape: 21 (21)
I0210 21:27:53.661993 29057 net.cpp:165] Memory required for data: 65940
I0210 21:27:53.662012 29057 layer_factory.hpp:77] Creating layer conv1
I0210 21:27:53.662050 29057 net.cpp:106] Creating Layer conv1
I0210 21:27:53.662062 29057 net.cpp:454] conv1 <- data
I0210 21:27:53.662087 29057 net.cpp:411] conv1 -> conv1
I0210 21:27:53.663365 29057 net.cpp:150] Setting up conv1
I0210 21:27:53.663380 29057 net.cpp:157] Top shape: 21 20 24 24 (241920)
I0210 21:27:53.663386 29057 net.cpp:165] Memory required for data: 1033620
I0210 21:27:53.663404 29057 layer_factory.hpp:77] Creating layer pool1
I0210 21:27:53.663424 29057 net.cpp:106] Creating Layer pool1
I0210 21:27:53.663430 29057 net.cpp:454] pool1 <- conv1
I0210 21:27:53.663439 29057 net.cpp:411] pool1 -> pool1
I0210 21:27:53.663679 29057 net.cpp:150] Setting up pool1
I0210 21:27:53.663693 29057 net.cpp:157] Top shape: 21 20 12 12 (60480)
I0210 21:27:53.663699 29057 net.cpp:165] Memory required for data: 1275540
I0210 21:27:53.663707 29057 layer_factory.hpp:77] Creating layer conv2
I0210 21:27:53.663724 29057 net.cpp:106] Creating Layer conv2
I0210 21:27:53.663732 29057 net.cpp:454] conv2 <- pool1
I0210 21:27:53.663743 29057 net.cpp:411] conv2 -> conv2
I0210 21:27:53.664175 29057 net.cpp:150] Setting up conv2
I0210 21:27:53.664187 29057 net.cpp:157] Top shape: 21 50 8 8 (67200)
I0210 21:27:53.664193 29057 net.cpp:165] Memory required for data: 1544340
I0210 21:27:53.664206 29057 layer_factory.hpp:77] Creating layer pool2
I0210 21:27:53.664219 29057 net.cpp:106] Creating Layer pool2
I0210 21:27:53.664225 29057 net.cpp:454] pool2 <- conv2
I0210 21:27:53.664233 29057 net.cpp:411] pool2 -> pool2
I0210 21:27:53.664381 29057 net.cpp:150] Setting up pool2
I0210 21:27:53.664392 29057 net.cpp:157] Top shape: 21 50 4 4 (16800)
I0210 21:27:53.664398 29057 net.cpp:165] Memory required for data: 1611540
I0210 21:27:53.664403 29057 layer_factory.hpp:77] Creating layer ip1
I0210 21:27:53.664423 29057 net.cpp:106] Creating Layer ip1
I0210 21:27:53.664430 29057 net.cpp:454] ip1 <- pool2
I0210 21:27:53.664441 29057 net.cpp:411] ip1 -> ip1
I0210 21:27:53.666772 29062 blocking_queue.cpp:50] Waiting for data
I0210 21:27:53.668990 29057 net.cpp:150] Setting up ip1
I0210 21:27:53.669008 29057 net.cpp:157] Top shape: 21 500 (10500)
I0210 21:27:53.669013 29057 net.cpp:165] Memory required for data: 1653540
I0210 21:27:53.669024 29057 layer_factory.hpp:77] Creating layer relu1
I0210 21:27:53.669039 29057 net.cpp:106] Creating Layer relu1
I0210 21:27:53.669045 29057 net.cpp:454] relu1 <- ip1
I0210 21:27:53.669054 29057 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:27:53.669067 29057 net.cpp:150] Setting up relu1
I0210 21:27:53.669075 29057 net.cpp:157] Top shape: 21 500 (10500)
I0210 21:27:53.669080 29057 net.cpp:165] Memory required for data: 1695540
I0210 21:27:53.669085 29057 layer_factory.hpp:77] Creating layer ip2
I0210 21:27:53.669098 29057 net.cpp:106] Creating Layer ip2
I0210 21:27:53.669105 29057 net.cpp:454] ip2 <- ip1
I0210 21:27:53.669112 29057 net.cpp:411] ip2 -> ip2
I0210 21:27:53.669997 29057 net.cpp:150] Setting up ip2
I0210 21:27:53.670011 29057 net.cpp:157] Top shape: 21 10 (210)
I0210 21:27:53.670019 29057 net.cpp:165] Memory required for data: 1696380
I0210 21:27:53.670035 29057 layer_factory.hpp:77] Creating layer loss
I0210 21:27:53.670054 29057 net.cpp:106] Creating Layer loss
I0210 21:27:53.670066 29057 net.cpp:454] loss <- ip2
I0210 21:27:53.670080 29057 net.cpp:454] loss <- label
I0210 21:27:53.670102 29057 net.cpp:411] loss -> loss
I0210 21:27:53.670135 29057 layer_factory.hpp:77] Creating layer loss
I0210 21:27:53.670276 29057 net.cpp:150] Setting up loss
I0210 21:27:53.670289 29057 net.cpp:157] Top shape: (1)
I0210 21:27:53.670295 29057 net.cpp:160]     with loss weight 1
I0210 21:27:53.670333 29057 net.cpp:165] Memory required for data: 1696384
I0210 21:27:53.670344 29057 net.cpp:226] loss needs backward computation.
I0210 21:27:53.670351 29057 net.cpp:226] ip2 needs backward computation.
I0210 21:27:53.670356 29057 net.cpp:226] relu1 needs backward computation.
I0210 21:27:53.670362 29057 net.cpp:226] ip1 needs backward computation.
I0210 21:27:53.670367 29057 net.cpp:226] pool2 needs backward computation.
I0210 21:27:53.670372 29057 net.cpp:226] conv2 needs backward computation.
I0210 21:27:53.670382 29057 net.cpp:226] pool1 needs backward computation.
I0210 21:27:53.670388 29057 net.cpp:226] conv1 needs backward computation.
I0210 21:27:53.670394 29057 net.cpp:228] mnist does not need backward computation.
I0210 21:27:53.670399 29057 net.cpp:270] This network produces output loss
I0210 21:27:53.670415 29057 net.cpp:283] Network initialization done.
I0210 21:27:53.671561 29057 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:27:53.671602 29057 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:27:53.671788 29057 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:27:53.671897 29057 layer_factory.hpp:77] Creating layer mnist
I0210 21:27:53.672047 29057 net.cpp:106] Creating Layer mnist
I0210 21:27:53.672063 29057 net.cpp:411] mnist -> data
I0210 21:27:53.672076 29057 net.cpp:411] mnist -> label
I0210 21:27:53.676453 29065 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:27:53.676772 29057 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:27:53.678381 29057 net.cpp:150] Setting up mnist
I0210 21:27:53.678397 29057 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:27:53.678405 29057 net.cpp:157] Top shape: 100 (100)
I0210 21:27:53.678408 29057 net.cpp:165] Memory required for data: 314000
I0210 21:27:53.678414 29057 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:27:53.678424 29057 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:27:53.678429 29057 net.cpp:454] label_mnist_1_split <- label
I0210 21:27:53.678441 29057 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:27:53.678453 29057 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:27:53.678513 29057 net.cpp:150] Setting up label_mnist_1_split
I0210 21:27:53.678524 29057 net.cpp:157] Top shape: 100 (100)
I0210 21:27:53.678530 29057 net.cpp:157] Top shape: 100 (100)
I0210 21:27:53.678535 29057 net.cpp:165] Memory required for data: 314800
I0210 21:27:53.678541 29057 layer_factory.hpp:77] Creating layer conv1
I0210 21:27:53.678558 29057 net.cpp:106] Creating Layer conv1
I0210 21:27:53.678565 29057 net.cpp:454] conv1 <- data
I0210 21:27:53.678576 29057 net.cpp:411] conv1 -> conv1
I0210 21:27:53.679064 29057 net.cpp:150] Setting up conv1
I0210 21:27:53.679077 29057 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:27:53.679085 29057 net.cpp:165] Memory required for data: 4922800
I0210 21:27:53.679103 29057 layer_factory.hpp:77] Creating layer pool1
I0210 21:27:53.679123 29057 net.cpp:106] Creating Layer pool1
I0210 21:27:53.679157 29057 net.cpp:454] pool1 <- conv1
I0210 21:27:53.679175 29057 net.cpp:411] pool1 -> pool1
I0210 21:27:53.679384 29057 net.cpp:150] Setting up pool1
I0210 21:27:53.679399 29057 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:27:53.679404 29057 net.cpp:165] Memory required for data: 6074800
I0210 21:27:53.679410 29057 layer_factory.hpp:77] Creating layer conv2
I0210 21:27:53.679427 29057 net.cpp:106] Creating Layer conv2
I0210 21:27:53.679435 29057 net.cpp:454] conv2 <- pool1
I0210 21:27:53.679445 29057 net.cpp:411] conv2 -> conv2
I0210 21:27:53.679885 29057 net.cpp:150] Setting up conv2
I0210 21:27:53.679908 29057 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:27:53.679913 29057 net.cpp:165] Memory required for data: 7354800
I0210 21:27:53.679924 29057 layer_factory.hpp:77] Creating layer pool2
I0210 21:27:53.679935 29057 net.cpp:106] Creating Layer pool2
I0210 21:27:53.679946 29057 net.cpp:454] pool2 <- conv2
I0210 21:27:53.679961 29057 net.cpp:411] pool2 -> pool2
I0210 21:27:53.680163 29057 net.cpp:150] Setting up pool2
I0210 21:27:53.680176 29057 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:27:53.680182 29057 net.cpp:165] Memory required for data: 7674800
I0210 21:27:53.680188 29057 layer_factory.hpp:77] Creating layer ip1
I0210 21:27:53.680198 29057 net.cpp:106] Creating Layer ip1
I0210 21:27:53.680204 29057 net.cpp:454] ip1 <- pool2
I0210 21:27:53.680217 29057 net.cpp:411] ip1 -> ip1
I0210 21:27:53.685211 29057 net.cpp:150] Setting up ip1
I0210 21:27:53.685228 29057 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:27:53.685235 29057 net.cpp:165] Memory required for data: 7874800
I0210 21:27:53.685247 29057 layer_factory.hpp:77] Creating layer relu1
I0210 21:27:53.685259 29057 net.cpp:106] Creating Layer relu1
I0210 21:27:53.685266 29057 net.cpp:454] relu1 <- ip1
I0210 21:27:53.685277 29057 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:27:53.685288 29057 net.cpp:150] Setting up relu1
I0210 21:27:53.685297 29057 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:27:53.685303 29057 net.cpp:165] Memory required for data: 8074800
I0210 21:27:53.685309 29057 layer_factory.hpp:77] Creating layer ip2
I0210 21:27:53.685319 29057 net.cpp:106] Creating Layer ip2
I0210 21:27:53.685325 29057 net.cpp:454] ip2 <- ip1
I0210 21:27:53.685338 29057 net.cpp:411] ip2 -> ip2
I0210 21:27:53.685493 29057 net.cpp:150] Setting up ip2
I0210 21:27:53.685505 29057 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:27:53.685511 29057 net.cpp:165] Memory required for data: 8078800
I0210 21:27:53.685520 29057 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:27:53.685528 29057 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:27:53.685535 29057 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:27:53.685546 29057 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:27:53.685556 29057 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:27:53.685622 29057 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:27:53.685647 29057 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:27:53.685662 29057 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:27:53.685672 29057 net.cpp:165] Memory required for data: 8086800
I0210 21:27:53.685684 29057 layer_factory.hpp:77] Creating layer accuracy
I0210 21:27:53.685709 29057 net.cpp:106] Creating Layer accuracy
I0210 21:27:53.685724 29057 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:27:53.685737 29057 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:27:53.685753 29057 net.cpp:411] accuracy -> accuracy
I0210 21:27:53.685788 29057 net.cpp:150] Setting up accuracy
I0210 21:27:53.685804 29057 net.cpp:157] Top shape: (1)
I0210 21:27:53.685816 29057 net.cpp:165] Memory required for data: 8086804
I0210 21:27:53.685827 29057 layer_factory.hpp:77] Creating layer loss
I0210 21:27:53.685842 29057 net.cpp:106] Creating Layer loss
I0210 21:27:53.685856 29057 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:27:53.685870 29057 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:27:53.685888 29057 net.cpp:411] loss -> loss
I0210 21:27:53.685937 29057 layer_factory.hpp:77] Creating layer loss
I0210 21:27:53.686080 29057 net.cpp:150] Setting up loss
I0210 21:27:53.686094 29057 net.cpp:157] Top shape: (1)
I0210 21:27:53.686100 29057 net.cpp:160]     with loss weight 1
I0210 21:27:53.686110 29057 net.cpp:165] Memory required for data: 8086808
I0210 21:27:53.686121 29057 net.cpp:226] loss needs backward computation.
I0210 21:27:53.686130 29057 net.cpp:228] accuracy does not need backward computation.
I0210 21:27:53.686136 29057 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:27:53.686141 29057 net.cpp:226] ip2 needs backward computation.
I0210 21:27:53.686146 29057 net.cpp:226] relu1 needs backward computation.
I0210 21:27:53.686152 29057 net.cpp:226] ip1 needs backward computation.
I0210 21:27:53.686157 29057 net.cpp:226] pool2 needs backward computation.
I0210 21:27:53.686163 29057 net.cpp:226] conv2 needs backward computation.
I0210 21:27:53.686168 29057 net.cpp:226] pool1 needs backward computation.
I0210 21:27:53.686174 29057 net.cpp:226] conv1 needs backward computation.
I0210 21:27:53.686180 29057 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:27:53.686187 29057 net.cpp:228] mnist does not need backward computation.
I0210 21:27:53.686192 29057 net.cpp:270] This network produces output accuracy
I0210 21:27:53.686197 29057 net.cpp:270] This network produces output loss
I0210 21:27:53.686215 29057 net.cpp:283] Network initialization done.
I0210 21:27:53.686257 29057 solver.cpp:60] Solver scaffolding done.
I0210 21:27:53.822036 29057 parallel.cpp:405] GPUs pairs 2:3, 4:5, 6:7, 4:6, 2:4
I0210 21:27:54.104553 29057 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:54.501412 29057 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:54.592703 29057 parallel.cpp:234] GPU 4 does not have p2p access to GPU 2
I0210 21:27:55.204640 29057 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:55.777987 29057 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:56.347867 29057 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:56.473448 29057 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:27:56.645844 29057 solver.cpp:311] Solving LeNet
I0210 21:27:56.645892 29057 solver.cpp:312] Learning Rate Policy: inv
I0210 21:27:56.646764 29057 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:27:57.675220 29057 solver.cpp:432]     Test net output #0: accuracy = 0.126
I0210 21:27:57.675277 29057 solver.cpp:432]     Test net output #1: loss = 2.37563 (* 1 = 2.37563 loss)
I0210 21:27:57.689965 29057 solver.cpp:250] Iteration 0, loss = 2.4231 Time spent communicating 0.490752
I0210 21:27:57.689997 29057 solver.cpp:267]     Train net output #0: loss = 2.4231 (* 1 = 2.4231 loss)
I0210 21:27:57.702769 29057 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:27:58.695776 29057 solver.cpp:250] Iteration 100, loss = 0.305486 Time spent communicating 209.205
I0210 21:27:58.695824 29057 solver.cpp:267]     Train net output #0: loss = 0.305486 (* 1 = 0.305486 loss)
I0210 21:27:58.697921 29057 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:27:59.700536 29057 solver.cpp:250] Iteration 200, loss = 0.167796 Time spent communicating 199.326
I0210 21:27:59.700579 29057 solver.cpp:267]     Train net output #0: loss = 0.167796 (* 1 = 0.167796 loss)
I0210 21:27:59.702342 29057 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:28:00.699858 29057 solver.cpp:250] Iteration 300, loss = 0.0600362 Time spent communicating 206.79
I0210 21:28:00.699898 29057 solver.cpp:267]     Train net output #0: loss = 0.0600364 (* 1 = 0.0600364 loss)
I0210 21:28:00.701740 29057 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:28:01.703692 29057 solver.cpp:250] Iteration 400, loss = 0.410893 Time spent communicating 225.051
I0210 21:28:01.703734 29057 solver.cpp:267]     Train net output #0: loss = 0.410893 (* 1 = 0.410893 loss)
I0210 21:28:01.706346 29057 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:28:02.704119 29057 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:28:02.736930 29057 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:28:02.763630 29057 solver.cpp:344] Iteration 500, loss = 0.258536
I0210 21:28:02.763669 29057 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:28:03.726416 29057 solver.cpp:432]     Test net output #0: accuracy = 0.9735
I0210 21:28:03.726469 29057 solver.cpp:432]     Test net output #1: loss = 0.0814019 (* 1 = 0.0814019 loss)
I0210 21:28:03.726482 29057 solver.cpp:349] Optimization Done.
I0210 21:28:03.726608 29057 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0210 21:28:03.750128 29057 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:28:03.771266 29057 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:28:03.791985 29057 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:28:03.812187 29057 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0210 21:28:03.830399 29057 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0210 21:28:03.830896 29057 caffe.cpp:215] Optimization Done.
