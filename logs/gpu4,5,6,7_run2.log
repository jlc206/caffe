I0210 21:25:47.285836 28839 caffe.cpp:184] Using GPUs 4, 5, 6, 7
I0210 21:25:47.743517 28839 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 4
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:25:47.744961 28839 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:25:47.746037 28839 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:25:47.746065 28839 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:25:47.746206 28839 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 32
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:25:47.746295 28839 layer_factory.hpp:77] Creating layer mnist
I0210 21:25:47.747270 28839 net.cpp:106] Creating Layer mnist
I0210 21:25:47.747308 28839 net.cpp:411] mnist -> data
I0210 21:25:47.747421 28839 net.cpp:411] mnist -> label
I0210 21:25:47.752635 28843 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:25:47.771627 28839 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:47.772958 28839 net.cpp:150] Setting up mnist
I0210 21:25:47.772981 28839 net.cpp:157] Top shape: 32 1 28 28 (25088)
I0210 21:25:47.772996 28839 net.cpp:157] Top shape: 32 (32)
I0210 21:25:47.773005 28839 net.cpp:165] Memory required for data: 100480
I0210 21:25:47.773023 28839 layer_factory.hpp:77] Creating layer conv1
I0210 21:25:47.773059 28839 net.cpp:106] Creating Layer conv1
I0210 21:25:47.773072 28839 net.cpp:454] conv1 <- data
I0210 21:25:47.773108 28839 net.cpp:411] conv1 -> conv1
I0210 21:25:47.774372 28839 net.cpp:150] Setting up conv1
I0210 21:25:47.774387 28839 net.cpp:157] Top shape: 32 20 24 24 (368640)
I0210 21:25:47.774392 28839 net.cpp:165] Memory required for data: 1575040
I0210 21:25:47.774410 28839 layer_factory.hpp:77] Creating layer pool1
I0210 21:25:47.774427 28839 net.cpp:106] Creating Layer pool1
I0210 21:25:47.774435 28839 net.cpp:454] pool1 <- conv1
I0210 21:25:47.774442 28839 net.cpp:411] pool1 -> pool1
I0210 21:25:47.774641 28839 net.cpp:150] Setting up pool1
I0210 21:25:47.774653 28839 net.cpp:157] Top shape: 32 20 12 12 (92160)
I0210 21:25:47.774659 28839 net.cpp:165] Memory required for data: 1943680
I0210 21:25:47.774664 28839 layer_factory.hpp:77] Creating layer conv2
I0210 21:25:47.774679 28839 net.cpp:106] Creating Layer conv2
I0210 21:25:47.774688 28839 net.cpp:454] conv2 <- pool1
I0210 21:25:47.774698 28839 net.cpp:411] conv2 -> conv2
I0210 21:25:47.775210 28839 net.cpp:150] Setting up conv2
I0210 21:25:47.775223 28839 net.cpp:157] Top shape: 32 50 8 8 (102400)
I0210 21:25:47.775228 28839 net.cpp:165] Memory required for data: 2353280
I0210 21:25:47.775240 28839 layer_factory.hpp:77] Creating layer pool2
I0210 21:25:47.775254 28839 net.cpp:106] Creating Layer pool2
I0210 21:25:47.775260 28839 net.cpp:454] pool2 <- conv2
I0210 21:25:47.775269 28839 net.cpp:411] pool2 -> pool2
I0210 21:25:47.775447 28839 net.cpp:150] Setting up pool2
I0210 21:25:47.775462 28839 net.cpp:157] Top shape: 32 50 4 4 (25600)
I0210 21:25:47.775467 28839 net.cpp:165] Memory required for data: 2455680
I0210 21:25:47.775472 28839 layer_factory.hpp:77] Creating layer ip1
I0210 21:25:47.775490 28839 net.cpp:106] Creating Layer ip1
I0210 21:25:47.775497 28839 net.cpp:454] ip1 <- pool2
I0210 21:25:47.775508 28839 net.cpp:411] ip1 -> ip1
I0210 21:25:47.777847 28844 blocking_queue.cpp:50] Waiting for data
I0210 21:25:47.780076 28839 net.cpp:150] Setting up ip1
I0210 21:25:47.780093 28839 net.cpp:157] Top shape: 32 500 (16000)
I0210 21:25:47.780097 28839 net.cpp:165] Memory required for data: 2519680
I0210 21:25:47.780109 28839 layer_factory.hpp:77] Creating layer relu1
I0210 21:25:47.780124 28839 net.cpp:106] Creating Layer relu1
I0210 21:25:47.780131 28839 net.cpp:454] relu1 <- ip1
I0210 21:25:47.780140 28839 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:25:47.780153 28839 net.cpp:150] Setting up relu1
I0210 21:25:47.780160 28839 net.cpp:157] Top shape: 32 500 (16000)
I0210 21:25:47.780165 28839 net.cpp:165] Memory required for data: 2583680
I0210 21:25:47.780171 28839 layer_factory.hpp:77] Creating layer ip2
I0210 21:25:47.780180 28839 net.cpp:106] Creating Layer ip2
I0210 21:25:47.780186 28839 net.cpp:454] ip2 <- ip1
I0210 21:25:47.780197 28839 net.cpp:411] ip2 -> ip2
I0210 21:25:47.781108 28839 net.cpp:150] Setting up ip2
I0210 21:25:47.781122 28839 net.cpp:157] Top shape: 32 10 (320)
I0210 21:25:47.781126 28839 net.cpp:165] Memory required for data: 2584960
I0210 21:25:47.781136 28839 layer_factory.hpp:77] Creating layer loss
I0210 21:25:47.781149 28839 net.cpp:106] Creating Layer loss
I0210 21:25:47.781154 28839 net.cpp:454] loss <- ip2
I0210 21:25:47.781162 28839 net.cpp:454] loss <- label
I0210 21:25:47.781169 28839 net.cpp:411] loss -> loss
I0210 21:25:47.781198 28839 layer_factory.hpp:77] Creating layer loss
I0210 21:25:47.781325 28839 net.cpp:150] Setting up loss
I0210 21:25:47.781340 28839 net.cpp:157] Top shape: (1)
I0210 21:25:47.781347 28839 net.cpp:160]     with loss weight 1
I0210 21:25:47.781383 28839 net.cpp:165] Memory required for data: 2584964
I0210 21:25:47.781391 28839 net.cpp:226] loss needs backward computation.
I0210 21:25:47.781399 28839 net.cpp:226] ip2 needs backward computation.
I0210 21:25:47.781404 28839 net.cpp:226] relu1 needs backward computation.
I0210 21:25:47.781409 28839 net.cpp:226] ip1 needs backward computation.
I0210 21:25:47.781414 28839 net.cpp:226] pool2 needs backward computation.
I0210 21:25:47.781419 28839 net.cpp:226] conv2 needs backward computation.
I0210 21:25:47.781427 28839 net.cpp:226] pool1 needs backward computation.
I0210 21:25:47.781433 28839 net.cpp:226] conv1 needs backward computation.
I0210 21:25:47.781438 28839 net.cpp:228] mnist does not need backward computation.
I0210 21:25:47.781443 28839 net.cpp:270] This network produces output loss
I0210 21:25:47.781458 28839 net.cpp:283] Network initialization done.
I0210 21:25:47.782486 28839 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:25:47.782526 28839 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:25:47.782706 28839 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:25:47.782805 28839 layer_factory.hpp:77] Creating layer mnist
I0210 21:25:47.782956 28839 net.cpp:106] Creating Layer mnist
I0210 21:25:47.782971 28839 net.cpp:411] mnist -> data
I0210 21:25:47.782986 28839 net.cpp:411] mnist -> label
I0210 21:25:47.787761 28845 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:25:47.788125 28839 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:25:47.789634 28839 net.cpp:150] Setting up mnist
I0210 21:25:47.789650 28839 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:25:47.789657 28839 net.cpp:157] Top shape: 100 (100)
I0210 21:25:47.789665 28839 net.cpp:165] Memory required for data: 314000
I0210 21:25:47.789675 28839 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:25:47.789688 28839 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:25:47.789695 28839 net.cpp:454] label_mnist_1_split <- label
I0210 21:25:47.789703 28839 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:25:47.789713 28839 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:25:47.789818 28839 net.cpp:150] Setting up label_mnist_1_split
I0210 21:25:47.789829 28839 net.cpp:157] Top shape: 100 (100)
I0210 21:25:47.789836 28839 net.cpp:157] Top shape: 100 (100)
I0210 21:25:47.789841 28839 net.cpp:165] Memory required for data: 314800
I0210 21:25:47.789847 28839 layer_factory.hpp:77] Creating layer conv1
I0210 21:25:47.789878 28839 net.cpp:106] Creating Layer conv1
I0210 21:25:47.789885 28839 net.cpp:454] conv1 <- data
I0210 21:25:47.789902 28839 net.cpp:411] conv1 -> conv1
I0210 21:25:47.790141 28839 net.cpp:150] Setting up conv1
I0210 21:25:47.790154 28839 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:25:47.790159 28839 net.cpp:165] Memory required for data: 4922800
I0210 21:25:47.790172 28839 layer_factory.hpp:77] Creating layer pool1
I0210 21:25:47.790204 28839 net.cpp:106] Creating Layer pool1
I0210 21:25:47.790210 28839 net.cpp:454] pool1 <- conv1
I0210 21:25:47.790218 28839 net.cpp:411] pool1 -> pool1
I0210 21:25:47.790369 28839 net.cpp:150] Setting up pool1
I0210 21:25:47.790380 28839 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:25:47.790385 28839 net.cpp:165] Memory required for data: 6074800
I0210 21:25:47.790391 28839 layer_factory.hpp:77] Creating layer conv2
I0210 21:25:47.790406 28839 net.cpp:106] Creating Layer conv2
I0210 21:25:47.790413 28839 net.cpp:454] conv2 <- pool1
I0210 21:25:47.790424 28839 net.cpp:411] conv2 -> conv2
I0210 21:25:47.790889 28839 net.cpp:150] Setting up conv2
I0210 21:25:47.790904 28839 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:25:47.790910 28839 net.cpp:165] Memory required for data: 7354800
I0210 21:25:47.790920 28839 layer_factory.hpp:77] Creating layer pool2
I0210 21:25:47.790932 28839 net.cpp:106] Creating Layer pool2
I0210 21:25:47.790937 28839 net.cpp:454] pool2 <- conv2
I0210 21:25:47.790945 28839 net.cpp:411] pool2 -> pool2
I0210 21:25:47.791095 28839 net.cpp:150] Setting up pool2
I0210 21:25:47.791105 28839 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:25:47.791111 28839 net.cpp:165] Memory required for data: 7674800
I0210 21:25:47.791116 28839 layer_factory.hpp:77] Creating layer ip1
I0210 21:25:47.791128 28839 net.cpp:106] Creating Layer ip1
I0210 21:25:47.791136 28839 net.cpp:454] ip1 <- pool2
I0210 21:25:47.791146 28839 net.cpp:411] ip1 -> ip1
I0210 21:25:47.796272 28839 net.cpp:150] Setting up ip1
I0210 21:25:47.796304 28839 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:25:47.796313 28839 net.cpp:165] Memory required for data: 7874800
I0210 21:25:47.796341 28839 layer_factory.hpp:77] Creating layer relu1
I0210 21:25:47.796355 28839 net.cpp:106] Creating Layer relu1
I0210 21:25:47.796362 28839 net.cpp:454] relu1 <- ip1
I0210 21:25:47.796370 28839 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:25:47.796382 28839 net.cpp:150] Setting up relu1
I0210 21:25:47.796389 28839 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:25:47.796394 28839 net.cpp:165] Memory required for data: 8074800
I0210 21:25:47.796399 28839 layer_factory.hpp:77] Creating layer ip2
I0210 21:25:47.796414 28839 net.cpp:106] Creating Layer ip2
I0210 21:25:47.796422 28839 net.cpp:454] ip2 <- ip1
I0210 21:25:47.796432 28839 net.cpp:411] ip2 -> ip2
I0210 21:25:47.796617 28839 net.cpp:150] Setting up ip2
I0210 21:25:47.796636 28839 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:47.796644 28839 net.cpp:165] Memory required for data: 8078800
I0210 21:25:47.796671 28839 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:25:47.796681 28839 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:25:47.796687 28839 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:25:47.796695 28839 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:25:47.796705 28839 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:25:47.796749 28839 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:25:47.796758 28839 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:47.796766 28839 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:47.796771 28839 net.cpp:165] Memory required for data: 8086800
I0210 21:25:47.796777 28839 layer_factory.hpp:77] Creating layer accuracy
I0210 21:25:47.796794 28839 net.cpp:106] Creating Layer accuracy
I0210 21:25:47.796802 28839 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:25:47.796808 28839 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:25:47.796816 28839 net.cpp:411] accuracy -> accuracy
I0210 21:25:47.796831 28839 net.cpp:150] Setting up accuracy
I0210 21:25:47.796839 28839 net.cpp:157] Top shape: (1)
I0210 21:25:47.796844 28839 net.cpp:165] Memory required for data: 8086804
I0210 21:25:47.796849 28839 layer_factory.hpp:77] Creating layer loss
I0210 21:25:47.796860 28839 net.cpp:106] Creating Layer loss
I0210 21:25:47.796867 28839 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:25:47.796874 28839 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:25:47.796881 28839 net.cpp:411] loss -> loss
I0210 21:25:47.796924 28839 layer_factory.hpp:77] Creating layer loss
I0210 21:25:47.797019 28839 net.cpp:150] Setting up loss
I0210 21:25:47.797029 28839 net.cpp:157] Top shape: (1)
I0210 21:25:47.797034 28839 net.cpp:160]     with loss weight 1
I0210 21:25:47.797049 28839 net.cpp:165] Memory required for data: 8086808
I0210 21:25:47.797055 28839 net.cpp:226] loss needs backward computation.
I0210 21:25:47.797062 28839 net.cpp:228] accuracy does not need backward computation.
I0210 21:25:47.797068 28839 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:25:47.797075 28839 net.cpp:226] ip2 needs backward computation.
I0210 21:25:47.797080 28839 net.cpp:226] relu1 needs backward computation.
I0210 21:25:47.797085 28839 net.cpp:226] ip1 needs backward computation.
I0210 21:25:47.797089 28839 net.cpp:226] pool2 needs backward computation.
I0210 21:25:47.797094 28839 net.cpp:226] conv2 needs backward computation.
I0210 21:25:47.797101 28839 net.cpp:226] pool1 needs backward computation.
I0210 21:25:47.797106 28839 net.cpp:226] conv1 needs backward computation.
I0210 21:25:47.797112 28839 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:25:47.797118 28839 net.cpp:228] mnist does not need backward computation.
I0210 21:25:47.797123 28839 net.cpp:270] This network produces output accuracy
I0210 21:25:47.797128 28839 net.cpp:270] This network produces output loss
I0210 21:25:47.797147 28839 net.cpp:283] Network initialization done.
I0210 21:25:47.797199 28839 solver.cpp:60] Solver scaffolding done.
I0210 21:25:47.824193 28839 parallel.cpp:405] GPUs pairs 4:5, 6:7, 4:6
I0210 21:25:48.053571 28839 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:48.433820 28839 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:48.889297 28839 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:49.077168 28839 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:25:49.077695 28839 solver.cpp:311] Solving LeNet
I0210 21:25:49.077733 28839 solver.cpp:312] Learning Rate Policy: inv
I0210 21:25:49.078379 28839 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:25:50.055749 28839 solver.cpp:432]     Test net output #0: accuracy = 0.0799
I0210 21:25:50.055804 28839 solver.cpp:432]     Test net output #1: loss = 2.3179 (* 1 = 2.3179 loss)
I0210 21:25:50.068804 28839 solver.cpp:250] Iteration 0, loss = 2.2839 Time spent communicating 0.363808
I0210 21:25:50.068830 28839 solver.cpp:267]     Train net output #0: loss = 2.2839 (* 1 = 2.2839 loss)
I0210 21:25:50.072737 28839 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:25:51.090001 28839 solver.cpp:250] Iteration 100, loss = 0.384399 Time spent communicating 177.389
I0210 21:25:51.090035 28839 solver.cpp:267]     Train net output #0: loss = 0.384399 (* 1 = 0.384399 loss)
I0210 21:25:51.093278 28839 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:25:52.128376 28839 solver.cpp:250] Iteration 200, loss = 0.182859 Time spent communicating 179.466
I0210 21:25:52.128409 28839 solver.cpp:267]     Train net output #0: loss = 0.182859 (* 1 = 0.182859 loss)
I0210 21:25:52.129214 28839 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:25:53.165715 28839 solver.cpp:250] Iteration 300, loss = 0.165029 Time spent communicating 175.908
I0210 21:25:53.165743 28839 solver.cpp:267]     Train net output #0: loss = 0.165029 (* 1 = 0.165029 loss)
I0210 21:25:53.168972 28839 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:25:54.180562 28839 solver.cpp:250] Iteration 400, loss = 0.389454 Time spent communicating 145.969
I0210 21:25:54.180608 28839 solver.cpp:267]     Train net output #0: loss = 0.389454 (* 1 = 0.389454 loss)
I0210 21:25:54.182443 28839 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:25:55.248966 28839 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:25:55.282827 28839 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:25:55.311131 28839 solver.cpp:344] Iteration 500, loss = 0.182925
I0210 21:25:55.311199 28839 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:25:56.262114 28839 solver.cpp:432]     Test net output #0: accuracy = 0.9755
I0210 21:25:56.262159 28839 solver.cpp:432]     Test net output #1: loss = 0.0784441 (* 1 = 0.0784441 loss)
I0210 21:25:56.262166 28839 solver.cpp:349] Optimization Done.
I0210 21:25:56.262220 28839 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:25:56.281682 28839 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:25:56.298007 28839 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:25:56.315049 28839 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0210 21:25:56.315532 28839 caffe.cpp:215] Optimization Done.
