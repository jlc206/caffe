I0210 21:24:45.874652 28772 caffe.cpp:184] Using GPUs 5, 6, 7
I0210 21:24:46.379309 28772 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 5
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:24:46.380873 28772 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:24:46.382235 28772 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:24:46.382268 28772 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:24:46.382521 28772 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 43
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:24:46.382664 28772 layer_factory.hpp:77] Creating layer mnist
I0210 21:24:46.383535 28772 net.cpp:106] Creating Layer mnist
I0210 21:24:46.383556 28772 net.cpp:411] mnist -> data
I0210 21:24:46.383594 28772 net.cpp:411] mnist -> label
I0210 21:24:46.389209 28776 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:24:46.409106 28772 data_layer.cpp:41] output data size: 43,1,28,28
I0210 21:24:46.410483 28772 net.cpp:150] Setting up mnist
I0210 21:24:46.410506 28772 net.cpp:157] Top shape: 43 1 28 28 (33712)
I0210 21:24:46.410513 28772 net.cpp:157] Top shape: 43 (43)
I0210 21:24:46.410517 28772 net.cpp:165] Memory required for data: 135020
I0210 21:24:46.410531 28772 layer_factory.hpp:77] Creating layer conv1
I0210 21:24:46.410576 28772 net.cpp:106] Creating Layer conv1
I0210 21:24:46.410591 28772 net.cpp:454] conv1 <- data
I0210 21:24:46.410614 28772 net.cpp:411] conv1 -> conv1
I0210 21:24:46.412178 28772 net.cpp:150] Setting up conv1
I0210 21:24:46.412192 28772 net.cpp:157] Top shape: 43 20 24 24 (495360)
I0210 21:24:46.412197 28772 net.cpp:165] Memory required for data: 2116460
I0210 21:24:46.412214 28772 layer_factory.hpp:77] Creating layer pool1
I0210 21:24:46.412231 28772 net.cpp:106] Creating Layer pool1
I0210 21:24:46.412238 28772 net.cpp:454] pool1 <- conv1
I0210 21:24:46.412250 28772 net.cpp:411] pool1 -> pool1
I0210 21:24:46.412451 28772 net.cpp:150] Setting up pool1
I0210 21:24:46.412463 28772 net.cpp:157] Top shape: 43 20 12 12 (123840)
I0210 21:24:46.412469 28772 net.cpp:165] Memory required for data: 2611820
I0210 21:24:46.412474 28772 layer_factory.hpp:77] Creating layer conv2
I0210 21:24:46.412490 28772 net.cpp:106] Creating Layer conv2
I0210 21:24:46.412497 28772 net.cpp:454] conv2 <- pool1
I0210 21:24:46.412506 28772 net.cpp:411] conv2 -> conv2
I0210 21:24:46.412968 28772 net.cpp:150] Setting up conv2
I0210 21:24:46.412982 28772 net.cpp:157] Top shape: 43 50 8 8 (137600)
I0210 21:24:46.412987 28772 net.cpp:165] Memory required for data: 3162220
I0210 21:24:46.412997 28772 layer_factory.hpp:77] Creating layer pool2
I0210 21:24:46.413007 28772 net.cpp:106] Creating Layer pool2
I0210 21:24:46.413015 28772 net.cpp:454] pool2 <- conv2
I0210 21:24:46.413023 28772 net.cpp:411] pool2 -> pool2
I0210 21:24:46.413172 28772 net.cpp:150] Setting up pool2
I0210 21:24:46.413182 28772 net.cpp:157] Top shape: 43 50 4 4 (34400)
I0210 21:24:46.413187 28772 net.cpp:165] Memory required for data: 3299820
I0210 21:24:46.413193 28772 layer_factory.hpp:77] Creating layer ip1
I0210 21:24:46.413208 28772 net.cpp:106] Creating Layer ip1
I0210 21:24:46.413215 28772 net.cpp:454] ip1 <- pool2
I0210 21:24:46.413228 28772 net.cpp:411] ip1 -> ip1
I0210 21:24:46.414650 28777 blocking_queue.cpp:50] Waiting for data
I0210 21:24:46.417925 28772 net.cpp:150] Setting up ip1
I0210 21:24:46.417942 28772 net.cpp:157] Top shape: 43 500 (21500)
I0210 21:24:46.417946 28772 net.cpp:165] Memory required for data: 3385820
I0210 21:24:46.417958 28772 layer_factory.hpp:77] Creating layer relu1
I0210 21:24:46.417968 28772 net.cpp:106] Creating Layer relu1
I0210 21:24:46.417973 28772 net.cpp:454] relu1 <- ip1
I0210 21:24:46.417979 28772 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:24:46.417991 28772 net.cpp:150] Setting up relu1
I0210 21:24:46.417999 28772 net.cpp:157] Top shape: 43 500 (21500)
I0210 21:24:46.418004 28772 net.cpp:165] Memory required for data: 3471820
I0210 21:24:46.418009 28772 layer_factory.hpp:77] Creating layer ip2
I0210 21:24:46.418021 28772 net.cpp:106] Creating Layer ip2
I0210 21:24:46.418027 28772 net.cpp:454] ip2 <- ip1
I0210 21:24:46.418038 28772 net.cpp:411] ip2 -> ip2
I0210 21:24:46.418980 28772 net.cpp:150] Setting up ip2
I0210 21:24:46.418994 28772 net.cpp:157] Top shape: 43 10 (430)
I0210 21:24:46.418999 28772 net.cpp:165] Memory required for data: 3473540
I0210 21:24:46.419008 28772 layer_factory.hpp:77] Creating layer loss
I0210 21:24:46.419020 28772 net.cpp:106] Creating Layer loss
I0210 21:24:46.419028 28772 net.cpp:454] loss <- ip2
I0210 21:24:46.419034 28772 net.cpp:454] loss <- label
I0210 21:24:46.419042 28772 net.cpp:411] loss -> loss
I0210 21:24:46.419062 28772 layer_factory.hpp:77] Creating layer loss
I0210 21:24:46.419170 28772 net.cpp:150] Setting up loss
I0210 21:24:46.419183 28772 net.cpp:157] Top shape: (1)
I0210 21:24:46.419188 28772 net.cpp:160]     with loss weight 1
I0210 21:24:46.419221 28772 net.cpp:165] Memory required for data: 3473544
I0210 21:24:46.419231 28772 net.cpp:226] loss needs backward computation.
I0210 21:24:46.419239 28772 net.cpp:226] ip2 needs backward computation.
I0210 21:24:46.419244 28772 net.cpp:226] relu1 needs backward computation.
I0210 21:24:46.419248 28772 net.cpp:226] ip1 needs backward computation.
I0210 21:24:46.419253 28772 net.cpp:226] pool2 needs backward computation.
I0210 21:24:46.419257 28772 net.cpp:226] conv2 needs backward computation.
I0210 21:24:46.419266 28772 net.cpp:226] pool1 needs backward computation.
I0210 21:24:46.419272 28772 net.cpp:226] conv1 needs backward computation.
I0210 21:24:46.419277 28772 net.cpp:228] mnist does not need backward computation.
I0210 21:24:46.419282 28772 net.cpp:270] This network produces output loss
I0210 21:24:46.419297 28772 net.cpp:283] Network initialization done.
I0210 21:24:46.420469 28772 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:24:46.420534 28772 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:24:46.420716 28772 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:24:46.420819 28772 layer_factory.hpp:77] Creating layer mnist
I0210 21:24:46.420972 28772 net.cpp:106] Creating Layer mnist
I0210 21:24:46.420986 28772 net.cpp:411] mnist -> data
I0210 21:24:46.420999 28772 net.cpp:411] mnist -> label
I0210 21:24:46.426069 28778 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:24:46.426395 28772 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:24:46.428133 28772 net.cpp:150] Setting up mnist
I0210 21:24:46.428151 28772 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:24:46.428159 28772 net.cpp:157] Top shape: 100 (100)
I0210 21:24:46.428164 28772 net.cpp:165] Memory required for data: 314000
I0210 21:24:46.428170 28772 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:24:46.428184 28772 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:24:46.428191 28772 net.cpp:454] label_mnist_1_split <- label
I0210 21:24:46.428215 28772 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:24:46.428227 28772 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:24:46.428442 28772 net.cpp:150] Setting up label_mnist_1_split
I0210 21:24:46.428457 28772 net.cpp:157] Top shape: 100 (100)
I0210 21:24:46.428464 28772 net.cpp:157] Top shape: 100 (100)
I0210 21:24:46.428472 28772 net.cpp:165] Memory required for data: 314800
I0210 21:24:46.428478 28772 layer_factory.hpp:77] Creating layer conv1
I0210 21:24:46.428494 28772 net.cpp:106] Creating Layer conv1
I0210 21:24:46.428503 28772 net.cpp:454] conv1 <- data
I0210 21:24:46.428517 28772 net.cpp:411] conv1 -> conv1
I0210 21:24:46.428834 28772 net.cpp:150] Setting up conv1
I0210 21:24:46.428850 28772 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:24:46.428858 28772 net.cpp:165] Memory required for data: 4922800
I0210 21:24:46.428880 28772 layer_factory.hpp:77] Creating layer pool1
I0210 21:24:46.428939 28772 net.cpp:106] Creating Layer pool1
I0210 21:24:46.428956 28772 net.cpp:454] pool1 <- conv1
I0210 21:24:46.428980 28772 net.cpp:411] pool1 -> pool1
I0210 21:24:46.429241 28772 net.cpp:150] Setting up pool1
I0210 21:24:46.429258 28772 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:24:46.429265 28772 net.cpp:165] Memory required for data: 6074800
I0210 21:24:46.429272 28772 layer_factory.hpp:77] Creating layer conv2
I0210 21:24:46.429291 28772 net.cpp:106] Creating Layer conv2
I0210 21:24:46.429299 28772 net.cpp:454] conv2 <- pool1
I0210 21:24:46.429311 28772 net.cpp:411] conv2 -> conv2
I0210 21:24:46.429862 28772 net.cpp:150] Setting up conv2
I0210 21:24:46.429877 28772 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:24:46.429883 28772 net.cpp:165] Memory required for data: 7354800
I0210 21:24:46.429903 28772 layer_factory.hpp:77] Creating layer pool2
I0210 21:24:46.429927 28772 net.cpp:106] Creating Layer pool2
I0210 21:24:46.429942 28772 net.cpp:454] pool2 <- conv2
I0210 21:24:46.429961 28772 net.cpp:411] pool2 -> pool2
I0210 21:24:46.430209 28772 net.cpp:150] Setting up pool2
I0210 21:24:46.430225 28772 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:24:46.430233 28772 net.cpp:165] Memory required for data: 7674800
I0210 21:24:46.430239 28772 layer_factory.hpp:77] Creating layer ip1
I0210 21:24:46.430251 28772 net.cpp:106] Creating Layer ip1
I0210 21:24:46.430259 28772 net.cpp:454] ip1 <- pool2
I0210 21:24:46.430274 28772 net.cpp:411] ip1 -> ip1
I0210 21:24:46.436872 28772 net.cpp:150] Setting up ip1
I0210 21:24:46.436908 28772 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:24:46.436916 28772 net.cpp:165] Memory required for data: 7874800
I0210 21:24:46.436935 28772 layer_factory.hpp:77] Creating layer relu1
I0210 21:24:46.436950 28772 net.cpp:106] Creating Layer relu1
I0210 21:24:46.436962 28772 net.cpp:454] relu1 <- ip1
I0210 21:24:46.436975 28772 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:24:46.436991 28772 net.cpp:150] Setting up relu1
I0210 21:24:46.437003 28772 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:24:46.437011 28772 net.cpp:165] Memory required for data: 8074800
I0210 21:24:46.437018 28772 layer_factory.hpp:77] Creating layer ip2
I0210 21:24:46.437038 28772 net.cpp:106] Creating Layer ip2
I0210 21:24:46.437048 28772 net.cpp:454] ip2 <- ip1
I0210 21:24:46.437062 28772 net.cpp:411] ip2 -> ip2
I0210 21:24:46.437314 28772 net.cpp:150] Setting up ip2
I0210 21:24:46.437341 28772 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:24:46.437350 28772 net.cpp:165] Memory required for data: 8078800
I0210 21:24:46.437363 28772 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:24:46.437377 28772 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:24:46.437387 28772 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:24:46.437399 28772 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:24:46.437414 28772 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:24:46.437484 28772 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:24:46.437500 28772 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:24:46.437510 28772 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:24:46.437520 28772 net.cpp:165] Memory required for data: 8086800
I0210 21:24:46.437527 28772 layer_factory.hpp:77] Creating layer accuracy
I0210 21:24:46.437546 28772 net.cpp:106] Creating Layer accuracy
I0210 21:24:46.437557 28772 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:24:46.437567 28772 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:24:46.437582 28772 net.cpp:411] accuracy -> accuracy
I0210 21:24:46.437607 28772 net.cpp:150] Setting up accuracy
I0210 21:24:46.437619 28772 net.cpp:157] Top shape: (1)
I0210 21:24:46.437628 28772 net.cpp:165] Memory required for data: 8086804
I0210 21:24:46.437634 28772 layer_factory.hpp:77] Creating layer loss
I0210 21:24:46.437646 28772 net.cpp:106] Creating Layer loss
I0210 21:24:46.437656 28772 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:24:46.437667 28772 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:24:46.437695 28772 net.cpp:411] loss -> loss
I0210 21:24:46.437757 28772 layer_factory.hpp:77] Creating layer loss
I0210 21:24:46.437985 28772 net.cpp:150] Setting up loss
I0210 21:24:46.438019 28772 net.cpp:157] Top shape: (1)
I0210 21:24:46.438032 28772 net.cpp:160]     with loss weight 1
I0210 21:24:46.438046 28772 net.cpp:165] Memory required for data: 8086808
I0210 21:24:46.438056 28772 net.cpp:226] loss needs backward computation.
I0210 21:24:46.438066 28772 net.cpp:228] accuracy does not need backward computation.
I0210 21:24:46.438076 28772 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:24:46.438086 28772 net.cpp:226] ip2 needs backward computation.
I0210 21:24:46.438094 28772 net.cpp:226] relu1 needs backward computation.
I0210 21:24:46.438103 28772 net.cpp:226] ip1 needs backward computation.
I0210 21:24:46.438112 28772 net.cpp:226] pool2 needs backward computation.
I0210 21:24:46.438122 28772 net.cpp:226] conv2 needs backward computation.
I0210 21:24:46.438129 28772 net.cpp:226] pool1 needs backward computation.
I0210 21:24:46.438138 28772 net.cpp:226] conv1 needs backward computation.
I0210 21:24:46.438148 28772 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:24:46.438158 28772 net.cpp:228] mnist does not need backward computation.
I0210 21:24:46.438166 28772 net.cpp:270] This network produces output accuracy
I0210 21:24:46.438174 28772 net.cpp:270] This network produces output loss
I0210 21:24:46.438196 28772 net.cpp:283] Network initialization done.
I0210 21:24:46.438259 28772 solver.cpp:60] Solver scaffolding done.
I0210 21:24:46.452663 28772 parallel.cpp:405] GPUs pairs 5:6, 5:7
I0210 21:24:46.696799 28772 data_layer.cpp:41] output data size: 43,1,28,28
I0210 21:24:47.100131 28772 data_layer.cpp:41] output data size: 43,1,28,28
I0210 21:24:47.238502 28772 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:24:47.238690 28772 solver.cpp:311] Solving LeNet
I0210 21:24:47.238704 28772 solver.cpp:312] Learning Rate Policy: inv
I0210 21:24:47.239197 28772 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:24:48.301614 28772 solver.cpp:432]     Test net output #0: accuracy = 0.0853
I0210 21:24:48.301658 28772 solver.cpp:432]     Test net output #1: loss = 2.35666 (* 1 = 2.35666 loss)
I0210 21:24:48.317419 28772 solver.cpp:250] Iteration 0, loss = 2.50588 Time spent communicating 0.408704
I0210 21:24:48.317445 28772 solver.cpp:267]     Train net output #0: loss = 2.50588 (* 1 = 2.50588 loss)
I0210 21:24:48.321189 28772 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:24:49.493001 28772 solver.cpp:250] Iteration 100, loss = 0.604241 Time spent communicating 97.505
I0210 21:24:49.493041 28772 solver.cpp:267]     Train net output #0: loss = 0.604241 (* 1 = 0.604241 loss)
I0210 21:24:49.495537 28772 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:24:50.648221 28772 solver.cpp:250] Iteration 200, loss = 0.338175 Time spent communicating 70.0371
I0210 21:24:50.648267 28772 solver.cpp:267]     Train net output #0: loss = 0.338175 (* 1 = 0.338175 loss)
I0210 21:24:50.650833 28772 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:24:51.808174 28772 solver.cpp:250] Iteration 300, loss = 0.298744 Time spent communicating 67.7222
I0210 21:24:51.808223 28772 solver.cpp:267]     Train net output #0: loss = 0.298745 (* 1 = 0.298745 loss)
I0210 21:24:51.810322 28772 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:24:53.003042 28772 solver.cpp:250] Iteration 400, loss = 0.0823191 Time spent communicating 63.381
I0210 21:24:53.003084 28772 solver.cpp:267]     Train net output #0: loss = 0.0823194 (* 1 = 0.0823194 loss)
I0210 21:24:53.005744 28772 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:24:54.151909 28772 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:24:54.186944 28772 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:24:54.214916 28772 solver.cpp:344] Iteration 500, loss = 0.020653
I0210 21:24:54.214941 28772 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:24:55.162494 28772 solver.cpp:432]     Test net output #0: accuracy = 0.9782
I0210 21:24:55.162541 28772 solver.cpp:432]     Test net output #1: loss = 0.071158 (* 1 = 0.071158 loss)
I0210 21:24:55.162549 28772 solver.cpp:349] Optimization Done.
I0210 21:24:55.162600 28772 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:24:55.179627 28772 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:24:55.195231 28772 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:24:55.195729 28772 caffe.cpp:215] Optimization Done.
