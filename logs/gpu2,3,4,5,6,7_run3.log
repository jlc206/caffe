I0210 21:28:04.504936 29090 caffe.cpp:184] Using GPUs 2, 3, 4, 5, 6, 7
I0210 21:28:05.009492 29090 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 2
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:28:05.020826 29090 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:28:05.021836 29090 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:28:05.021864 29090 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:28:05.022016 29090 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 21
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:28:05.022121 29090 layer_factory.hpp:77] Creating layer mnist
I0210 21:28:05.022810 29090 net.cpp:106] Creating Layer mnist
I0210 21:28:05.022828 29090 net.cpp:411] mnist -> data
I0210 21:28:05.022863 29090 net.cpp:411] mnist -> label
I0210 21:28:05.027859 29094 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:28:05.043720 29090 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:28:05.046032 29090 net.cpp:150] Setting up mnist
I0210 21:28:05.046064 29090 net.cpp:157] Top shape: 21 1 28 28 (16464)
I0210 21:28:05.046073 29090 net.cpp:157] Top shape: 21 (21)
I0210 21:28:05.046079 29090 net.cpp:165] Memory required for data: 65940
I0210 21:28:05.046097 29090 layer_factory.hpp:77] Creating layer conv1
I0210 21:28:05.046130 29090 net.cpp:106] Creating Layer conv1
I0210 21:28:05.046141 29090 net.cpp:454] conv1 <- data
I0210 21:28:05.046162 29090 net.cpp:411] conv1 -> conv1
I0210 21:28:05.047642 29090 net.cpp:150] Setting up conv1
I0210 21:28:05.047657 29090 net.cpp:157] Top shape: 21 20 24 24 (241920)
I0210 21:28:05.047662 29090 net.cpp:165] Memory required for data: 1033620
I0210 21:28:05.047679 29090 layer_factory.hpp:77] Creating layer pool1
I0210 21:28:05.047698 29090 net.cpp:106] Creating Layer pool1
I0210 21:28:05.047705 29090 net.cpp:454] pool1 <- conv1
I0210 21:28:05.047718 29090 net.cpp:411] pool1 -> pool1
I0210 21:28:05.047947 29090 net.cpp:150] Setting up pool1
I0210 21:28:05.047960 29090 net.cpp:157] Top shape: 21 20 12 12 (60480)
I0210 21:28:05.047966 29090 net.cpp:165] Memory required for data: 1275540
I0210 21:28:05.047972 29090 layer_factory.hpp:77] Creating layer conv2
I0210 21:28:05.047989 29090 net.cpp:106] Creating Layer conv2
I0210 21:28:05.047996 29090 net.cpp:454] conv2 <- pool1
I0210 21:28:05.048007 29090 net.cpp:411] conv2 -> conv2
I0210 21:28:05.048437 29090 net.cpp:150] Setting up conv2
I0210 21:28:05.048450 29090 net.cpp:157] Top shape: 21 50 8 8 (67200)
I0210 21:28:05.048456 29090 net.cpp:165] Memory required for data: 1544340
I0210 21:28:05.048468 29090 layer_factory.hpp:77] Creating layer pool2
I0210 21:28:05.048482 29090 net.cpp:106] Creating Layer pool2
I0210 21:28:05.048490 29090 net.cpp:454] pool2 <- conv2
I0210 21:28:05.048501 29090 net.cpp:411] pool2 -> pool2
I0210 21:28:05.048660 29090 net.cpp:150] Setting up pool2
I0210 21:28:05.048671 29090 net.cpp:157] Top shape: 21 50 4 4 (16800)
I0210 21:28:05.048677 29090 net.cpp:165] Memory required for data: 1611540
I0210 21:28:05.048682 29090 layer_factory.hpp:77] Creating layer ip1
I0210 21:28:05.048697 29090 net.cpp:106] Creating Layer ip1
I0210 21:28:05.048704 29090 net.cpp:454] ip1 <- pool2
I0210 21:28:05.048715 29090 net.cpp:411] ip1 -> ip1
I0210 21:28:05.050941 29095 blocking_queue.cpp:50] Waiting for data
I0210 21:28:05.054173 29090 net.cpp:150] Setting up ip1
I0210 21:28:05.054190 29090 net.cpp:157] Top shape: 21 500 (10500)
I0210 21:28:05.054195 29090 net.cpp:165] Memory required for data: 1653540
I0210 21:28:05.054206 29090 layer_factory.hpp:77] Creating layer relu1
I0210 21:28:05.054216 29090 net.cpp:106] Creating Layer relu1
I0210 21:28:05.054221 29090 net.cpp:454] relu1 <- ip1
I0210 21:28:05.054229 29090 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:28:05.054239 29090 net.cpp:150] Setting up relu1
I0210 21:28:05.054247 29090 net.cpp:157] Top shape: 21 500 (10500)
I0210 21:28:05.054252 29090 net.cpp:165] Memory required for data: 1695540
I0210 21:28:05.054263 29090 layer_factory.hpp:77] Creating layer ip2
I0210 21:28:05.054276 29090 net.cpp:106] Creating Layer ip2
I0210 21:28:05.054282 29090 net.cpp:454] ip2 <- ip1
I0210 21:28:05.054293 29090 net.cpp:411] ip2 -> ip2
I0210 21:28:05.055373 29090 net.cpp:150] Setting up ip2
I0210 21:28:05.055387 29090 net.cpp:157] Top shape: 21 10 (210)
I0210 21:28:05.055392 29090 net.cpp:165] Memory required for data: 1696380
I0210 21:28:05.055400 29090 layer_factory.hpp:77] Creating layer loss
I0210 21:28:05.055413 29090 net.cpp:106] Creating Layer loss
I0210 21:28:05.055418 29090 net.cpp:454] loss <- ip2
I0210 21:28:05.055424 29090 net.cpp:454] loss <- label
I0210 21:28:05.055438 29090 net.cpp:411] loss -> loss
I0210 21:28:05.055459 29090 layer_factory.hpp:77] Creating layer loss
I0210 21:28:05.055563 29090 net.cpp:150] Setting up loss
I0210 21:28:05.055574 29090 net.cpp:157] Top shape: (1)
I0210 21:28:05.055582 29090 net.cpp:160]     with loss weight 1
I0210 21:28:05.055610 29090 net.cpp:165] Memory required for data: 1696384
I0210 21:28:05.055619 29090 net.cpp:226] loss needs backward computation.
I0210 21:28:05.055625 29090 net.cpp:226] ip2 needs backward computation.
I0210 21:28:05.055634 29090 net.cpp:226] relu1 needs backward computation.
I0210 21:28:05.055642 29090 net.cpp:226] ip1 needs backward computation.
I0210 21:28:05.055646 29090 net.cpp:226] pool2 needs backward computation.
I0210 21:28:05.055652 29090 net.cpp:226] conv2 needs backward computation.
I0210 21:28:05.055663 29090 net.cpp:226] pool1 needs backward computation.
I0210 21:28:05.055671 29090 net.cpp:226] conv1 needs backward computation.
I0210 21:28:05.055678 29090 net.cpp:228] mnist does not need backward computation.
I0210 21:28:05.055683 29090 net.cpp:270] This network produces output loss
I0210 21:28:05.055702 29090 net.cpp:283] Network initialization done.
I0210 21:28:05.056898 29090 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:28:05.056937 29090 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:28:05.057121 29090 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:28:05.057221 29090 layer_factory.hpp:77] Creating layer mnist
I0210 21:28:05.057365 29090 net.cpp:106] Creating Layer mnist
I0210 21:28:05.057379 29090 net.cpp:411] mnist -> data
I0210 21:28:05.057391 29090 net.cpp:411] mnist -> label
I0210 21:28:05.062315 29096 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:28:05.062661 29090 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:28:05.064340 29090 net.cpp:150] Setting up mnist
I0210 21:28:05.064357 29090 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:28:05.064363 29090 net.cpp:157] Top shape: 100 (100)
I0210 21:28:05.064368 29090 net.cpp:165] Memory required for data: 314000
I0210 21:28:05.064374 29090 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:28:05.064383 29090 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:28:05.064393 29090 net.cpp:454] label_mnist_1_split <- label
I0210 21:28:05.064402 29090 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:28:05.064414 29090 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:28:05.064560 29090 net.cpp:150] Setting up label_mnist_1_split
I0210 21:28:05.064575 29090 net.cpp:157] Top shape: 100 (100)
I0210 21:28:05.064584 29090 net.cpp:157] Top shape: 100 (100)
I0210 21:28:05.064589 29090 net.cpp:165] Memory required for data: 314800
I0210 21:28:05.064594 29090 layer_factory.hpp:77] Creating layer conv1
I0210 21:28:05.064606 29090 net.cpp:106] Creating Layer conv1
I0210 21:28:05.064611 29090 net.cpp:454] conv1 <- data
I0210 21:28:05.064623 29090 net.cpp:411] conv1 -> conv1
I0210 21:28:05.064968 29090 net.cpp:150] Setting up conv1
I0210 21:28:05.064982 29090 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:28:05.064987 29090 net.cpp:165] Memory required for data: 4922800
I0210 21:28:05.064998 29090 layer_factory.hpp:77] Creating layer pool1
I0210 21:28:05.065016 29090 net.cpp:106] Creating Layer pool1
I0210 21:28:05.065038 29090 net.cpp:454] pool1 <- conv1
I0210 21:28:05.065052 29090 net.cpp:411] pool1 -> pool1
I0210 21:28:05.065222 29090 net.cpp:150] Setting up pool1
I0210 21:28:05.065232 29090 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:28:05.065238 29090 net.cpp:165] Memory required for data: 6074800
I0210 21:28:05.065244 29090 layer_factory.hpp:77] Creating layer conv2
I0210 21:28:05.065259 29090 net.cpp:106] Creating Layer conv2
I0210 21:28:05.065266 29090 net.cpp:454] conv2 <- pool1
I0210 21:28:05.065275 29090 net.cpp:411] conv2 -> conv2
I0210 21:28:05.065738 29090 net.cpp:150] Setting up conv2
I0210 21:28:05.065752 29090 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:28:05.065757 29090 net.cpp:165] Memory required for data: 7354800
I0210 21:28:05.065768 29090 layer_factory.hpp:77] Creating layer pool2
I0210 21:28:05.065778 29090 net.cpp:106] Creating Layer pool2
I0210 21:28:05.065784 29090 net.cpp:454] pool2 <- conv2
I0210 21:28:05.065796 29090 net.cpp:411] pool2 -> pool2
I0210 21:28:05.065976 29090 net.cpp:150] Setting up pool2
I0210 21:28:05.065994 29090 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:28:05.065999 29090 net.cpp:165] Memory required for data: 7674800
I0210 21:28:05.066005 29090 layer_factory.hpp:77] Creating layer ip1
I0210 21:28:05.066015 29090 net.cpp:106] Creating Layer ip1
I0210 21:28:05.066021 29090 net.cpp:454] ip1 <- pool2
I0210 21:28:05.066033 29090 net.cpp:411] ip1 -> ip1
I0210 21:28:05.071476 29090 net.cpp:150] Setting up ip1
I0210 21:28:05.071496 29090 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:28:05.071501 29090 net.cpp:165] Memory required for data: 7874800
I0210 21:28:05.071512 29090 layer_factory.hpp:77] Creating layer relu1
I0210 21:28:05.071521 29090 net.cpp:106] Creating Layer relu1
I0210 21:28:05.071527 29090 net.cpp:454] relu1 <- ip1
I0210 21:28:05.071535 29090 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:28:05.071547 29090 net.cpp:150] Setting up relu1
I0210 21:28:05.071554 29090 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:28:05.071558 29090 net.cpp:165] Memory required for data: 8074800
I0210 21:28:05.071563 29090 layer_factory.hpp:77] Creating layer ip2
I0210 21:28:05.071578 29090 net.cpp:106] Creating Layer ip2
I0210 21:28:05.071584 29090 net.cpp:454] ip2 <- ip1
I0210 21:28:05.071594 29090 net.cpp:411] ip2 -> ip2
I0210 21:28:05.071761 29090 net.cpp:150] Setting up ip2
I0210 21:28:05.071779 29090 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:28:05.071785 29090 net.cpp:165] Memory required for data: 8078800
I0210 21:28:05.071795 29090 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:28:05.071804 29090 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:28:05.071810 29090 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:28:05.071820 29090 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:28:05.071830 29090 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:28:05.071877 29090 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:28:05.071887 29090 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:28:05.071898 29090 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:28:05.071903 29090 net.cpp:165] Memory required for data: 8086800
I0210 21:28:05.071909 29090 layer_factory.hpp:77] Creating layer accuracy
I0210 21:28:05.071923 29090 net.cpp:106] Creating Layer accuracy
I0210 21:28:05.071929 29090 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:28:05.071938 29090 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:28:05.071949 29090 net.cpp:411] accuracy -> accuracy
I0210 21:28:05.071964 29090 net.cpp:150] Setting up accuracy
I0210 21:28:05.071971 29090 net.cpp:157] Top shape: (1)
I0210 21:28:05.071977 29090 net.cpp:165] Memory required for data: 8086804
I0210 21:28:05.071984 29090 layer_factory.hpp:77] Creating layer loss
I0210 21:28:05.071992 29090 net.cpp:106] Creating Layer loss
I0210 21:28:05.071998 29090 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:28:05.072005 29090 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:28:05.072016 29090 net.cpp:411] loss -> loss
I0210 21:28:05.072044 29090 layer_factory.hpp:77] Creating layer loss
I0210 21:28:05.072135 29090 net.cpp:150] Setting up loss
I0210 21:28:05.072147 29090 net.cpp:157] Top shape: (1)
I0210 21:28:05.072152 29090 net.cpp:160]     with loss weight 1
I0210 21:28:05.072162 29090 net.cpp:165] Memory required for data: 8086808
I0210 21:28:05.072168 29090 net.cpp:226] loss needs backward computation.
I0210 21:28:05.072175 29090 net.cpp:228] accuracy does not need backward computation.
I0210 21:28:05.072181 29090 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:28:05.072187 29090 net.cpp:226] ip2 needs backward computation.
I0210 21:28:05.072192 29090 net.cpp:226] relu1 needs backward computation.
I0210 21:28:05.072197 29090 net.cpp:226] ip1 needs backward computation.
I0210 21:28:05.072203 29090 net.cpp:226] pool2 needs backward computation.
I0210 21:28:05.072209 29090 net.cpp:226] conv2 needs backward computation.
I0210 21:28:05.072216 29090 net.cpp:226] pool1 needs backward computation.
I0210 21:28:05.072221 29090 net.cpp:226] conv1 needs backward computation.
I0210 21:28:05.072230 29090 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:28:05.072237 29090 net.cpp:228] mnist does not need backward computation.
I0210 21:28:05.072242 29090 net.cpp:270] This network produces output accuracy
I0210 21:28:05.072247 29090 net.cpp:270] This network produces output loss
I0210 21:28:05.072262 29090 net.cpp:283] Network initialization done.
I0210 21:28:05.072301 29090 solver.cpp:60] Solver scaffolding done.
I0210 21:28:05.158951 29090 parallel.cpp:405] GPUs pairs 2:3, 4:5, 6:7, 4:6, 2:4
I0210 21:28:05.396335 29090 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:28:05.781368 29090 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:28:05.877662 29090 parallel.cpp:234] GPU 4 does not have p2p access to GPU 2
I0210 21:28:06.217531 29090 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:28:06.742810 29090 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:28:07.193392 29090 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:28:07.321841 29090 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:28:07.515261 29090 solver.cpp:311] Solving LeNet
I0210 21:28:07.515316 29090 solver.cpp:312] Learning Rate Policy: inv
I0210 21:28:07.516497 29090 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:28:08.518471 29090 solver.cpp:432]     Test net output #0: accuracy = 0.0803
I0210 21:28:08.518518 29090 solver.cpp:432]     Test net output #1: loss = 2.3657 (* 1 = 2.3657 loss)
I0210 21:28:08.534340 29090 solver.cpp:250] Iteration 0, loss = 2.32993 Time spent communicating 0.489536
I0210 21:28:08.534368 29090 solver.cpp:267]     Train net output #0: loss = 2.32993 (* 1 = 2.32993 loss)
I0210 21:28:08.539749 29090 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:28:09.542217 29090 solver.cpp:250] Iteration 100, loss = 0.300505 Time spent communicating 276.686
I0210 21:28:09.542253 29090 solver.cpp:267]     Train net output #0: loss = 0.300505 (* 1 = 0.300505 loss)
I0210 21:28:09.544531 29090 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:28:10.528409 29090 solver.cpp:250] Iteration 200, loss = 0.184685 Time spent communicating 203.259
I0210 21:28:10.528463 29090 solver.cpp:267]     Train net output #0: loss = 0.184685 (* 1 = 0.184685 loss)
I0210 21:28:10.529718 29090 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:28:11.506850 29090 solver.cpp:250] Iteration 300, loss = 0.0545809 Time spent communicating 233.063
I0210 21:28:11.506891 29090 solver.cpp:267]     Train net output #0: loss = 0.054581 (* 1 = 0.054581 loss)
I0210 21:28:11.509279 29090 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:28:12.497746 29090 solver.cpp:250] Iteration 400, loss = 0.468343 Time spent communicating 244.951
I0210 21:28:12.497792 29090 solver.cpp:267]     Train net output #0: loss = 0.468343 (* 1 = 0.468343 loss)
I0210 21:28:12.500380 29090 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:28:13.474644 29090 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:28:13.507740 29090 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:28:13.534243 29090 solver.cpp:344] Iteration 500, loss = 0.17708
I0210 21:28:13.534271 29090 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:28:14.495527 29090 solver.cpp:432]     Test net output #0: accuracy = 0.977
I0210 21:28:14.495563 29090 solver.cpp:432]     Test net output #1: loss = 0.0732842 (* 1 = 0.0732842 loss)
I0210 21:28:14.495575 29090 solver.cpp:349] Optimization Done.
I0210 21:28:14.495700 29090 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0210 21:28:14.520887 29090 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:28:14.542446 29090 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:28:14.563045 29090 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:28:14.583793 29090 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0210 21:28:14.602125 29090 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0210 21:28:14.602605 29090 caffe.cpp:215] Optimization Done.
