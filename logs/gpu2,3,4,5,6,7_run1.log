I0210 21:27:41.885213 29028 caffe.cpp:184] Using GPUs 2, 3, 4, 5, 6, 7
I0210 21:27:42.410079 29028 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 2
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:27:42.421072 29028 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:27:42.422807 29028 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:27:42.422878 29028 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:27:42.423024 29028 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 21
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:27:42.423121 29028 layer_factory.hpp:77] Creating layer mnist
I0210 21:27:42.423841 29028 net.cpp:106] Creating Layer mnist
I0210 21:27:42.423858 29028 net.cpp:411] mnist -> data
I0210 21:27:42.423915 29028 net.cpp:411] mnist -> label
I0210 21:27:42.429806 29032 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:27:42.450047 29028 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:42.451529 29028 net.cpp:150] Setting up mnist
I0210 21:27:42.451553 29028 net.cpp:157] Top shape: 21 1 28 28 (16464)
I0210 21:27:42.451561 29028 net.cpp:157] Top shape: 21 (21)
I0210 21:27:42.451566 29028 net.cpp:165] Memory required for data: 65940
I0210 21:27:42.451581 29028 layer_factory.hpp:77] Creating layer conv1
I0210 21:27:42.451619 29028 net.cpp:106] Creating Layer conv1
I0210 21:27:42.451637 29028 net.cpp:454] conv1 <- data
I0210 21:27:42.451669 29028 net.cpp:411] conv1 -> conv1
I0210 21:27:42.453141 29028 net.cpp:150] Setting up conv1
I0210 21:27:42.453156 29028 net.cpp:157] Top shape: 21 20 24 24 (241920)
I0210 21:27:42.453161 29028 net.cpp:165] Memory required for data: 1033620
I0210 21:27:42.453179 29028 layer_factory.hpp:77] Creating layer pool1
I0210 21:27:42.453202 29028 net.cpp:106] Creating Layer pool1
I0210 21:27:42.453210 29028 net.cpp:454] pool1 <- conv1
I0210 21:27:42.453218 29028 net.cpp:411] pool1 -> pool1
I0210 21:27:42.453438 29028 net.cpp:150] Setting up pool1
I0210 21:27:42.453454 29028 net.cpp:157] Top shape: 21 20 12 12 (60480)
I0210 21:27:42.453459 29028 net.cpp:165] Memory required for data: 1275540
I0210 21:27:42.453464 29028 layer_factory.hpp:77] Creating layer conv2
I0210 21:27:42.453480 29028 net.cpp:106] Creating Layer conv2
I0210 21:27:42.453485 29028 net.cpp:454] conv2 <- pool1
I0210 21:27:42.453496 29028 net.cpp:411] conv2 -> conv2
I0210 21:27:42.453938 29028 net.cpp:150] Setting up conv2
I0210 21:27:42.453953 29028 net.cpp:157] Top shape: 21 50 8 8 (67200)
I0210 21:27:42.453956 29028 net.cpp:165] Memory required for data: 1544340
I0210 21:27:42.453968 29028 layer_factory.hpp:77] Creating layer pool2
I0210 21:27:42.453980 29028 net.cpp:106] Creating Layer pool2
I0210 21:27:42.453986 29028 net.cpp:454] pool2 <- conv2
I0210 21:27:42.453999 29028 net.cpp:411] pool2 -> pool2
I0210 21:27:42.454190 29028 net.cpp:150] Setting up pool2
I0210 21:27:42.454205 29028 net.cpp:157] Top shape: 21 50 4 4 (16800)
I0210 21:27:42.454210 29028 net.cpp:165] Memory required for data: 1611540
I0210 21:27:42.454216 29028 layer_factory.hpp:77] Creating layer ip1
I0210 21:27:42.454233 29028 net.cpp:106] Creating Layer ip1
I0210 21:27:42.454241 29028 net.cpp:454] ip1 <- pool2
I0210 21:27:42.454252 29028 net.cpp:411] ip1 -> ip1
I0210 21:27:42.456879 29033 blocking_queue.cpp:50] Waiting for data
I0210 21:27:42.459748 29028 net.cpp:150] Setting up ip1
I0210 21:27:42.459767 29028 net.cpp:157] Top shape: 21 500 (10500)
I0210 21:27:42.459772 29028 net.cpp:165] Memory required for data: 1653540
I0210 21:27:42.459784 29028 layer_factory.hpp:77] Creating layer relu1
I0210 21:27:42.459794 29028 net.cpp:106] Creating Layer relu1
I0210 21:27:42.459800 29028 net.cpp:454] relu1 <- ip1
I0210 21:27:42.459808 29028 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:27:42.459821 29028 net.cpp:150] Setting up relu1
I0210 21:27:42.459830 29028 net.cpp:157] Top shape: 21 500 (10500)
I0210 21:27:42.459835 29028 net.cpp:165] Memory required for data: 1695540
I0210 21:27:42.459839 29028 layer_factory.hpp:77] Creating layer ip2
I0210 21:27:42.459854 29028 net.cpp:106] Creating Layer ip2
I0210 21:27:42.459861 29028 net.cpp:454] ip2 <- ip1
I0210 21:27:42.459868 29028 net.cpp:411] ip2 -> ip2
I0210 21:27:42.461153 29028 net.cpp:150] Setting up ip2
I0210 21:27:42.461174 29028 net.cpp:157] Top shape: 21 10 (210)
I0210 21:27:42.461181 29028 net.cpp:165] Memory required for data: 1696380
I0210 21:27:42.461195 29028 layer_factory.hpp:77] Creating layer loss
I0210 21:27:42.461210 29028 net.cpp:106] Creating Layer loss
I0210 21:27:42.461220 29028 net.cpp:454] loss <- ip2
I0210 21:27:42.461232 29028 net.cpp:454] loss <- label
I0210 21:27:42.461251 29028 net.cpp:411] loss -> loss
I0210 21:27:42.461278 29028 layer_factory.hpp:77] Creating layer loss
I0210 21:27:42.461419 29028 net.cpp:150] Setting up loss
I0210 21:27:42.461436 29028 net.cpp:157] Top shape: (1)
I0210 21:27:42.461444 29028 net.cpp:160]     with loss weight 1
I0210 21:27:42.461483 29028 net.cpp:165] Memory required for data: 1696384
I0210 21:27:42.461496 29028 net.cpp:226] loss needs backward computation.
I0210 21:27:42.461506 29028 net.cpp:226] ip2 needs backward computation.
I0210 21:27:42.461519 29028 net.cpp:226] relu1 needs backward computation.
I0210 21:27:42.461529 29028 net.cpp:226] ip1 needs backward computation.
I0210 21:27:42.461536 29028 net.cpp:226] pool2 needs backward computation.
I0210 21:27:42.461545 29028 net.cpp:226] conv2 needs backward computation.
I0210 21:27:42.461560 29028 net.cpp:226] pool1 needs backward computation.
I0210 21:27:42.461570 29028 net.cpp:226] conv1 needs backward computation.
I0210 21:27:42.461578 29028 net.cpp:228] mnist does not need backward computation.
I0210 21:27:42.461586 29028 net.cpp:270] This network produces output loss
I0210 21:27:42.461611 29028 net.cpp:283] Network initialization done.
I0210 21:27:42.462762 29028 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:27:42.462802 29028 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:27:42.462985 29028 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:27:42.463088 29028 layer_factory.hpp:77] Creating layer mnist
I0210 21:27:42.463220 29028 net.cpp:106] Creating Layer mnist
I0210 21:27:42.463235 29028 net.cpp:411] mnist -> data
I0210 21:27:42.463246 29028 net.cpp:411] mnist -> label
I0210 21:27:42.468139 29034 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:27:42.468507 29028 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:27:42.470127 29028 net.cpp:150] Setting up mnist
I0210 21:27:42.470145 29028 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:27:42.470154 29028 net.cpp:157] Top shape: 100 (100)
I0210 21:27:42.470157 29028 net.cpp:165] Memory required for data: 314000
I0210 21:27:42.470166 29028 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:27:42.470185 29028 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:27:42.470192 29028 net.cpp:454] label_mnist_1_split <- label
I0210 21:27:42.470202 29028 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:27:42.470216 29028 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:27:42.470296 29028 net.cpp:150] Setting up label_mnist_1_split
I0210 21:27:42.470307 29028 net.cpp:157] Top shape: 100 (100)
I0210 21:27:42.470314 29028 net.cpp:157] Top shape: 100 (100)
I0210 21:27:42.470319 29028 net.cpp:165] Memory required for data: 314800
I0210 21:27:42.470325 29028 layer_factory.hpp:77] Creating layer conv1
I0210 21:27:42.470346 29028 net.cpp:106] Creating Layer conv1
I0210 21:27:42.470353 29028 net.cpp:454] conv1 <- data
I0210 21:27:42.470365 29028 net.cpp:411] conv1 -> conv1
I0210 21:27:42.470629 29028 net.cpp:150] Setting up conv1
I0210 21:27:42.470643 29028 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:27:42.470648 29028 net.cpp:165] Memory required for data: 4922800
I0210 21:27:42.470661 29028 layer_factory.hpp:77] Creating layer pool1
I0210 21:27:42.470676 29028 net.cpp:106] Creating Layer pool1
I0210 21:27:42.470710 29028 net.cpp:454] pool1 <- conv1
I0210 21:27:42.470721 29028 net.cpp:411] pool1 -> pool1
I0210 21:27:42.470880 29028 net.cpp:150] Setting up pool1
I0210 21:27:42.470896 29028 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:27:42.470901 29028 net.cpp:165] Memory required for data: 6074800
I0210 21:27:42.470907 29028 layer_factory.hpp:77] Creating layer conv2
I0210 21:27:42.470923 29028 net.cpp:106] Creating Layer conv2
I0210 21:27:42.470931 29028 net.cpp:454] conv2 <- pool1
I0210 21:27:42.470939 29028 net.cpp:411] conv2 -> conv2
I0210 21:27:42.471395 29028 net.cpp:150] Setting up conv2
I0210 21:27:42.471406 29028 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:27:42.471411 29028 net.cpp:165] Memory required for data: 7354800
I0210 21:27:42.471423 29028 layer_factory.hpp:77] Creating layer pool2
I0210 21:27:42.471437 29028 net.cpp:106] Creating Layer pool2
I0210 21:27:42.471443 29028 net.cpp:454] pool2 <- conv2
I0210 21:27:42.471454 29028 net.cpp:411] pool2 -> pool2
I0210 21:27:42.471607 29028 net.cpp:150] Setting up pool2
I0210 21:27:42.471618 29028 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:27:42.471624 29028 net.cpp:165] Memory required for data: 7674800
I0210 21:27:42.471629 29028 layer_factory.hpp:77] Creating layer ip1
I0210 21:27:42.471642 29028 net.cpp:106] Creating Layer ip1
I0210 21:27:42.471650 29028 net.cpp:454] ip1 <- pool2
I0210 21:27:42.471662 29028 net.cpp:411] ip1 -> ip1
I0210 21:27:42.477016 29028 net.cpp:150] Setting up ip1
I0210 21:27:42.477031 29028 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:27:42.477035 29028 net.cpp:165] Memory required for data: 7874800
I0210 21:27:42.477048 29028 layer_factory.hpp:77] Creating layer relu1
I0210 21:27:42.477061 29028 net.cpp:106] Creating Layer relu1
I0210 21:27:42.477067 29028 net.cpp:454] relu1 <- ip1
I0210 21:27:42.477075 29028 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:27:42.477085 29028 net.cpp:150] Setting up relu1
I0210 21:27:42.477093 29028 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:27:42.477098 29028 net.cpp:165] Memory required for data: 8074800
I0210 21:27:42.477102 29028 layer_factory.hpp:77] Creating layer ip2
I0210 21:27:42.477113 29028 net.cpp:106] Creating Layer ip2
I0210 21:27:42.477119 29028 net.cpp:454] ip2 <- ip1
I0210 21:27:42.477130 29028 net.cpp:411] ip2 -> ip2
I0210 21:27:42.477283 29028 net.cpp:150] Setting up ip2
I0210 21:27:42.477294 29028 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:27:42.477298 29028 net.cpp:165] Memory required for data: 8078800
I0210 21:27:42.477308 29028 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:27:42.477316 29028 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:27:42.477322 29028 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:27:42.477330 29028 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:27:42.477339 29028 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:27:42.477380 29028 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:27:42.477391 29028 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:27:42.477398 29028 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:27:42.477403 29028 net.cpp:165] Memory required for data: 8086800
I0210 21:27:42.477408 29028 layer_factory.hpp:77] Creating layer accuracy
I0210 21:27:42.477422 29028 net.cpp:106] Creating Layer accuracy
I0210 21:27:42.477429 29028 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:27:42.477437 29028 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:27:42.477443 29028 net.cpp:411] accuracy -> accuracy
I0210 21:27:42.477458 29028 net.cpp:150] Setting up accuracy
I0210 21:27:42.477465 29028 net.cpp:157] Top shape: (1)
I0210 21:27:42.477470 29028 net.cpp:165] Memory required for data: 8086804
I0210 21:27:42.477475 29028 layer_factory.hpp:77] Creating layer loss
I0210 21:27:42.477486 29028 net.cpp:106] Creating Layer loss
I0210 21:27:42.477494 29028 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:27:42.477499 29028 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:27:42.477507 29028 net.cpp:411] loss -> loss
I0210 21:27:42.477535 29028 layer_factory.hpp:77] Creating layer loss
I0210 21:27:42.477628 29028 net.cpp:150] Setting up loss
I0210 21:27:42.477638 29028 net.cpp:157] Top shape: (1)
I0210 21:27:42.477644 29028 net.cpp:160]     with loss weight 1
I0210 21:27:42.477658 29028 net.cpp:165] Memory required for data: 8086808
I0210 21:27:42.477664 29028 net.cpp:226] loss needs backward computation.
I0210 21:27:42.477671 29028 net.cpp:228] accuracy does not need backward computation.
I0210 21:27:42.477677 29028 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:27:42.477684 29028 net.cpp:226] ip2 needs backward computation.
I0210 21:27:42.477689 29028 net.cpp:226] relu1 needs backward computation.
I0210 21:27:42.477694 29028 net.cpp:226] ip1 needs backward computation.
I0210 21:27:42.477699 29028 net.cpp:226] pool2 needs backward computation.
I0210 21:27:42.477705 29028 net.cpp:226] conv2 needs backward computation.
I0210 21:27:42.477710 29028 net.cpp:226] pool1 needs backward computation.
I0210 21:27:42.477715 29028 net.cpp:226] conv1 needs backward computation.
I0210 21:27:42.477720 29028 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:27:42.477726 29028 net.cpp:228] mnist does not need backward computation.
I0210 21:27:42.477731 29028 net.cpp:270] This network produces output accuracy
I0210 21:27:42.477736 29028 net.cpp:270] This network produces output loss
I0210 21:27:42.477752 29028 net.cpp:283] Network initialization done.
I0210 21:27:42.477807 29028 solver.cpp:60] Solver scaffolding done.
I0210 21:27:42.586745 29028 parallel.cpp:405] GPUs pairs 2:3, 4:5, 6:7, 4:6, 2:4
I0210 21:27:43.202355 29028 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:43.589603 29028 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:43.776887 29028 parallel.cpp:234] GPU 4 does not have p2p access to GPU 2
I0210 21:27:44.006383 29028 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:44.734387 29028 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:45.221851 29028 data_layer.cpp:41] output data size: 21,1,28,28
I0210 21:27:45.385195 29028 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:27:45.385547 29028 solver.cpp:311] Solving LeNet
I0210 21:27:45.385560 29028 solver.cpp:312] Learning Rate Policy: inv
I0210 21:27:45.385800 29028 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:27:46.406076 29028 solver.cpp:432]     Test net output #0: accuracy = 0.0989
I0210 21:27:46.406117 29028 solver.cpp:432]     Test net output #1: loss = 2.30424 (* 1 = 2.30424 loss)
I0210 21:27:46.419196 29028 solver.cpp:250] Iteration 0, loss = 2.25082 Time spent communicating 0.447296
I0210 21:27:46.419219 29028 solver.cpp:267]     Train net output #0: loss = 2.25082 (* 1 = 2.25082 loss)
I0210 21:27:46.424571 29028 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:27:47.411814 29028 solver.cpp:250] Iteration 100, loss = 0.32967 Time spent communicating 202.805
I0210 21:27:47.411854 29028 solver.cpp:267]     Train net output #0: loss = 0.32967 (* 1 = 0.32967 loss)
I0210 21:27:47.413442 29028 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:27:48.398545 29028 solver.cpp:250] Iteration 200, loss = 0.207952 Time spent communicating 163.332
I0210 21:27:48.398577 29028 solver.cpp:267]     Train net output #0: loss = 0.207952 (* 1 = 0.207952 loss)
I0210 21:27:48.399950 29028 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:27:49.398290 29028 solver.cpp:250] Iteration 300, loss = 0.0715428 Time spent communicating 183.127
I0210 21:27:49.398324 29028 solver.cpp:267]     Train net output #0: loss = 0.0715427 (* 1 = 0.0715427 loss)
I0210 21:27:49.400208 29028 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:27:50.379590 29028 solver.cpp:250] Iteration 400, loss = 0.487538 Time spent communicating 160.844
I0210 21:27:50.379623 29028 solver.cpp:267]     Train net output #0: loss = 0.487538 (* 1 = 0.487538 loss)
I0210 21:27:50.381516 29028 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:27:51.363360 29028 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:27:51.397744 29028 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:27:51.424545 29028 solver.cpp:344] Iteration 500, loss = 0.154382
I0210 21:27:51.424578 29028 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:27:52.380537 29028 solver.cpp:432]     Test net output #0: accuracy = 0.977
I0210 21:27:52.380590 29028 solver.cpp:432]     Test net output #1: loss = 0.073672 (* 1 = 0.073672 loss)
I0210 21:27:52.380604 29028 solver.cpp:349] Optimization Done.
I0210 21:27:52.380723 29028 parallel.cpp:256] IN DESTRUCTOR AND I'M 3
I0210 21:27:52.404328 29028 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:27:52.425438 29028 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:27:52.446337 29028 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:27:52.466770 29028 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0210 21:27:52.485412 29028 parallel.cpp:256] IN DESTRUCTOR AND I'M 2
I0210 21:27:52.485916 29028 caffe.cpp:215] Optimization Done.
