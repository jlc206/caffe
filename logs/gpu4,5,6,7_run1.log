I0210 21:25:37.522864 28814 caffe.cpp:184] Using GPUs 4, 5, 6, 7
I0210 21:25:38.035703 28814 solver.cpp:48] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 500
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 4
net: "examples/mnist/lenet_train_test.prototxt"
I0210 21:25:38.037012 28814 solver.cpp:91] Creating training net from net file: examples/mnist/lenet_train_test.prototxt
I0210 21:25:38.038127 28814 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0210 21:25:38.038156 28814 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0210 21:25:38.038296 28814 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 32
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:25:38.038389 28814 layer_factory.hpp:77] Creating layer mnist
I0210 21:25:38.039111 28814 net.cpp:106] Creating Layer mnist
I0210 21:25:38.039132 28814 net.cpp:411] mnist -> data
I0210 21:25:38.039175 28814 net.cpp:411] mnist -> label
I0210 21:25:38.044802 28821 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_train_lmdb
I0210 21:25:38.060104 28814 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:38.061636 28814 net.cpp:150] Setting up mnist
I0210 21:25:38.061668 28814 net.cpp:157] Top shape: 32 1 28 28 (25088)
I0210 21:25:38.061684 28814 net.cpp:157] Top shape: 32 (32)
I0210 21:25:38.061697 28814 net.cpp:165] Memory required for data: 100480
I0210 21:25:38.061725 28814 layer_factory.hpp:77] Creating layer conv1
I0210 21:25:38.061774 28814 net.cpp:106] Creating Layer conv1
I0210 21:25:38.061794 28814 net.cpp:454] conv1 <- data
I0210 21:25:38.061837 28814 net.cpp:411] conv1 -> conv1
I0210 21:25:38.063356 28814 net.cpp:150] Setting up conv1
I0210 21:25:38.063372 28814 net.cpp:157] Top shape: 32 20 24 24 (368640)
I0210 21:25:38.063379 28814 net.cpp:165] Memory required for data: 1575040
I0210 21:25:38.063396 28814 layer_factory.hpp:77] Creating layer pool1
I0210 21:25:38.063416 28814 net.cpp:106] Creating Layer pool1
I0210 21:25:38.063423 28814 net.cpp:454] pool1 <- conv1
I0210 21:25:38.063436 28814 net.cpp:411] pool1 -> pool1
I0210 21:25:38.063674 28814 net.cpp:150] Setting up pool1
I0210 21:25:38.063688 28814 net.cpp:157] Top shape: 32 20 12 12 (92160)
I0210 21:25:38.063694 28814 net.cpp:165] Memory required for data: 1943680
I0210 21:25:38.063700 28814 layer_factory.hpp:77] Creating layer conv2
I0210 21:25:38.063721 28814 net.cpp:106] Creating Layer conv2
I0210 21:25:38.063731 28814 net.cpp:454] conv2 <- pool1
I0210 21:25:38.063742 28814 net.cpp:411] conv2 -> conv2
I0210 21:25:38.064178 28814 net.cpp:150] Setting up conv2
I0210 21:25:38.064193 28814 net.cpp:157] Top shape: 32 50 8 8 (102400)
I0210 21:25:38.064198 28814 net.cpp:165] Memory required for data: 2353280
I0210 21:25:38.064209 28814 layer_factory.hpp:77] Creating layer pool2
I0210 21:25:38.064224 28814 net.cpp:106] Creating Layer pool2
I0210 21:25:38.064230 28814 net.cpp:454] pool2 <- conv2
I0210 21:25:38.064242 28814 net.cpp:411] pool2 -> pool2
I0210 21:25:38.064396 28814 net.cpp:150] Setting up pool2
I0210 21:25:38.064407 28814 net.cpp:157] Top shape: 32 50 4 4 (25600)
I0210 21:25:38.064412 28814 net.cpp:165] Memory required for data: 2455680
I0210 21:25:38.064417 28814 layer_factory.hpp:77] Creating layer ip1
I0210 21:25:38.064435 28814 net.cpp:106] Creating Layer ip1
I0210 21:25:38.064440 28814 net.cpp:454] ip1 <- pool2
I0210 21:25:38.064455 28814 net.cpp:411] ip1 -> ip1
I0210 21:25:38.066172 28822 blocking_queue.cpp:50] Waiting for data
I0210 21:25:38.069938 28814 net.cpp:150] Setting up ip1
I0210 21:25:38.069954 28814 net.cpp:157] Top shape: 32 500 (16000)
I0210 21:25:38.069959 28814 net.cpp:165] Memory required for data: 2519680
I0210 21:25:38.069972 28814 layer_factory.hpp:77] Creating layer relu1
I0210 21:25:38.069983 28814 net.cpp:106] Creating Layer relu1
I0210 21:25:38.069989 28814 net.cpp:454] relu1 <- ip1
I0210 21:25:38.069998 28814 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:25:38.070010 28814 net.cpp:150] Setting up relu1
I0210 21:25:38.070018 28814 net.cpp:157] Top shape: 32 500 (16000)
I0210 21:25:38.070022 28814 net.cpp:165] Memory required for data: 2583680
I0210 21:25:38.070027 28814 layer_factory.hpp:77] Creating layer ip2
I0210 21:25:38.070040 28814 net.cpp:106] Creating Layer ip2
I0210 21:25:38.070047 28814 net.cpp:454] ip2 <- ip1
I0210 21:25:38.070060 28814 net.cpp:411] ip2 -> ip2
I0210 21:25:38.071153 28814 net.cpp:150] Setting up ip2
I0210 21:25:38.071167 28814 net.cpp:157] Top shape: 32 10 (320)
I0210 21:25:38.071171 28814 net.cpp:165] Memory required for data: 2584960
I0210 21:25:38.071184 28814 layer_factory.hpp:77] Creating layer loss
I0210 21:25:38.071207 28814 net.cpp:106] Creating Layer loss
I0210 21:25:38.071216 28814 net.cpp:454] loss <- ip2
I0210 21:25:38.071229 28814 net.cpp:454] loss <- label
I0210 21:25:38.071246 28814 net.cpp:411] loss -> loss
I0210 21:25:38.071279 28814 layer_factory.hpp:77] Creating layer loss
I0210 21:25:38.071411 28814 net.cpp:150] Setting up loss
I0210 21:25:38.071425 28814 net.cpp:157] Top shape: (1)
I0210 21:25:38.071435 28814 net.cpp:160]     with loss weight 1
I0210 21:25:38.071468 28814 net.cpp:165] Memory required for data: 2584964
I0210 21:25:38.071477 28814 net.cpp:226] loss needs backward computation.
I0210 21:25:38.071485 28814 net.cpp:226] ip2 needs backward computation.
I0210 21:25:38.071491 28814 net.cpp:226] relu1 needs backward computation.
I0210 21:25:38.071496 28814 net.cpp:226] ip1 needs backward computation.
I0210 21:25:38.071501 28814 net.cpp:226] pool2 needs backward computation.
I0210 21:25:38.071507 28814 net.cpp:226] conv2 needs backward computation.
I0210 21:25:38.071517 28814 net.cpp:226] pool1 needs backward computation.
I0210 21:25:38.071522 28814 net.cpp:226] conv1 needs backward computation.
I0210 21:25:38.071528 28814 net.cpp:228] mnist does not need backward computation.
I0210 21:25:38.071534 28814 net.cpp:270] This network produces output loss
I0210 21:25:38.071549 28814 net.cpp:283] Network initialization done.
I0210 21:25:38.072633 28814 solver.cpp:181] Creating test net (#0) specified by net file: examples/mnist/lenet_train_test.prototxt
I0210 21:25:38.072674 28814 net.cpp:322] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0210 21:25:38.072865 28814 net.cpp:49] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0210 21:25:38.072980 28814 layer_factory.hpp:77] Creating layer mnist
I0210 21:25:38.073137 28814 net.cpp:106] Creating Layer mnist
I0210 21:25:38.073149 28814 net.cpp:411] mnist -> data
I0210 21:25:38.073161 28814 net.cpp:411] mnist -> label
I0210 21:25:38.077980 28823 db_lmdb.cpp:38] Opened lmdb examples/mnist/mnist_test_lmdb
I0210 21:25:38.078317 28814 data_layer.cpp:41] output data size: 100,1,28,28
I0210 21:25:38.080273 28814 net.cpp:150] Setting up mnist
I0210 21:25:38.080288 28814 net.cpp:157] Top shape: 100 1 28 28 (78400)
I0210 21:25:38.080296 28814 net.cpp:157] Top shape: 100 (100)
I0210 21:25:38.080302 28814 net.cpp:165] Memory required for data: 314000
I0210 21:25:38.080308 28814 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0210 21:25:38.080320 28814 net.cpp:106] Creating Layer label_mnist_1_split
I0210 21:25:38.080327 28814 net.cpp:454] label_mnist_1_split <- label
I0210 21:25:38.080335 28814 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_0
I0210 21:25:38.080345 28814 net.cpp:411] label_mnist_1_split -> label_mnist_1_split_1
I0210 21:25:38.080433 28814 net.cpp:150] Setting up label_mnist_1_split
I0210 21:25:38.080443 28814 net.cpp:157] Top shape: 100 (100)
I0210 21:25:38.080451 28814 net.cpp:157] Top shape: 100 (100)
I0210 21:25:38.080456 28814 net.cpp:165] Memory required for data: 314800
I0210 21:25:38.080461 28814 layer_factory.hpp:77] Creating layer conv1
I0210 21:25:38.080474 28814 net.cpp:106] Creating Layer conv1
I0210 21:25:38.080481 28814 net.cpp:454] conv1 <- data
I0210 21:25:38.080493 28814 net.cpp:411] conv1 -> conv1
I0210 21:25:38.080744 28814 net.cpp:150] Setting up conv1
I0210 21:25:38.080757 28814 net.cpp:157] Top shape: 100 20 24 24 (1152000)
I0210 21:25:38.080765 28814 net.cpp:165] Memory required for data: 4922800
I0210 21:25:38.080785 28814 layer_factory.hpp:77] Creating layer pool1
I0210 21:25:38.080829 28814 net.cpp:106] Creating Layer pool1
I0210 21:25:38.080842 28814 net.cpp:454] pool1 <- conv1
I0210 21:25:38.080863 28814 net.cpp:411] pool1 -> pool1
I0210 21:25:38.081075 28814 net.cpp:150] Setting up pool1
I0210 21:25:38.081089 28814 net.cpp:157] Top shape: 100 20 12 12 (288000)
I0210 21:25:38.081094 28814 net.cpp:165] Memory required for data: 6074800
I0210 21:25:38.081100 28814 layer_factory.hpp:77] Creating layer conv2
I0210 21:25:38.081117 28814 net.cpp:106] Creating Layer conv2
I0210 21:25:38.081123 28814 net.cpp:454] conv2 <- pool1
I0210 21:25:38.081133 28814 net.cpp:411] conv2 -> conv2
I0210 21:25:38.081583 28814 net.cpp:150] Setting up conv2
I0210 21:25:38.081595 28814 net.cpp:157] Top shape: 100 50 8 8 (320000)
I0210 21:25:38.081599 28814 net.cpp:165] Memory required for data: 7354800
I0210 21:25:38.081611 28814 layer_factory.hpp:77] Creating layer pool2
I0210 21:25:38.081620 28814 net.cpp:106] Creating Layer pool2
I0210 21:25:38.081630 28814 net.cpp:454] pool2 <- conv2
I0210 21:25:38.081640 28814 net.cpp:411] pool2 -> pool2
I0210 21:25:38.081792 28814 net.cpp:150] Setting up pool2
I0210 21:25:38.081804 28814 net.cpp:157] Top shape: 100 50 4 4 (80000)
I0210 21:25:38.081811 28814 net.cpp:165] Memory required for data: 7674800
I0210 21:25:38.081820 28814 layer_factory.hpp:77] Creating layer ip1
I0210 21:25:38.081835 28814 net.cpp:106] Creating Layer ip1
I0210 21:25:38.081843 28814 net.cpp:454] ip1 <- pool2
I0210 21:25:38.081862 28814 net.cpp:411] ip1 -> ip1
I0210 21:25:38.088837 28814 net.cpp:150] Setting up ip1
I0210 21:25:38.088871 28814 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:25:38.088898 28814 net.cpp:165] Memory required for data: 7874800
I0210 21:25:38.088913 28814 layer_factory.hpp:77] Creating layer relu1
I0210 21:25:38.088923 28814 net.cpp:106] Creating Layer relu1
I0210 21:25:38.088929 28814 net.cpp:454] relu1 <- ip1
I0210 21:25:38.088937 28814 net.cpp:397] relu1 -> ip1 (in-place)
I0210 21:25:38.088948 28814 net.cpp:150] Setting up relu1
I0210 21:25:38.088955 28814 net.cpp:157] Top shape: 100 500 (50000)
I0210 21:25:38.088960 28814 net.cpp:165] Memory required for data: 8074800
I0210 21:25:38.088964 28814 layer_factory.hpp:77] Creating layer ip2
I0210 21:25:38.088979 28814 net.cpp:106] Creating Layer ip2
I0210 21:25:38.088985 28814 net.cpp:454] ip2 <- ip1
I0210 21:25:38.088994 28814 net.cpp:411] ip2 -> ip2
I0210 21:25:38.089148 28814 net.cpp:150] Setting up ip2
I0210 21:25:38.089159 28814 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:38.089165 28814 net.cpp:165] Memory required for data: 8078800
I0210 21:25:38.089174 28814 layer_factory.hpp:77] Creating layer ip2_ip2_0_split
I0210 21:25:38.089182 28814 net.cpp:106] Creating Layer ip2_ip2_0_split
I0210 21:25:38.089189 28814 net.cpp:454] ip2_ip2_0_split <- ip2
I0210 21:25:38.089196 28814 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_0
I0210 21:25:38.089205 28814 net.cpp:411] ip2_ip2_0_split -> ip2_ip2_0_split_1
I0210 21:25:38.089246 28814 net.cpp:150] Setting up ip2_ip2_0_split
I0210 21:25:38.089257 28814 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:38.089263 28814 net.cpp:157] Top shape: 100 10 (1000)
I0210 21:25:38.089268 28814 net.cpp:165] Memory required for data: 8086800
I0210 21:25:38.089274 28814 layer_factory.hpp:77] Creating layer accuracy
I0210 21:25:38.089288 28814 net.cpp:106] Creating Layer accuracy
I0210 21:25:38.089295 28814 net.cpp:454] accuracy <- ip2_ip2_0_split_0
I0210 21:25:38.089303 28814 net.cpp:454] accuracy <- label_mnist_1_split_0
I0210 21:25:38.089313 28814 net.cpp:411] accuracy -> accuracy
I0210 21:25:38.089329 28814 net.cpp:150] Setting up accuracy
I0210 21:25:38.089336 28814 net.cpp:157] Top shape: (1)
I0210 21:25:38.089341 28814 net.cpp:165] Memory required for data: 8086804
I0210 21:25:38.089347 28814 layer_factory.hpp:77] Creating layer loss
I0210 21:25:38.089355 28814 net.cpp:106] Creating Layer loss
I0210 21:25:38.089361 28814 net.cpp:454] loss <- ip2_ip2_0_split_1
I0210 21:25:38.089368 28814 net.cpp:454] loss <- label_mnist_1_split_1
I0210 21:25:38.089380 28814 net.cpp:411] loss -> loss
I0210 21:25:38.089407 28814 layer_factory.hpp:77] Creating layer loss
I0210 21:25:38.089498 28814 net.cpp:150] Setting up loss
I0210 21:25:38.089509 28814 net.cpp:157] Top shape: (1)
I0210 21:25:38.089514 28814 net.cpp:160]     with loss weight 1
I0210 21:25:38.089525 28814 net.cpp:165] Memory required for data: 8086808
I0210 21:25:38.089531 28814 net.cpp:226] loss needs backward computation.
I0210 21:25:38.089537 28814 net.cpp:228] accuracy does not need backward computation.
I0210 21:25:38.089545 28814 net.cpp:226] ip2_ip2_0_split needs backward computation.
I0210 21:25:38.089550 28814 net.cpp:226] ip2 needs backward computation.
I0210 21:25:38.089555 28814 net.cpp:226] relu1 needs backward computation.
I0210 21:25:38.089558 28814 net.cpp:226] ip1 needs backward computation.
I0210 21:25:38.089563 28814 net.cpp:226] pool2 needs backward computation.
I0210 21:25:38.089571 28814 net.cpp:226] conv2 needs backward computation.
I0210 21:25:38.089577 28814 net.cpp:226] pool1 needs backward computation.
I0210 21:25:38.089583 28814 net.cpp:226] conv1 needs backward computation.
I0210 21:25:38.089589 28814 net.cpp:228] label_mnist_1_split does not need backward computation.
I0210 21:25:38.089596 28814 net.cpp:228] mnist does not need backward computation.
I0210 21:25:38.089602 28814 net.cpp:270] This network produces output accuracy
I0210 21:25:38.089609 28814 net.cpp:270] This network produces output loss
I0210 21:25:38.089630 28814 net.cpp:283] Network initialization done.
I0210 21:25:38.089699 28814 solver.cpp:60] Solver scaffolding done.
I0210 21:25:38.163732 28814 parallel.cpp:405] GPUs pairs 4:5, 6:7, 4:6
I0210 21:25:38.472756 28814 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:38.848418 28814 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:39.286347 28814 data_layer.cpp:41] output data size: 32,1,28,28
I0210 21:25:39.401614 28814 parallel.cpp:433] Starting Optimization - TEST TEST TEST
I0210 21:25:39.401985 28814 solver.cpp:311] Solving LeNet
I0210 21:25:39.402021 28814 solver.cpp:312] Learning Rate Policy: inv
I0210 21:25:39.402510 28814 solver.cpp:364] Iteration 0, Testing net (#0)
I0210 21:25:40.410189 28814 solver.cpp:432]     Test net output #0: accuracy = 0.1015
I0210 21:25:40.410233 28814 solver.cpp:432]     Test net output #1: loss = 2.43002 (* 1 = 2.43002 loss)
I0210 21:25:40.424926 28814 solver.cpp:250] Iteration 0, loss = 2.48074 Time spent communicating 0.380704
I0210 21:25:40.424949 28814 solver.cpp:267]     Train net output #0: loss = 2.48074 (* 1 = 2.48074 loss)
I0210 21:25:40.429075 28814 sgd_solver.cpp:106] Iteration 0, lr = 0.01
I0210 21:25:41.427534 28814 solver.cpp:250] Iteration 100, loss = 0.357259 Time spent communicating 113.021
I0210 21:25:41.427579 28814 solver.cpp:267]     Train net output #0: loss = 0.357259 (* 1 = 0.357259 loss)
I0210 21:25:41.429394 28814 sgd_solver.cpp:106] Iteration 100, lr = 0.00992565
I0210 21:25:42.421079 28814 solver.cpp:250] Iteration 200, loss = 0.270699 Time spent communicating 103.691
I0210 21:25:42.421128 28814 solver.cpp:267]     Train net output #0: loss = 0.270699 (* 1 = 0.270699 loss)
I0210 21:25:42.422821 28814 sgd_solver.cpp:106] Iteration 200, lr = 0.00985258
I0210 21:25:43.426834 28814 solver.cpp:250] Iteration 300, loss = 0.172012 Time spent communicating 126.472
I0210 21:25:43.426882 28814 solver.cpp:267]     Train net output #0: loss = 0.172012 (* 1 = 0.172012 loss)
I0210 21:25:43.428580 28814 sgd_solver.cpp:106] Iteration 300, lr = 0.00978075
I0210 21:25:44.425240 28814 solver.cpp:250] Iteration 400, loss = 0.359726 Time spent communicating 133.692
I0210 21:25:44.425285 28814 solver.cpp:267]     Train net output #0: loss = 0.359727 (* 1 = 0.359727 loss)
I0210 21:25:44.426942 28814 sgd_solver.cpp:106] Iteration 400, lr = 0.00971013
I0210 21:25:45.423082 28814 solver.cpp:482] Snapshotting to binary proto file examples/mnist/lenet_iter_500.caffemodel
I0210 21:25:45.456516 28814 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_500.solverstate
I0210 21:25:45.485014 28814 solver.cpp:344] Iteration 500, loss = 0.117436
I0210 21:25:45.485092 28814 solver.cpp:364] Iteration 500, Testing net (#0)
I0210 21:25:46.436386 28814 solver.cpp:432]     Test net output #0: accuracy = 0.9765
I0210 21:25:46.436431 28814 solver.cpp:432]     Test net output #1: loss = 0.0729301 (* 1 = 0.0729301 loss)
I0210 21:25:46.436439 28814 solver.cpp:349] Optimization Done.
I0210 21:25:46.436489 28814 parallel.cpp:256] IN DESTRUCTOR AND I'M 5
I0210 21:25:46.455351 28814 parallel.cpp:256] IN DESTRUCTOR AND I'M 7
I0210 21:25:46.471312 28814 parallel.cpp:256] IN DESTRUCTOR AND I'M 6
I0210 21:25:46.488600 28814 parallel.cpp:256] IN DESTRUCTOR AND I'M 4
I0210 21:25:46.489104 28814 caffe.cpp:215] Optimization Done.
